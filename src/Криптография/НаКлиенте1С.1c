
&НаСервереБезКонтекста
Функция ПрограммыКриптографии()
	
    Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ 
					|		Программы.ИмяПрограммы, 
					|		Программы.ТипПрограммы, 
					|		ЕстьNULL(Пути.ПутьКПрограмме,"""") КАК ПутьКПрограмме
					|	Из Справочник.ПрограммыЭлектроннойПодписиИШифрования КАК Программы
					|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПутиКПрограммамЭлектроннойПодписиИШифрованияНаСерверахLinux КАК Пути ПО Программы.Ссылка = Пути.Программа
					|		ГДЕ НЕ ПометкаУдаления
					|";
	ОписанияПрограмм = Новый Массив; 
	Попытка
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СвойстваПрограммы = Новый Структура("ИмяПрограммы,ПутьКПрограмме,ТипПрограммы", Выборка.ИмяПрограммы,Выборка.ПутьКПрограмме,Выборка.ТипПрограммы);
			ОписанияПрограмм.Добавить(СвойстваПрограммы);
		КонецЦикла;
	Исключение
	КонецПопытки;
	Возврат ОписанияПрограмм;
КонецФункции

&НаСервереБезКонтекста
Функция КэшЛокальныхСертификатовПрочитать() Экспорт
	КэшЛокальныхСертификатов = ХранилищеОбщихНастроек.Загрузить("Saby", "КэшЛокальныхСертификатов");
	Если ТипЗнч(КэшЛокальныхСертификатов) <> Тип("Структура") Тогда
		КэшЛокальныхСертификатов = Новый Структура("ПоследнееОбновление, Отпечатки, Алгоритмы",,Новый Массив(), Новый Соответствие());
	КонецЕсли;

	Возврат КэшЛокальныхСертификатов;
КонецФункции

&НаСервереБезКонтекста
Функция КэшЛокальныхСертификатовЗаписать(КэшЛокальныхСертификатов) Экспорт
	ХранилищеОбщихНастроек.Сохранить("Saby", "КэшЛокальныхСертификатов", КэшЛокальныхСертификатов);
КонецФункции

#Область ОбновитьКэшЛокальныхСертификатов

&НаКлиенте
Процедура ОбновитьКэшЛокальныхСертификатов(ОбработчикРезультата, ВремяЖизниКэша = 60) Экспорт
	
	// читаем из хранилища
	КэшЛокальныхСертификатов = КэшЛокальныхСертификатовПрочитать();
	Если ЗначениеЗаполнено(КэшЛокальныхСертификатов.ПоследнееОбновление) И КэшЛокальныхСертификатов.ПоследнееОбновление + ВремяЖизниКэша > ТекущаяДата() Тогда
		ВыполнитьОбработкуОповещения(ОбработчикРезультата, Истина); // Берем из кэша
		Возврат;
	КонецЕсли;
	
	Контекст = Новый Структура;
	
	Контекст.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	Контекст.Вставить("КэшЛокальныхСертификатов", КэшЛокальныхСертификатов);
	
	ОбработчикРезультата = Новый ОписаниеОповещения("ОбновитьКэшЛокальныхСертификатовПослеНахожденияМенеджераКриптографии", ЭтотОбъект, Контекст);
	НайтиМенеджерКриптографии(ОбработчикРезультата);
	
КонецПроцедуры  

&НаКлиенте
Процедура ОбновитьКэшЛокальныхСертификатовПослеНахожденияМенеджераКриптографии(МенеджерКриптографии, Контекст) Экспорт
	
	Если МенеджерКриптографии = Неопределено Тогда
		ВыполнитьОбработкуОповещения(Контекст.ОбработчикРезультата, Неопределено); // Ошибка
		Возврат;
	КонецЕсли;
	
	Контекст.Вставить("МенеджерКриптографии", МенеджерКриптографии);
	
	ОбработчикРезультата = Новый ОписаниеОповещения("ОбновитьКэшЛокальныхСертификатовПослеПолученияХранилищаСертификатов", ЭтотОбъект, Контекст);
	
	ПолучитьХранилищеСертификатов(ОбработчикРезультата, МенеджерКриптографии);
	
КонецПроцедуры  

&НаКлиенте
Процедура ОбновитьКэшЛокальныхСертификатовПослеПолученияХранилищаСертификатов(ХранилищеСертификатовКриптографии, Контекст) Экспорт
	
	Если ХранилищеСертификатовКриптографии = Неопределено Тогда
		ВыполнитьОбработкуОповещения(Контекст.ОбработчикРезультата, Неопределено); // Ошибка
		Возврат;
	КонецЕсли;
	
	Контекст.Вставить("ХранилищеСертификатовКриптографии", ХранилищеСертификатовКриптографии);
	
	ОбработчикРезультата = Новый ОписаниеОповещения("ОбновитьКэшЛокальныхСертификатовЗавершение", ЭтотОбъект, Контекст);
	ПолучитьВсеСертификаты(ОбработчикРезультата, ХранилищеСертификатовКриптографии);
	
КонецПроцедуры  

&НаКлиенте
Процедура ОбновитьКэшЛокальныхСертификатовЗавершение(Сертификаты, Контекст) Экспорт
	
	Если Сертификаты = Неопределено Тогда
		ВыполнитьОбработкуОповещения(Контекст.ОбработчикРезультата, Неопределено); // Ошибка
		Возврат;
	КонецЕсли;
	
	КэшЛокальныхСертификатов = Контекст.КэшЛокальныхСертификатов;
	
    КэшЛокальныхСертификатов["Отпечатки"].Очистить();
    Для Каждого Серт из Сертификаты Цикл
		КэшЛокальныхСертификатов["Отпечатки"].Добавить(Серт.Отпечаток);
	КонецЦикла;
	КэшЛокальныхСертификатов["Алгоритмы"].Очистить();
	Для Каждого Менеджер Из МенеджерыКриптографии Цикл
		КэшЛокальныхСертификатов["Алгоритмы"].Вставить(Менеджер.Ключ);
	КонецЦикла;
	КэшЛокальныхСертификатов["ПоследнееОбновление"] = ТекущаяДата();
	КэшЛокальныхСертификатовЗаписать(КэшЛокальныхСертификатов);
	
	ВыполнитьОбработкуОповещения(Контекст.ОбработчикРезультата, Истина);
	
КонецПроцедуры  

#КонецОбласти

#Область НайтиМенеджерКриптографии

&НаКлиенте
Процедура НайтиМенеджерКриптографии(ОбработчикРезультата, Алгоритм = Неопределено)
	
	// Получаем асинхронно
	Контекст = Новый Структура;
	Контекст.Вставить("Алгоритм", Алгоритм);
	Контекст.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	
	Если МенеджерыКриптографии = Неопределено Тогда
		НайтиМенеджерКриптографииНачатьПоиск(Контекст);
	Иначе
		НайтиМенеджерКриптографииЗавершение(Контекст);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НайтиМенеджерКриптографииНачатьПоиск(Контекст)
	
	ОбработчикРезультата = Новый ОписаниеОповещения("НайтиМенеджерКриптографииПослеСозданияМенеджеровКриптографии", ЭтотОбъект, Контекст);
	СоздатьМенеджерыКриптографии(ОбработчикРезультата, Контекст.Алгоритм)
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиМенеджерКриптографииПослеСозданияМенеджеровКриптографии(Менеджеры, Контекст) Экспорт
	
	Если Менеджеры = Неопределено ИЛИ Менеджеры.Количество() = 0 Тогда
		ВыполнитьОбработкуОповещения(Контекст.ОбработчикРезультата, Неопределено); // Ошибка
		Возврат;
	КонецЕсли;
	
	МенеджерыКриптографии = Новый Соответствие;
	Для Каждого Менеджер Из Менеджеры Цикл
		МенеджерыКриптографии.Вставить(Менеджер.АлгоритмПодписи, Менеджер);
	КонецЦикла;
	
	НайтиМенеджерКриптографииЗавершение(Контекст);

КонецПроцедуры

&НаКлиенте
Процедура НайтиМенеджерКриптографииЗавершение(Контекст)
	
	Результат = Неопределено;
	
	Если Контекст.Алгоритм = Неопределено Тогда
		Для Каждого Элем Из МенеджерыКриптографии Цикл
			Результат = Элем.Значение;
			Прервать;
		КонецЦикла
	Иначе
		Результат = МенеджерыКриптографии.Получить(Контекст.Алгоритм);
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Контекст.ОбработчикРезультата, Результат);
	
КонецПроцедуры

#КонецОбласти

#Область СоздатьМенеджерыКриптографии

&НаКлиенте
Процедура СоздатьМенеджерыКриптографии(ОбработчикРезультата, Алгоритм = Неопределено)
	
	// Получаем асинхронно
	Контекст = Новый Структура;
	Контекст.Вставить("Алгоритм", Алгоритм);
	Контекст.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	
	// Инициализируем параметры перед началом работы
	ПрограммыКриптографии = ПрограммыКриптографии();
	Контекст.Вставить("ПрограммыКриптографии", ПрограммыКриптографии);
	Контекст.Вставить("КоличествоПрограммКриптографии", ПрограммыКриптографии.Количество());
	Контекст.Вставить("ТекущийИндексПрограммыКриптографии", -1);
	Контекст.Вставить("Менеджеры", Новый Массив);
	Контекст.Вставить("Менеджер", Неопределено);
	Контекст.Вставить("МенеджерКриптографии", Неопределено);
	МенеджерыКриптографии = Неопределено; // Глобальная переменная этого модуля!!!
	
	ОбработчикСледующегоШага = Новый ОписаниеОповещения("СоздатьМенеджерыКриптографииНачатьСоздание", ЭтотОбъект, Контекст);
	#Если ВебКлиент Тогда
		ПодключитьРасширениеРаботыСКриптографиейНаВебКлиенте(ОбработчикСледующегоШага);
	#Иначе
		ВыполнитьОбработкуОповещения(ОбработчикСледующегоШага, Истина);
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьМенеджерыКриптографииНачатьСоздание(УдалосьПодключитьРасширениеРаботыСКриптографией, Контекст) Экспорт
	
	Если НЕ УдалосьПодключитьРасширениеРаботыСКриптографией Тогда // Если не удалось подключить расширение (для веб-клиента, для остальных всегда должно быть Истина) -> заканчиваем
		ВыполнитьОбработкуОповещения(Контекст.ОбработчикРезультата, Неопределено); // Ошибка
		Возврат;
	КонецЕсли;
	
	СоздатьМенеджерыКриптографииЦиклНачало(Контекст);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьМенеджерыКриптографииЦиклНачало(Контекст)
	
	Контекст.ТекущийИндексПрограммыКриптографии = Контекст.ТекущийИндексПрограммыКриптографии + 1;
	Если Контекст.ТекущийИндексПрограммыКриптографии < Контекст.КоличествоПрограммКриптографии Тогда
		
		СвойстваПрограммы = Контекст.ПрограммыКриптографии[Контекст.ТекущийИндексПрограммыКриптографии];
		СредстваКриптографии.НачатьПолучениеИнформацииМодуляКриптографии(
			Новый ОписаниеОповещения(
				"СоздатьМенеджерыКриптографииПослеПолученияИнформацииМодуляКриптографии", ЭтотОбъект, Контекст,
				"СоздатьМенеджерыКриптографииПослеОшибкиПолученияИнформацииМодуляКриптографии", ЭтотОбъект),
			СвойстваПрограммы.ИмяПрограммы, СвойстваПрограммы.ПутьКПрограмме, СвойстваПрограммы.ТипПрограммы);
		
	Иначе
		СоздатьМенеджерыКриптографииЗавершение(Контекст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьМенеджерыКриптографииПослеОшибкиПолученияИнформацииМодуляКриптографии(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	СоздатьМенеджерыКриптографииЦиклНачало(Контекст);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьМенеджерыКриптографииПослеПолученияИнформацииМодуляКриптографии(ИнформацияМодуля, Контекст) Экспорт
	
	Если ИнформацияМодуля <> Неопределено Тогда
		СоздатьМенеджерыКриптографииНачатьИнициализацию(Контекст);
	Иначе
		СоздатьМенеджерыКриптографииЦиклНачало(Контекст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьМенеджерыКриптографииНачатьИнициализацию(Контекст)
	
	СвойстваПрограммы = Контекст.ПрограммыКриптографии[Контекст.ТекущийИндексПрограммыКриптографии];
	
    Криптография = Новый МенеджерКриптографии;
    Криптография.НачатьИнициализацию(
        Новый ОписаниеОповещения(
            "СоздатьМенеджерыКриптографииПослеИнициализацииМенеджераКриптографии", ЭтотОбъект, Контекст,
            "СоздатьМенеджерыКриптографииПослеОшибкиИнициализацииМенеджераКриптографии", ЭтотОбъект),
		СвойстваПрограммы.ИмяПрограммы, СвойстваПрограммы.ПутьКПрограмме, СвойстваПрограммы.ТипПрограммы,
		ИспользованиеИнтерактивногоРежимаКриптографии.НеИспользовать);
		
КонецПроцедуры

&НаКлиенте
Процедура СоздатьМенеджерыКриптографииПослеОшибкиИнициализацииМенеджераКриптографии(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	СоздатьМенеджерыКриптографииЦиклНачало(Контекст);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьМенеджерыКриптографииПослеИнициализацииМенеджераКриптографии(МенеджерКриптографии, Контекст) Экспорт
	
	ВсеХорошо = Истина;
	Контекст.Менеджер = МенеджерКриптографии;
	
	Если Контекст.Алгоритм <> Неопределено Тогда
		Если Контекст.Менеджер.АлгоритмПодписи <> Контекст.Алгоритм Тогда
			ВсеХорошо = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ВсеХорошо Тогда
    	Контекст.Менеджеры.Добавить(Контекст.Менеджер);
	КонецЕсли;
	
	СоздатьМенеджерыКриптографииЦиклНачало(Контекст);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьМенеджерыКриптографииЗавершение(Контекст)
	
	ВыполнитьОбработкуОповещения(Контекст.ОбработчикРезультата, Контекст.Менеджеры);
	
КонецПроцедуры

#КонецОбласти

#Область ПодключитьРасширениеРаботыСКриптографиейНаВебКлиенте

&НаКлиенте
Процедура ПодключитьРасширениеРаботыСКриптографиейНаВебКлиенте(ОбработчикРезультата) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("УстановитьРасширенияРаботыСКриптографиейЕслиНеПодключено", Истина);
	Контекст.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	
	Если МенеджерыКриптографии = Неопределено Тогда
		ПодключитьРасширениеРаботыСКриптографиейНаВебКлиентеНачатьПодключение(Контекст);
	Иначе
		ВыполнитьОбработкуОповещения(ОбработчикРезультата, Истина);
	КонецЕсли;
	
КонецПроцедуры  

&НаКлиенте 
Процедура ПодключитьРасширениеРаботыСКриптографиейНаВебКлиентеНачатьПодключение(Контекст) Экспорт
	
    НачатьПодключениеРасширенияРаботыСКриптографией(
        Новый ОписаниеОповещения("ПодключитьРасширениеРаботыСКриптографиейНаВебКлиентеПослеПодключенияРасширения", ЭтотОбъект, Контекст));
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьРасширениеРаботыСКриптографиейНаВебКлиентеПослеПодключенияРасширения(Подключено, Контекст) Экспорт
	
	Если Подключено Тогда
		
		//Сообщить("Расширение работы с криптографией подключено.");
		ВыполнитьОбработкуОповещения(Контекст.ОбработчикРезультата, Истина);
		
	ИначеЕсли Контекст.УстановитьРасширенияРаботыСКриптографиейЕслиНеПодключено Тогда
		
		//Сообщить("Начали установку расширения работы с криптографией.");
		Контекст.УстановитьРасширенияРаботыСКриптографиейЕслиНеПодключено = Ложь;
        НачатьУстановкуРасширенияРаботыСКриптографией(
            Новый ОписаниеОповещения("ПодключитьРасширениеРаботыСКриптографиейНаВебКлиентеНачатьПодключение", ЭтотОбъект, Контекст));
		
	Иначе
		
		//Сообщить("Не удалось установить или подключить расширение работы с криптографией!");
		ВыполнитьОбработкуОповещения(Контекст.ОбработчикРезультата, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПолучитьХранилищеСертификатов

&НаКлиенте
Процедура ПолучитьХранилищеСертификатов(ОбработчикРезультата, МенеджерКриптографии)
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	
	МенеджерКриптографии.НачатьПолучениеХранилищаСертификатов(
		Новый ОписаниеОповещения("ПолучитьХранилищеСертификатовЗавершение", ЭтотОбъект, Контекст),,);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьХранилищеСертификатовЗавершение(Хранилище, Контекст) Экспорт
	
	ВыполнитьОбработкуОповещения(Контекст.ОбработчикРезультата, Хранилище);
	
КонецПроцедуры

#КонецОбласти

#Область НайтиСертификатПоОтпечатку

&НаКлиенте
Процедура НайтиСертификатПоОтпечатку(ОбработчикРезультата, ХранилищеСертификатовКриптографии, Отпечаток)
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	
	ХранилищеСертификатовКриптографии.НачатьПоискПоОтпечатку(
		Новый ОписаниеОповещения("НайтиСертификатПоОтпечаткуЗавершение", ЭтотОбъект, Контекст),
		Отпечаток);
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиСертификатПоОтпечаткуЗавершение(Сертификат, Контекст) Экспорт
	
	ВыполнитьОбработкуОповещения(Контекст.ОбработчикРезультата, Сертификат);
	
КонецПроцедуры

#КонецОбласти

#Область ПолучитьВсеСертификаты

&НаКлиенте
Процедура ПолучитьВсеСертификаты(ОбработчикРезультата, ХранилищеСертификатовКриптографии)
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	
	ХранилищеСертификатовКриптографии.НачатьПолучениеВсех(
		Новый ОписаниеОповещения("ПолучитьВсеСертификатыЗавершение", ЭтотОбъект, Контекст));
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВсеСертификатыЗавершение(Сертификаты, Контекст) Экспорт
	
	ВыполнитьОбработкуОповещения(Контекст.ОбработчикРезультата, Сертификаты);
	
КонецПроцедуры

#КонецОбласти

#Область Подписать

&НаКлиенте
Процедура Подписать(ОбработчикРезультата, Сертификат, Вложения) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("Сертификат", Сертификат);
	Контекст.Вставить("Вложения", Вложения);
	Контекст.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	
	ОбработчикРезультата = Новый ОписаниеОповещения("ПодписатьПослеПоискаМенеджеровКриптографии", ЭтотОбъект, Контекст);
	НайтиМенеджерКриптографии(ОбработчикРезультата, Сертификат.Алгоритм);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьПослеПоискаМенеджеровКриптографии(МенеджерКриптографии, Контекст) Экспорт
	
	Если МенеджерКриптографии = Неопределено Тогда
		ВыполнитьОбработкуОповещения(Контекст.ОбработчикРезультата, Неопределено); // Ошибка
		Возврат;
	КонецЕсли;
	
	Контекст.Вставить("МенеджерКриптографии", МенеджерКриптографии);
	
	ОбработчикРезультата = Новый ОписаниеОповещения("ПодписатьПослеПолученияХранилищаСертификатов", ЭтотОбъект, Контекст);
	ПолучитьХранилищеСертификатов(ОбработчикРезультата, МенеджерКриптографии);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьПослеПолученияХранилищаСертификатов(ХранилищеСертификатовКриптографии, Контекст) Экспорт
	
	Если ХранилищеСертификатовКриптографии = Неопределено Тогда
		ВыполнитьОбработкуОповещения(Контекст.ОбработчикРезультата, Неопределено); // Ошибка
		Возврат;
	КонецЕсли;
	
	Контекст.Вставить("ХранилищеСертификатовКриптографии", ХранилищеСертификатовКриптографии);
	
	ОбработчикРезультата = Новый ОписаниеОповещения("ПодписатьПослеПоискаСертификатаПоОтпечатку", ЭтотОбъект, Контекст);
	НайтиСертификатПоОтпечатку(ОбработчикРезультата, ХранилищеСертификатовКриптографии, Контекст.Сертификат.Отпечаток);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьПослеПоискаСертификатаПоОтпечатку(НайденныйСертификат, Контекст) Экспорт
	
	Если НайденныйСертификат = Неопределено Тогда
		ВыполнитьОбработкуОповещения(Контекст.ОбработчикРезультата, Неопределено); // Ошибка
		Возврат;
	КонецЕсли;
	
	Результат = Новый Соответствие();
	
	Контекст.Вставить("Результат", Результат);
	Контекст.Вставить("ТекИндекс", -1);
	Контекст.Вставить("Количество", Контекст.Вложения.Количество());
	Контекст.Вставить("НайденныйСертификат", НайденныйСертификат);
	
	ПодписатьЦиклНачало(Контекст);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьЦиклНачало(Контекст)
	
	Контекст.ТекИндекс = Контекст.ТекИндекс + 1;
	Если Контекст.ТекИндекс < Контекст.Количество Тогда
		ПодписатьНачатьПодписаниеСертификатом(Контекст);
	Иначе
		ПодписатьЗавершение(Контекст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьНачатьПодписаниеСертификатом(Контекст) Экспорт
	
	Вложение = Контекст.Вложения[Контекст.ТекИндекс];
	
	ОбработчикРезультата = Новый ОписаниеОповещения("ПодписатьПослеПодписанияСертификатом", ЭтотОбъект, Контекст);
	ПодписатьСертификатом(ОбработчикРезультата,
		Контекст.МенеджерКриптографии, Base64Значение(Вложение["Файл"]["ДвоичныеДанные"]), Контекст.НайденныйСертификат);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьПослеПодписанияСертификатом(ПодписанныеДанные, Контекст) Экспорт
	
	// Обработка ошибки
	Если ТипЗнч(ПодписанныеДанные) = Тип("Структура")
		И ПодписанныеДанные.Свойство("БылаОшибка") = Истина
		И ПодписанныеДанные.БылаОшибка = Истина Тогда
		
		ВыполнитьОбработкуОповещения(Контекст.ОбработчикРезультата, ПодписанныеДанные); // Ошибка
		Возврат;
	КонецЕсли;
	
	Вложение = Контекст.Вложения[Контекст.ТекИндекс];
	Контекст.Результат.Вставить(Вложение["Идентификатор"],
		СтрЗаменить(СтрЗаменить(Base64Строка(ПодписанныеДанные),Символы.ПС,""),Символы.ВК,""));
	
	ПодписатьЦиклНачало(Контекст);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьЗавершение(Контекст)
	
	ВыполнитьОбработкуОповещения(Контекст.ОбработчикРезультата, Контекст.Результат);
	
КонецПроцедуры

#КонецОбласти

#Область ПодписатьСертификатом

&НаКлиенте
Процедура ПодписатьСертификатом(ОбработчикРезультата, МенеджерКриптографии, ИсходныеДанные, Сертификат)
	
	Контекст = Новый Структура;
	Контекст.Вставить("БылаОшибка", Ложь);
	Контекст.Вставить("ИнформацияОбОшибке", Неопределено);
	Контекст.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	
	МенеджерКриптографии.НачатьПодписывание(
		Новый ОписаниеОповещения(
			"ПодписатьСертификатомЗавершение", ЭтотОбъект, Контекст,
			"ПодписатьСертификатомПослеОшибкиПодписания", ЭтотОбъект),
		ИсходныеДанные, Сертификат);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьСертификатомПослеОшибкиПодписания(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Контекст.БылаОшибка = Истина;
	Контекст.ИнформацияОбОшибке = ИнформацияОбОшибке;
	ВыполнитьОбработкуОповещения(Контекст.ОбработчикРезультата, Контекст);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьСертификатомЗавершение(ПодписанныеДанные, Контекст) Экспорт
	
	ВыполнитьОбработкуОповещения(Контекст.ОбработчикРезультата, ПодписанныеДанные);
	
КонецПроцедуры

#КонецОбласти


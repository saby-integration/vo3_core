#Область Переменные
//Список доступных команд для объекта
Перем МодульОбъекта, context_params;

&НаКлиенте
Перем context_params;
&НаКлиенте
Перем МенеджерыКриптографии;

#КонецОбласти

#Область МетодыФормы

&НаКлиенте
Процедура ДобавитьИсполнителя(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора",Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор",Истина); ///Если хотим несколько значений
	ОбработкаВыбора = Новый ОписаниеОповещения("ПриЗакрытииФормыВыбораСотрудника", ЭтаФорма,"ПодборРеализации");
	ОткрытьФорму("Справочник.Сотрудники.ФормаВыбора",ПараметрыФормы,
	        ЭтаФорма, , , , ОбработкаВыбора);
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	МодульОбъекта = ПолучитьМодульОбъекта();
	
	СписокДокументовСБИС = Неопределено;
	СписокДействий       = Неопределено;
	ПараметрыВызова      = Неопределено;
	ТипТекущегоОбъекта1С = Неопределено;
	
	Если Параметры.Свойство("СписокДокументовСБИС", СписокДокументовСБИС) 
		И СписокДокументовСБИС.Количество() > 0 Тогда
		
		ПараметрыВызова = Новый Структура("Документы, Действие, _print_forms", СписокДокументовСБИС,,Новый Массив()); 
		СписокДействий = ПолучитьСписокДействийСБИС(СписокДокументовСБИС[0]);	
		
	//Иначе
		// todo добавить закрытие формы с сообщение пользователю
	КонецЕсли;

    // Видимость элементов
	Элементы.ГруппаПереотправка.Видимость = Параметры.МожноПереотправитьВСБИС;    
		
	Если СписокДействий <> Неопределено Тогда
		ДобавитьДействияНаФорму(СписокДействий);
		СписокДействийКоличество = СписокДействий.Количество();
	КонецЕсли;
	
	ВложенияТекущегоТипаОбъекта1С.Очистить();
	ВложенияПоТипамОбъектов1С.Очистить();
	
	Документ1С = get_prop(ПараметрыВызова["Документы"][0],"Документ1С");
	
	Если Документ1С <> Неопределено Тогда
		МетаданныеОбъекта    = Документ1С.Метаданные();
		ТипТекущегоОбъекта1С = МетаданныеОбъекта.Имя;
		ПолучитьСписокПечатныхФормОбъекта1С(МетаданныеОбъекта, ВложенияПоТипамОбъектов1С);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// нет доступных действий
	Если Не ЗначениеЗаполнено(СписокДействийКоличество)
		И Не Элементы.ГруппаПереотправка.Видимость Тогда
		
		КартинкаСообщения = БиблиотекаКартинок["Ошибка32"];
				
		ПоказатьОповещениеПользователя(
			"Нет доступных действий",
			,
			"",
			КартинкаСообщения,
			СтатусОповещенияПользователя.Важное,
			Новый УникальныйИдентификатор);
			
		Отказ = Истина;
		Возврат;
			
	КонецЕсли;	
		
	Если context_params = Неопределено Тогда
		context_params	= Saby_Core.ПроверитьНаличиеПараметровПодключения();
	КонецЕсли;
	ЗаполнитьВложенияТекущегоТипаОбъекта();
	
	//Вызов с клиента, тк всё храниться в переменных формы
	ПрочитатьВыборПФДляВидаДокумента(ТипТекущегоОбъекта1С, "Действие");
	//ЗаполнитьКоментарииДокументовКОтправке();
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокДействийСБИС(Документ)
	СписокДействий = ПолучитьСписокДействийИзОбъектаДокументСБИС(Документ);
	Если СписокДействий = Неопределено Тогда
		Если context_params = Неопределено Тогда
			Параметры.Свойство("context_params", context_params);
			Если context_params = Неопределено Тогда
				context_params	= МодульОбъекта.ПроверитьНаличиеПараметровПодключения();
			КонецЕсли;
		КонецЕсли;
		ДокументСБИС = МодульОбъекта.local_helper_read_document(context_params, Документ); 
		СписокДействий = ПолучитьСписокДействийИзОбъектаДокументСБИС(ДокументСБИС);
	КонецЕсли;
	Возврат СписокДействий;
КонецФункции

&НаСервере
Процедура ДобавитьДействияНаФорму(СписокДействий)
	
	Если СписокДействий = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыДействий			= Новый Структура();
	ГруппаДействийДокумента   	= Элементы.Найти("ГруппаДействийДокумента");
	ГруппаПереотправка        	= Элементы.Найти("ГруппаПереотправка");
	ЭлементРазделитель			= Элементы.Найти("Разделитель");
	
	ДействиеПоУмолчанию       = Неопределено;
	ТребуетсяВыборИсполнителя = Ложь;
	
	СчётКоманд	= 0;
	Для Каждого Действие Из СписокДействий Цикл
		СчётКоманд	= СчётКоманд + 1;
		ИмяДействия = "Действие_" + Формат(СчётКоманд, "ЧГ=0");
		ПараметрыДействий.Вставить(ИмяДействия, Действие);

		НоваяКоманда          = ЭтаФорма.Команды.Добавить(ИмяДействия);
		НоваяКоманда.Действие = "КомандаВыполнитьДействие";
		
		Если ГруппаПереотправка.Видимость Тогда 
			КнопкаДействие = Элементы.Вставить("Кнопка_" + ИмяДействия, Тип("КнопкаФормы"), ГруппаПереотправка, ЭлементРазделитель); 
		Иначе 
			КнопкаДействие = Элементы.Вставить("Кнопка_" + ИмяДействия, Тип("КнопкаФормы"), ГруппаДействийДокумента);
		КонецЕсли;
			
		КнопкаДействие.Заголовок  = Действие["Название"]; ;
		КнопкаДействие.ИмяКоманды = НоваяКоманда.Имя;
		
		КнопкаДействие.Отображение = ОтображениеКнопки.КартинкаИТекст;
		Если ДействиеПоУмолчанию = Неопределено Тогда
			КнопкаДействие.КнопкаПоУмолчанию = Истина;
			ДействиеПоУмолчанию = ИмяДействия;
		КонецЕсли;
		
		Если ВРег(Действие["ТребуетПодписания"]) = "ДА" Тогда
			КнопкаДействие.Картинка	= БиблиотекаКартинок["Saby_SignBlue"];
		КонецЕсли;
		
		Если ВРег(Действие["ТребуетИсполнителя"]) = "ДА" Тогда
			ТребуетсяВыборИсполнителя = Истина;	
		КонецЕсли;

		КнопкаДействие.РастягиватьПоГоризонтали	= Истина; 
		
	КонецЦикла;  
	
	Если Не ТребуетсяВыборИсполнителя Тогда
		Элементы.EmployeeCmd.Видимость = Ложь;
		Элементы.СписокИсполнителей.Видимость = Ложь;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокДействийИзОбъектаДокументСБИС(Документ)
	Попытка
		Возврат Документ["Этап"][0]["Действие"];
	Исключение
		Возврат Неопределено;
	КонецПопытки
КонецФункции

&НаКлиенте
Процедура ПереотправитьДокумент(Команда)
	//TODO обновить списко после зартытия - ЗагрузкаПечатныхФормДокументов
	//ДопПараметры = Новый Структура("ПараметрКоманды", ПараметрКоманды);
	//ОповешениеОЗакрытии = Новый ОписаниеОповещения("ПослеОтправитьВСБИС", Saby_КомандыОбменаДляФормыКлиент, ДопПараметры);
		
	ДокументПереотправить = Новый Массив;
	Для Каждого ДокументДляДействия Из ПараметрыВызова["Документы"] Цикл
		Если ДокументДляДействия["Документ1С"] <> Неопределено Тогда
			ДокументПереотправить.Добавить(СтруктураВыгрузкиДокумента(ДокументДляДействия["Документ1С"]));
		КонецЕсли;
	КонецЦикла;
	ПараметрыВФорму = Новый Структура("Источник", ДокументПереотправить);
	ОткрытьФорму("Обработка.SABY.Форма.ЗагрузкаПечатныхФормДокументов",ПараметрыВФорму,ЭтаФорма.ВладелецФормы, Новый УникальныйИдентификатор(),,,,);
	Закрыть();
КонецПроцедуры

&НаСервере
Функция СтруктураВыгрузкиДокумента(Документ1С)
	Возврат Новый Структура("Ссылка,UID,ТипМетаданных,ТипОбъекта,ИмяИни", 
							Документ1С.Ссылка,
							Неопределено,
							Документ1С.Ссылка.Метаданные().Имя,
							Неопределено,
							Неопределено); 	
КонецФункции	

#КонецОбласти

#Область include_core_src_Helpers_ОпределениеТиповКонтента
#КонецОбласти

#Область РасчётINI

&НаСервере
Функция Saby_Команда_ВыполнитьINI(ТранспортБлокли, ПараметрыМетода, ДополнительныеПараметры )
	context_params	= get_prop(ПараметрыМетода, "context_params");
	ini_name 		= get_prop(ПараметрыМетода, "ini_name", "");
	ДанныеОбъекта	= get_prop(ПараметрыМетода, "ДанныеОбъекта");
	Результат = Неопределено;
	Если context_params = Неопределено Тогда
		context_params	= Saby_Core.ПроверитьНаличиеПараметровПодключения();
	КонецЕсли;
	
	ПараметрыВызоваБлокли	= Новый Соответствие();
	ПараметрыВызоваБлокли.Вставить("params", context_params );
	ПараметрыВызоваБлокли.Вставить("commands_result", get_prop(ДополнительныеПараметры, "commands_result", Новый Массив));
	ПараметрыВызоваБлокли.Вставить("step", get_prop(ДополнительныеПараметры, "step", Неопределено));
	ПараметрыВызоваБлокли.Вставить("endpoint","");
	ПараметрыВызоваБлокли.Вставить("operation_uuid", СокрЛП(Новый УникальныйИдентификатор));
	ПараметрыВызоваБлокли.Вставить("ini_name",ini_name);
	ConnectionId	= Неопределено;
	context_params.Свойство("ConnectionId", ConnectionId);
	ПараметрыВызоваБлокли.Вставить("connection_uuid", ConnectionId);
	ПараметрыВызоваБлокли.Вставить("object",Новый Соответствие());
	Если ini_name	= "Документы_execute" Тогда
		action_ref		= Новый Структура;
		КомандаСБИС		= ДополнительныеПараметры["Название"];
		Документ		= ПараметрыВызова["Документы"][0]["Документ1С"];
		ТипОбъекта		= ?(ВложенияПоТипамОбъектов1С.Количество() > 0,ВложенияПоТипамОбъектов1С[0]["ТипОбъекта"], Неопределено);
		
		МодульОбработки = ПолучитьМодульОбъекта();
		ВыбранныеПечатныеФормы = МодульОбработки.ЗаполнитьСтруктуруПечатныхФормДляПередачи(ВложенияПоТипамОбъектов1С);
		Если Документ = Неопределено Тогда
			
			action_ref.Вставить("ИдИС", "");
			action_ref.Вставить("ТипИС", "");
			action_ref.Вставить("ИмяИС", "");
			action_ref.Вставить("ini_name", "");
			action_ref.Вставить("Название", СокрЛП(Документ));
			action_ref.Вставить("_print_forms", Неопределено);
			
		Иначе
			
			ТипМетаданных = ПолучитьТипМетаданных(Документ);
			action_ref.Вставить("ИдИС", СокрЛП(Документ.УникальныйИдентификатор()) );
			action_ref.Вставить("ТипИС", ТипМетаданных);
			action_ref.Вставить("ИмяИС", ТипОбъекта);
			action_ref.Вставить("ini_name", "СинхВыгрузка_"+ТипОбъекта);
			action_ref.Вставить("Название", СокрЛП(Документ) );
			
		КонецЕсли;		
		Если ТипОбъекта <> Неопределено Тогда
			Если ПустаяСтрока(ТипОбъекта) Тогда
				ТипОбъекта = "БезОбъекта";
			КонецЕсли;
			action_ref.Вставить("_print_forms", 
				?(ВыбранныеПечатныеФормы.Свойство(ТипОбъекта),ВыбранныеПечатныеФормы[ТипОбъекта],Новый Массив));
		КонецЕсли;
		
		ПараметрыВызоваБлокли.Вставить("Документы", ПараметрыВызова.Документы );
		ПараметрыВызоваБлокли.Вставить("Действие", ПараметрыВызова.Действие );
		ПараметрыВызоваБлокли.Вставить("Формы", get_prop(action_ref,"_print_forms", Новый Массив) );
		
	КонецЕсли;	
	
	Результат = ТранспортБлокли.API_BLOCKLY_RUN(ПараметрыВызоваБлокли);
	
	Если get_prop(Результат["data"],"ОбъектовСОшибками", 0) > 0 Тогда
		Результат.status = "error";
		Результат["data"].Вставить("message", "Не удалось выполнить действие. Возникла ошибка");
	КонецЕсли;
	
	Возврат Результат;
КонецФункции



#КонецОбласти

#Область ДействияОбъекта

#Область КомандаВыполнитьДействие

//Одна процедура для всех команд
&НаКлиенте
Процедура КомандаВыполнитьДействие(Команда)
	
	ИмяДействия	= Команда.Имя;
	ПараметрыДействия	= ПараметрыДействий[ИмяДействия];
	НазваниеДействия = ПараметрыДействия["Название"];
	Элементы.Комментарий.ОтметкаНезаполненного = Ложь;
	Элементы.СписокИсполнителей.ОтметкаНезаполненного = Ложь;
	Действие = Новый Структура("Название, Комментарий, Исполнители", НазваниеДействия, Комментарий, Новый Массив);
	
	Если ВРег(ПараметрыДействия["ТребуетКомментария"]) = "ДА" Тогда
		Если Не ЗначениеЗаполнено(Комментарий) Тогда
			Элементы.Комментарий.ОтметкаНезаполненного = Истина;
		КонецЕсли;
	КонецЕсли;

	Если ВРег(ПараметрыДействия["ТребуетИсполнителя"]) = "ДА" Тогда
		Если СписокИсполнителей.Количество() = 0 Тогда 			
			Элементы.СписокИсполнителей.ОтметкаНезаполненного = Истина;
		Иначе
			мИсполнителей = Новый Массив;
			Для Каждого ВыбранныйСотрудник Из СписокИсполнителей Цикл
				Если Не ВыбранныйСотрудник.Сотрудник.Пустая() Тогда
					мИсполнителей.Добавить(СокрЛП(ВыбранныйСотрудник.Сотрудник));
				КонецЕсли;
			КонецЦикла;
			Если мИсполнителей .Количество() = 0 Тогда
				Элементы.Комментарий.ОтметкаНезаполненного = Истина;
			Иначе
				Действие.Вставить("Исполнители", мИсполнителей);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если Элементы.Комментарий.ОтметкаНезаполненного
		Или Элементы.СписокИсполнителей.ОтметкаНезаполненного Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВызова["Действие"] = ПараметрыДействия;
	ПараметрыВызова["Действие"]["Название"] = Действие["Название"];
	ПараметрыВызова["Действие"]["Комментарий"] = Действие["Комментарий"];
	ПараметрыВызова["Действие"]["Исполнители"] = Действие["Исполнители"];
	
	Контекст = Новый Структура;
	Контекст.Вставить("context_params", context_params);
	Контекст.Вставить("ПараметрыДействия", ПараметрыДействия);
	ОбработчикРезультата = Новый ОписаниеОповещения(
		"КомандаВыполнитьДействиеПослеОбновленияКэшаЛокальныхСертификатов", ЭтотОбъект, Контекст);
	
	ОбновитьКэшЛокальныхСертификатов(ОбработчикРезультата);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыполнитьДействиеПослеОбновленияКэшаЛокальныхСертификатов(РезультатОбновленияКеша, Контекст) Экспорт
	
	Результат = ВыполнитьДействиеНаСервере("Документы_execute", Контекст.context_params, Контекст.ПараметрыДействия);
	
	ОбработчикРезультата = Новый ОписаниеОповещения("КомандаВыполнитьДействиеЗавершение", ЭтотОбъект, Контекст);
	ПоказатьРезультатВыполнения(ОбработчикРезультата, Результат, Контекст.context_params, Контекст.ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыполнитьДействиеЗавершение(Результат, Контекст) экспорт
	
	ЭтаФорма.Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область ПоказатьРезультатВыполнения

&НаКлиенте
Процедура ПоказатьРезультатВыполнения(ОбработчикРезультата, Результат, context_params, ПараметрыДействия)
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Если Результат.status = "complete" Тогда
			ЗаголовокСообщения = "Фаза """ + ПараметрыДействия["Название"] + """";
			message = "выполнена успешно";
			КартинкаСообщения = БиблиотекаКартинок["Успешно32"];
		ИначеЕсли Результат.status = "run" Тогда
			// Выполняем команду через оповещение
			Контекст = Новый Структура;
			Контекст.Вставить("Результат", Результат);
			Контекст.Вставить("context_params", context_params);
			Контекст.Вставить("ПараметрыДействия", ПараметрыДействия);
			Контекст.Вставить("ОбработчикРезультата", ОбработчикРезультата);
			
			ОбработчикСледующегоШага = Новый ОписаниеОповещения("ПерезапуститьВыполнениеНаСервереПослеВыполненияКомандыНаКлиенте", ЭтотОбъект, Контекст);
			ВыполнитьКоманды_Клиент(ОбработчикСледующегоШага, Результат.commands, Результат.commands_data);
			Возврат;
		ИначеЕсли Результат.status = "error" Тогда
			ЗаголовокСообщения = "Ошибка при выполнении "+ПараметрыДействия["Название"];
			КартинкаСообщения = БиблиотекаКартинок["Ошибка32"];
			Если Результат["data"] <> Неопределено Тогда
				message = Результат.data["message"];
				detail = Результат.data["detail"];
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Оповестить("Saby_ЗавершениеВыполнитьДействие", Результат, ЭтаФорма.ВладелецФормы);
	
	ПоказатьОповещениеПользователя(
		ЗаголовокСообщения,
		,
		СокрЛП(message)+" "+СокрЛП(detail),
		КартинкаСообщения,
		СтатусОповещенияПользователя.Важное,
		Новый УникальныйИдентификатор);
		
	ВыполнитьОбработкуОповещения(ОбработчикРезультата);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезапуститьВыполнениеНаСервереПослеВыполненияКомандыНаКлиенте(commands_result, Контекст) Экспорт
	
	Контекст.ПараметрыДействия.Вставить("commands_result", commands_result);
	Контекст.ПараметрыДействия.Вставить("step", Контекст.Результат.step);
	
	Контекст.Результат = ВыполнитьДействиеНаСервере("Документы_execute", Контекст.context_params, Контекст.ПараметрыДействия);
	
    ПоказатьРезультатВыполнения(Контекст.ОбработчикРезультата, Контекст.Результат, Контекст.context_params, Контекст.ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция ВыполнитьДействиеНаСервере(ini_name, context_params, ДополнительныеПараметры)
	ОбработкаСБИС	= Обработки.SABY.Создать();
	ПараметрыМетода = Новый Структура("ДанныеОбъекта, ini_name, context_params", "", ini_name, context_params ); 
	
	Результат = Saby_Команда_ВыполнитьINI(ОбработкаСБИС, ПараметрыМетода, ДополнительныеПараметры );
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область ПечатныеФормы
&НаСервере
Процедура ПолучитьСписокПечатныхФормОбъекта1С(МетаданныеОбъекта, ВложенияПоТипамОбъекта1С)
	ТипОбъекта = МетаданныеОбъекта.Имя; 
	Попытка
		КомандыПечатиФормыВр	= УправлениеПечатью.КомандыПечатиОбъекта(МетаданныеОбъекта);
	Исключение
		//У объекта в менеджере объекта отсутствует процедура - ДобавитьКомандыПечати 
		Возврат;
	КонецПопытки;
	ДобавленныеПФ = Новый Соответствие();
	//Общие ПФ формы
	ИспКомандыПФ = КомандыПечатиФормыВр.НайтиСтроки( Новый Структура("Отключена, СкрытаФункциональнымиОпциями, СписокФорм", Ложь, Ложь, "" ) );
	Для Каждого КомандаПечати Из ИспКомандыПФ Цикл
		//Отключим дублирование ПФ, используются при включении ФО - "Работа в росии"
		Если Найти(КомандаПечати.Обработчик, "КадровыйЭДОКлиент") > 0 Тогда Продолжить; КонецЕсли;
		Если ДобавленныеПФ[КомандаПечати.Представление] <> Неопределено Тогда Продолжить; КонецЕсли;
		ДобавленныеПФ.Вставить(КомандаПечати.Представление, Истина);
		
		КомандаП = Новый Структура("Обработчик, МенеджерПечати, Идентификатор, Представление, ПроверкаПроведенияПередПечатью, ПроверкаПроведенияПередПечатью, ФункциональныеОпции",);
		ЗаполнитьЗначенияСвойств(КомандаП, КомандаПечати);
		НоваяПФ					= ВложенияПоТипамОбъекта1С.Добавить();
		НоваяПФ.Представление	= КомандаПечати.Представление;
		НоваяПФ.ТипВложения     = "ПечатнаяФорма";
		НоваяПФ.ИндексКартинки	= 0;
		НоваяПФ.ТипОбъекта		= ТипОбъекта;
		НоваяПФ.ВидОбъекта		= ТипОбъекта;
		НоваяПФ.Команда			= КомандаП;
	КонецЦикла;
	
	//ПФ для списка ПФ формы //Может нужнгы ПФ для объекта???
	ИспКомандыПФ = КомандыПечатиФормыВр.НайтиСтроки( Новый Структура("Отключена, СкрытаФункциональнымиОпциями, СписокФорм", Ложь, Ложь, "ФормаСписка" ) );
	Для Каждого КомандаПечати Из ИспКомандыПФ Цикл
		//Отключим дублирование ПФ, используются при включении ФО - "Работа в росии"
		Если Найти(КомандаПечати.Обработчик, "КадровыйЭДОКлиент") > 0 Тогда Продолжить; КонецЕсли;
		Если ДобавленныеПФ[КомандаПечати.Представление] <> Неопределено Тогда Продолжить; КонецЕсли;
		ДобавленныеПФ.Вставить(КомандаПечати.Представление, Истина);
		
		КомандаП = Новый Структура("Обработчик, МенеджерПечати, Идентификатор, Представление, ПроверкаПроведенияПередПечатью, ПроверкаПроведенияПередПечатью, ФункциональныеОпции",);
		ЗаполнитьЗначенияСвойств(КомандаП, КомандаПечати);
		НоваяПФ					= ВложенияПоТипамОбъекта1С.Добавить();
		НоваяПФ.Представление	= КомандаПечати.Представление;
		НоваяПФ.ТипВложения     = "ПечатнаяФорма";
		НоваяПФ.ИндексКартинки	= 0;
		НоваяПФ.ТипОбъекта		= ТипОбъекта;
		НоваяПФ.ВидОбъекта		= ТипОбъекта;
		НоваяПФ.Команда			= КомандаП;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьСтруктуруПечатныхФормДляПередачи(ВложенияПоТипамДокументов) Экспорт 
	ВыбранныеПечатныеФормы = Новый Структура();
	Для каждого ПечатнаяФормаДокумента Из ВложенияПоТипамДокументов Цикл

		Если НЕ ВыбранныеПечатныеФормы.Свойство(ПечатнаяФормаДокумента.ТипОбъекта) Тогда
			ВыбранныеПечатныеФормы.Вставить(ПечатнаяФормаДокумента.ТипОбъекта, Новый Массив());
		КонецЕсли;
		Если ПечатнаяФормаДокумента.ТипВложения = "ПечатнаяФорма" И ПечатнаяФормаДокумента.ОтметкаВыбора Тогда
			//Печатная форма
			Вложение = Новый Структура("Название, Файл", ПечатнаяФормаДокумента.Представление, Новый Структура("ПечатнаяФормаДокумента", ПечатнаяФормаДокумента.Представление));
			ВыбранныеПечатныеФормы[ПечатнаяФормаДокумента.ТипОбъекта].Добавить(Вложение);
		ИначеЕсли ПечатнаяФормаДокумента.ТипВложения = "ФайлСДиска" И ПечатнаяФормаДокумента.ОтметкаВыбора Тогда
			//Прикреплённый файл
			ИмяФайла	= ПечатнаяФормаДокумента.Команда.ИмяФайла;
			ТипКонтента	= ПолучитьКонтентТипВложения(ИмяФайла);
			АдресВХранилище = get_prop(ПечатнаяФормаДокумента.Команда, "АдресВХранилище");
			ФайлBase64	= ПолучитьИзВременногоХранилища(АдресВХранилище);
			Вложение = Новый Структура("Название, Файл", ПечатнаяФормаДокумента.Представление, Новый Структура("Имя, ДвоичныеДанные, ContentType", ИмяФайла, ФайлBase64, ТипКонтента) );
			ВыбранныеПечатныеФормы[ПечатнаяФормаДокумента.ВидОбъекта].Добавить(Вложение);
		ИначеЕсли ПечатнаяФормаДокумента.ТипВложения = "ПрисоединенныйФайл" И ПечатнаяФормаДокумента.ОтметкаВыбора Тогда
			ДанныеФайла	= РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайла(ПечатнаяФормаДокумента.Команда.Ссылка,,Истина);
			ИмяФайла	= ДанныеФайла.ИмяФайла;
			ТипКонтента	= ПолучитьКонтентТипВложения(ИмяФайла);
			Вложение = Новый Структура("Название, Файл", ПечатнаяФормаДокумента.Представление, Новый Структура("Имя, ПрисоединенныйФайл, ContentType",ИмяФайла, Истина, ТипКонтента) );
			ВыбранныеПечатныеФормы[ПечатнаяФормаДокумента.ТипОбъекта].Добавить(Вложение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВыбранныеПечатныеФормы;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКлючНастроекВыбораПФ(ТипОбъекта, Действие)
	Возврат "ПФ_" + ТипОбъекта + "_" + Действие; 
КонецФункции

&НаСервере
Функция ПрочитатьВыборПФДляВидаДокумента( ТипОбъекта, Действие="Отправка" )
	МассивПечатныхФорм = ХранилищеОбщихНастроек.Загрузить("Saby", ПолучитьКлючНастроекВыбораПФ(ТипОбъекта, Действие) ,,);
	Если ТипЗнч(МассивПечатныхФорм) = Тип("Массив") Тогда
		Для Каждого ПФорма из МассивПечатныхФорм Цикл
			//Обновим общие данные
			мПФ	= ВложенияПоТипамОбъектов1С.НайтиСтроки( Новый Структура("Представление, ТипОбъекта", ПФорма, ТипОбъекта) );
			Для Каждого СтрокаВл Из мПФ Цикл
				СтрокаВл.ОтметкаВыбора = Истина;
			КонецЦикла;
			//Обновим данные на форме
			мПФ	= ВложенияТекущегоТипаОбъекта1С.НайтиСтроки( Новый Структура("Представление, ТипОбъекта", ПФорма, ТипОбъекта) );
			Для Каждого СтрокаВл Из мПФ Цикл
				СтрокаВл.ОтметкаВыбора = Истина;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
КонецФункции


&НаСервере
Процедура ЗаписатьВыборПФДляВидаДокумента( ТипОбъекта, Действие="Отправка")
	МассивПечатныхФорм	= Новый Массив();
	мВыбрПечатныхФорм = ВложенияТекущегоТипаОбъекта1С.НайтиСтроки( Новый Структура("ОтметкаВыбора, ТипОбъекта", Истина, ТипОбъекта) );
	Для Каждого ПФорма из мВыбрПечатныхФорм Цикл
		МассивПечатныхФорм.Добавить( ПФорма.Представление );
	КонецЦикла;
	
	//Обновим отметки в глобальной таблице ПечатныхФорм
	мВыбрПечатныхФорм = ВложенияТекущегоТипаОбъекта1С.НайтиСтроки( Новый Структура("ТипОбъекта", ТипОбъекта) );
	Для Каждого ПФорма из мВыбрПечатныхФорм Цикл
		мПФ	= ВложенияПоТипамОбъектов1С.НайтиСтроки( Новый Структура("Представление, ТипОбъекта", ПФорма.Представление, ТипОбъекта) );
		Для Каждого СтрокаВл Из мПФ Цикл
			СтрокаВл.ОтметкаВыбора = ПФорма.ОтметкаВыбора;
			Прервать;
		КонецЦикла;
	КонецЦикла;
	ХранилищеОбщихНастроек.Сохранить("Saby", ПолучитьКлючНастроекВыбораПФ(ТипОбъекта, Действие), МассивПечатныхФорм,,);      // todo переделать Saby - ПФ + Тип + Действие
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьВложенияТекущегоТипаОбъекта()
	ВложенияТекущегоТипаОбъекта1С.Очистить();
	Отбор = Новый Структура("ТипОбъекта", ТипТекущегоОбъекта1С);
	СтрокиПФ = ВложенияПоТипамОбъектов1С.НайтиСтроки(Отбор);
	Для Каждого СтрокаДокПФ Из СтрокиПФ Цикл
		ЗаполнитьЗначенияСвойств(ВложенияТекущегоТипаОбъекта1С.Добавить(), СтрокаДокПФ);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВложенийОтметкаПриИзменении(Элемент)
	ЗаписатьВыборПФДляВидаДокумента(ТипТекущегоОбъекта1С, "Действие");
КонецПроцедуры
#КонецОбласти

#Область ПрикрепляемыеФайлы

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИмяФайла(ПолноеИмяФайла)
	ТолькоПуть = ПолноеИмяФайла;
	Счетчик = СтрНайти(ПолноеИмяФайла, "\", НаправлениеПоиска.СКонца);
	Если Счетчик > 1 Тогда
		ТолькоПуть = Сред(ПолноеИмяФайла, Счетчик + 1);
	КонецЕсли;
	Возврат ТолькоПуть;
КонецФункции

&НаКлиенте
Процедура ВыборФайлаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы <> Неопределено Тогда
		Для Каждого ВыбранныйФайл Из ВыбранныеФайлы Цикл
			ТипОбъекта				= ТипТекущегоОбъекта1С;
			
			#Если ВебКлиент Тогда
				ИмяФайла				= ПолучитьИмяФайла(ВыбранныйФайл.Имя);
	        #Иначе
				ИмяФайла				= ПолучитьИмяФайла(ВыбранныйФайл.ПолноеИмя);
	        #КонецЕсли
			ТипФайла				= ПолучитьТипФайла(ИмяФайла);
			ИмяФайлаБезРаширения	= СтрЗаменить(ИмяФайла, "."+ТипФайла, "");
			
			НоваяПФ					= ВложенияПоТипамОбъектов1С.Добавить();
			НоваяПФ.ОтметкаВыбора	= Истина;
			НоваяПФ.Представление	= ИмяФайлаБезРаширения;
			НоваяПФ.ТипВложения     = "ФайлСДиска";
			НоваяПФ.ИндексКартинки	= 0;
			НоваяПФ.ТипОбъекта		= ТипОбъекта;
			НоваяПФ.ВидОбъекта		= ТипОбъекта;
			
			#Если ВебКлиент Тогда
				ФайлДД				= ПолучитьИзВременногоХранилища(ВыбранныйФайл.Хранение);
				ФайлBase64			= Base64Строка(ФайлДД);
				АдресВХранилище		= ПоместитьВоВременноеХранилище(ФайлBase64, Новый УникальныйИдентификатор);
	        #Иначе
				ФайлДД				= Новый ДвоичныеДанные(ВыбранныйФайл.ПолноеИмя);
				ФайлBase64			= Base64Строка(ФайлДД);
				АдресВХранилище		= ПоместитьВоВременноеХранилище(ФайлBase64, Новый УникальныйИдентификатор);
	        #КонецЕсли
			
			НоваяПФ.Команда			= Новый Структура("ИмяФайла, АдресВХранилище",ИмяФайла, АдресВХранилище);
			ЗаполнитьВложенияТекущегоТипаОбъекта();
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложениеСДиска(Команда)
	СтандартнаяОбработка = Ложь;
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Фильтр = НСтр("ru=’Любой файл (*.*)|*.*'");
	Диалог.Заголовок = НСтр("ru=’Выберите файл'");
	Диалог.МножественныйВыбор = Истина;
	ОбработкаОкончанияЗагрузки = Новый ОписаниеОповещения("ВыборФайлаЗавершение", ЭтаФорма, Диалог);
	НачатьПомещениеФайлов(ОбработкаОкончанияЗагрузки, , Диалог, Истина, УникальныйИдентификатор);
КонецПроцедуры

&НаСервере
Функция ПолучитьИмяПрисоединенногоФайла(СсылкаНаПрисоединенныйФайл) Экспорт
	Возврат СсылкаНаПрисоединенныйФайл.Наименование;
КонецФункции

&НаКлиенте
Процедура ОбработкаВыбораВложения(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ТипЗнч(ВыбранныеФайлы) = Тип("Массив") Тогда
		Для Каждого СсылкаНаПрисоединенныйФайл Из ВыбранныеФайлы Цикл
			ТипОбъекта				= ТипТекущегоОбъекта1С;
			НоваяПФ					= ВложенияПоТипамОбъектов1С.Добавить();
			НоваяПФ.ОтметкаВыбора	= Истина;
			НоваяПФ.Представление	= ПолучитьИмяПрисоединенногоФайла(СсылкаНаПрисоединенныйФайл);
			НоваяПФ.ТипВложения     = "ПрисоединенныйФайл";
			НоваяПФ.ИндексКартинки	= 0;
			НоваяПФ.ТипОбъекта		= ТипОбъекта;
			НоваяПФ.ВидОбъекта		= ТипОбъекта;
			НоваяПФ.Команда			= Новый Структура("Ссылка",СсылкаНаПрисоединенныйФайл);
			ЗаполнитьВложенияТекущегоТипаОбъекта();
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьФизЛицоСотрудника(Сотрудник)
	Возврат	Сотрудник.ФизическоеЛицо;
КонецФункции

&НаКлиенте
Процедура ДобавитьВложениеИзПрикреплёныхФайлов(Команда)
	
	СтандартнаяОбработка = Ложь;
	
	ВладелецФайла = ПараметрыВызова["Документы"][0]["Документ1С"];
	
	ЕстьСотрудники = ЕстьМетаданные("Справочники", "Сотрудники");
	Если ЕстьСотрудники И ТипЗнч(ВладелецФайла) = Тип("СправочникСсылка.Сотрудники") Тогда
		ВладелецФайла = ПолучитьФизЛицоСотрудника(ВладелецФайла);		
	КонецЕсли;
	
	Если ВладелецФайла = Неопределено Тогда
		//Владелеца нет.
		Возврат;
	КонецЕСли;
	// ???           
	
	ИмяДокумента      = ВРег(СокрЛП(ТипЗнч(ВладелецФайла)));   
	ФайлыИзРасширения = СтрНайти(ИмяДокумента, "SABY") > 0;
	
	Если ФайлыИзРасширения Тогда 
		ИмяФормыВыбораФайла = "Обработка.Saby_РаботаСФайлами.Форма.ПрисоединенныеФайлы";
	Иначе 
		ИмяФормыВыбораФайла = "Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы"; 
	КонецЕсли;
			
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВладелецФайла",      ВладелецФайла);
	ПараметрыФормы.Вставить("ТолькоПросмотр",     Истина);
	ПараметрыФормы.Вставить("РежимВыбора",        Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор", Истина);

	ОповещениеЗавершения = Новый ОписаниеОповещения("ОбработкаВыбораВложения", ЭтаФорма);
	ОткрытьФорму(ИмяФормыВыбораФайла,
         ПараметрыФормы,
         ЭтаФорма,
         Новый УникальныйИдентификатор,
         ,,
		 ОповещениеЗавершения,
		 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВложениеНаСервере(ИмяТаблицы, ТипОбъекта, ТипВложения, Представление)
	мСтрокКУдалению = ЭтотОбъект[ИмяТаблицы].НайтиСтроки(Новый Структура("ТипОбъекта, ТипВложения, Представление", ТипОбъекта, ТипВложения, Представление));
	Если мСтрокКУдалению.Количество() > 0 Тогда
		//удаляем обратным перебором, т.к. индекс строк меняется
		ВсегоСтрок = мСтрокКУдалению.Количество() - 1;
		Для СчетСтрок = 0 По ВсегоСтрок Цикл
			СтрокаКУдалению = мСтрокКУдалению[ВсегоСтрок-СчетСтрок];
			СтрокаКУдалению = ЭтаФорма[ИмяТаблицы].НайтиПоИдентификатору(СтрокаКУдалению.ПолучитьИдентификатор());
			ЭтаФорма[ИмяТаблицы].Удалить(СтрокаКУдалению);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры	

&НаКлиенте
Процедура УдалитьВложение(Команда)
	ДанныеСтроки = Элементы.ВложенияТипаДокумента.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено ИЛИ ДанныеСтроки.ТипВложения = "ПечатнаяФорма" Тогда
		Возврат;
	КонецЕсли;
	//Удаление из общей таблицы
	УдалитьВложениеНаСервере("ВложенияПоТипамОбъектов1С", ДанныеСтроки.ТипОбъекта, ДанныеСтроки.ТипВложения,ДанныеСтроки.Представление);
	//Удаление из таблицы на форме
	УдалитьВложениеНаСервере("ВложенияТекущегоТипаОбъекта1С", ДанныеСтроки.ТипОбъекта, ДанныеСтроки.ТипВложения,ДанныеСтроки.Представление);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьМетаданные(Тип, Имя)

	Возврат Метаданные[Тип].Найти(Имя) <> Неопределено;
	
КонецФункции
	
#КонецОбласти

#Область include_base_РаботаСТаблицейИсполнителей
#КонецОбласти


#Область include_core_src_Helpers_РаботаСоСвойствамиСтруктуры
#КонецОбласти


#Область include_core_src_Helpers_FormGetters
#КонецОбласти

#Область include_BlocklyExecutor_src_Commands
#КонецОбласти

#Область include_core_src_Криптография_НаКлиенте1С
#КонецОбласти

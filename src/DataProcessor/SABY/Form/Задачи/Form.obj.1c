
Перем МодульОбъекта;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	МодульОбъекта = ПолучитьМодульОбъекта();
	ОбщиеПараметры = МодульОбъекта.ПриНачалеРаботы();	
	ДобавитьИнформациюОВерсии(Элементы.ВерсияПродукта);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	СтатусВерсии = ПолучитьИнформациюОВерсииПоУмолчанию();
	СтатусВерсии = ПолучитьСтатусВерсииНаФорме(Ложь, СтатусВерсии);
	ОбновитьИнформациюОВерсии(СтатусВерсии);

	Тип = "Мои";
	ОбновитьСписокЗадач();	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "SabySignOut" Тогда
		Закрыть();
	ИначеЕсли ИмяСобытия <> "Saby_ЗавершениеДлительнойОперации" И ИмяСобытия <> "Saby_ЗавершениеВыполнитьДействие" Тогда
		Возврат;
	КонецЕсли;
	ОбновитьСписокЗадач();
	// TODO Переписать на обновление только выделенных строк.
КонецПроцедуры


#Область ФильтрыСпискаЗадач

&НаКлиенте
Процедура ТипПриИзменении(Элемент)
	ОбновитьСписокЗадач();
КонецПроцедуры

&НаКлиенте
Процедура ПросроченныеПриИзменении(Элемент)
	ОбновитьСписокЗадач();
КонецПроцедуры

&НаКлиенте
Процедура ПоискОчистка(Элемент, СтандартнаяОбработка)	
	СтрокаПоиска = "";
	ОбновитьСписокЗадач();	
КонецПроцедуры

&НаКлиенте
Процедура СообщениеПользователю(ТекстСообщения) Экспорт 

	СообщениеПользователю = Новый СообщениеПользователю;
	СообщениеПользователю.Текст = ТекстСообщения;
	СообщениеПользователю.Сообщить();	
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)	
	СтрокаПоиска = Текст;
	ОбновитьСписокЗадач();	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОбновитьСписокЗадач(Команда)
	ОбновитьСписокЗадач();
КонецПроцедуры

#КонецОбласти



#Область ОбновлениеСпискаЗадач

&НаКлиенте
Процедура _ПослеАутентификации(Результат, ДопПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Если ЭтаФорма.Открыта() Тогда
			Закрыть();
		КонецЕсли;
		Возврат;
	КонецЕсли;		
	ОбновитьСписокЗадач();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокЗадач(ОчиститьСписок=Истина)
	
	Если ОчиститьСписок Тогда 
		СписокЗадач.Очистить();
	КонецЕсли;
	
	Попытка
		Ответ = ПолучитьСписокЗадачНаСервере();	
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		СтруктураОшибки = ExtExceptionAnalyse(ИнфоОбОшибке);
		Если СтруктураОшибки.type = "Unauthorized" Тогда
			ВходяшиеПараметры	= Новый Структура("Метод", "ОбновитьСтраницу");
			ПроверкаВведенныхДанныхАутентификации = Новый ОписаниеОповещения("_ПослеАутентификации", ЭтаФорма, ВходяшиеПараметры);
			ОткрытьФорму("Обработка.SABY.Форма.Вход",,,,,, ПроверкаВведенныхДанныхАутентификации);
		Иначе
			ОписаниеОшибки = СтруктураОшибки.detail;
			ПоказатьОповещениеПользователя(
				"Ошибка",,ОписаниеОшибки,
				БиблиотекаКартинок["Ошибка32"],
				СтатусОповещенияПользователя.Важное, Новый УникальныйИдентификатор);
		КонецЕсли;
		Возврат;
	КонецПопытки;
	//
	//// Навигация
	//Навигация = ТаблицаЗадач.Получить("Навигация");
	//
	//ЕстьЕще 		= Навигация.Получить("ЕстьЕще");
	//Страница 		= Навигация.Получить("Страница");
	//РазмерСтраницы 	= Навигация.Получить("РазмерСтраницы");
	//
	//Если ЕстьЕще Тогда 
	//	СтрокаСпискаЗадач 			= СписокЗадач.Добавить();
	//	СтрокаСпискаЗадач.ИмяСБИС 	= "Загрузить ещё...";
	//КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокЗадачНаСервере()
	МодульОбъекта = ПолучитьМодульОбъекта();
	context_param = МодульОбъекта.НастройкиПодключенияПрочитать(); 

	Для ИндексСтраницы = 0 По ТекущаяСтраница Цикл
		СтруктураНавигации = Новый Структура("Страница, РазмерСтраницы", ИндексСтраницы, 30);

		Ответ = МодульОбъекта.local_helper_task_list(context_param, Тип, СтрокаПоиска, Просроченные, СтруктураНавигации);	
		СтраницаСпискаЗадачСбис = ДополнитьСписокДокументовСбисСвязьюСДокументом1С(get_prop(Ответ, "Реестр", Новый Массив) );
		Навигация = Ответ.Получить("Навигация");
		
		ЕстьЕще 		= Навигация.Получить("ЕстьЕще");
		Страница 		= Навигация.Получить("Страница");
		РазмерСтраницы 	= Навигация.Получить("РазмерСтраницы");
	КонецЦикла;
	
	Если ЕстьЕще Тогда 
		СтрокаСпискаЗадач 			= СписокЗадач.Добавить();
		СтрокаСпискаЗадач.ИдСБИС = "ЗагрузитьЕщё";
	КонецЕсли;	
	
КонецФункции

&НаСервере
Функция ДополнитьСписокДокументовСбисСвязьюСДокументом1С(СписокДокументовСбис)
	
	ТаблицаИдентификаторов = ПолучитьТаблицуИдентификаторовДокументовСбис(СписокДокументовСбис);
	ТаблицаСсылок =  РегистрыСведений.Saby_Состояние.ПолучитьСостоянияОбъектов(ТаблицаИдентификаторов);
	
	ТаблицаСписокЗадач = РеквизитФормыВЗначение("СписокЗадач");
	
	Для Сч=0 По СписокДокументовСбис.Количество() - 1 Цикл 
		ЗадачаСбис = СписокДокументовСбис[Сч]["Документ"];
		СтрокаСпискаЗадач = СписокЗадач.Добавить(); 
		ЗаполнитьСтрокуЗадачиИзЗадачиСбис(СтрокаСпискаЗадач, ЗадачаСбис);
		ЗаполнитьСтрокуЗадачиИзСтатуса1С(СтрокаСпискаЗадач, ТаблицаСсылок[сч]);
	КонецЦикла;
КонецФункции

&НаСервере
Процедура ЗаполнитьСтрокуЗадачиИзСтатуса1С(СтрокаЗадачи, Статус1С)
	СтрокаЗадачи.Документ1С = Статус1С["LINK"];
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьСтрокуЗадачиИзЗадачиСбис(СтрокаЗадачи, ЗадачаСбис)
	СтрокаЗадачи.Дата = МодульОбъекта.ПреобразоватьСтрокуВДату("dd.MM.yyyy", ЗадачаСбис["Дата"]);
	СтрокаЗадачи.Идентификатор = ЗадачаСбис.Получить("Идентификатор");
	СтрокаЗадачи.Название = ЗадачаСбис.Получить("Название");
	СтрокаЗадачи.Номер = ЗадачаСбис.Получить("Номер");
	СтрокаЗадачи.Примечание = ЗадачаСбис.Получить("Примечание");
	СтрокаЗадачи.Контрагент = get_prop(get_prop(ЗадачаСбис, "Контрагент"), "Название");
	СтрокаЗадачи.Организация = get_prop(get_prop(ЗадачаСбис, "НашаОрганизация"), "Название");
	Этап = get_prop(ЗадачаСбис, "Этап"); 
	СтрокаЗадачи.Этап = get_prop(Этап, "Название");
	СтрокаЗадачи.Отправитель = get_prop(get_prop(Этап, "Отправитель"), "Название");
	Срок = get_prop(Этап, "Срок");
	Если ЗначениеЗаполнено(Срок) Тогда
		СтрокаЗадачи.Срок = МодульОбъекта.ПреобразоватьСтрокуВДату("yyyy-MM-dd HH:mm:ss", Срок);
	КонецЕсли;
	СтрокаЗадачи.СсылкаСБИС = ЗадачаСбис.Получить("СсылкаДляНашаОрганизация");
	СтрокаЗадачи.ИмяСБИС = ЗадачаСбис.Получить("ИмяСБИС");
	СтрокаЗадачи.ИдСБИС = ЗадачаСбис.Получить("ИдСБИС");
	Состояние = get_prop(ЗадачаСбис, "Состояние");
	СостояниеСБИС = Справочники.Saby_СостоянияОбъектов.ПолучитьСтатусДокументаСБИС(get_prop(Состояние, "Код", 0));
	СтрокаЗадачи.Статус = СостояниеСБИС.ИндексКартинки;
	СтрокаЗадачи.Комментарий = get_prop(ЗадачаСбис, "Комментарий");
	
	СотрудникСБИС = "";
	Сотрудники = ЗадачаСбис["Сотрудники"];
	КоличествоСотрудников = Сотрудники.Количество();
	Сч = 0;
	Для Каждого _Сотрудник Из Сотрудники Цикл
		СотрудникСБИС = СотрудникСБИС + _Сотрудник["ФИО"] + Символы.ПС;
		Сч = Сч + 1;
		Если Сч = 2 Тогда
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
	Если КоличествоСотрудников > 2 Тогда
		СотрудникСБИС = СотрудникСБИС + "и еще " + Строка(КоличествоСотрудников - 2) +	" сотрудник(а/ов)";		
	КонецЕсли;		
	СтрокаЗадачи.Сотрудник = СотрудникСБИС;
	
	Вложения = get_prop(ЗадачаСбис, "Вложение", Новый Массив());
	СтрокаЗадачи.Вложения = ""; 
	Для Каждого Вложение Из Вложения Цикл
		Если Вложение["Служебный"] = "Нет" Тогда
			СтрокаЗадачи.Вложения = ?(ЗначениеЗаполнено(СтрокаЗадачи.Вложения), СтрокаЗадачи.Вложения + ", " + Вложение["Название"], Вложение["Название"]);		
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТаблицуИдентификаторовДокументовСбис(СписокДокументовСбис)
	tUID = Новый ТаблицаЗначений;
	tUID.Колонки.Добавить("UID", Новый ОписаниеТипов("Строка") );
	Для Каждого ДокументСбис Из СписокДокументовСбис Цикл
		ДокументСбис = ДокументСбис["Документ"];
		НовСтрока = tUID.Добавить();
		UID = get_prop(ДокументСбис,"Идентификатор");    //TODO удаить ИдИС когда UID до онлайна доедет
		НовСтрока.UID = Формат(UID, "ЧГ=0");
	КонецЦикла;
	Возврат tUID; 
КонецФункции

Функция СтатусДокумента(СтатусДокумента) Экспорт 
	
	СоответствиеСтатусов = Новый Соответствие;
	СоответствиеСтатусов.Вставить(0, "Документ редактируется");
	СоответствиеСтатусов.Вставить(1, "Есть документ");
	СоответствиеСтатусов.Вставить(2, "Отправлено приглашение");
	СоответствиеСтатусов.Вставить(3, "Отправлен");
	СоответствиеСтатусов.Вставить(4, "Доставлен");
	СоответствиеСтатусов.Вставить(6, "Ошибка");
	СоответствиеСтатусов.Вставить(7, "Выполнение завершено успешно");
	СоответствиеСтатусов.Вставить(9, "Выполнение завершено с проблемами");
	СоответствиеСтатусов.Вставить(10, "В обработке");
	СоответствиеСтатусов.Вставить(19, "Отозван мной");
	СоответствиеСтатусов.Вставить(20, "Удален контрагентом");
	СоответствиеСтатусов.Вставить(22, "Аннулирован по соглашению");
	СоответствиеСтатусов.Вставить(23, "Ожидает подписания");
	СоответствиеСтатусов.Вставить(27, "Ожидает аннулирования");
	
	Возврат СоответствиеСтатусов.Получить(СтатусДокумента);
	
КонецФункции

#КонецОбласти

#Область КомандыФормы

&НаКлиенте
Процедура ВыгрузитьОбъектВ1СНаКлиенте()

	ВыгружаемыеДокументы = Новый Массив();

	Для Каждого ВыгружаемыйДокумент Из Элементы.СписокЗадач.ВыделенныеСтроки Цикл
		СтрокаСпискаЗадач = СписокЗадач.НайтиПоИдентификатору(ВыгружаемыйДокумент);
		Если СтрокаСпискаЗадач.ИдСБИС = "ЗагрузитьЕщё" Тогда
			Продолжить;
		КонецЕсли;
		ИмяСБИС = СтрокаСпискаЗадач.ИмяСБИС;
		ПримечаниеСБИС = СтрокаСпискаЗадач.Примечание;
		ИдентификаторДокумента = СтрокаСпискаЗадач.Идентификатор;
		ИмяИзСБИСвАПИ3(ИмяСБИС, ПримечаниеСБИС, ИдентификаторДокумента);
		
		API3_ref = Новый Структура; 
		API3_ref.Вставить("SbisId",		СтрокаСпискаЗадач.ИдСБИС);
		API3_ref.Вставить("SbisType",	ИмяСБИС);
		API3_ref.Вставить("Type",		ИмяСБИС);
		API3_ref.Вставить("Title",		СтрокаСпискаЗадач.Название);
		ВыгружаемыеДокументы.Добавить(API3_ref);
	КонецЦикла;
	Если ВыгружаемыеДокументы.Количество() = 0 Тогда
		ПоказатьОповещениеПользователя(
			"Не выбрано ни одного документа.",,"",
			БиблиотекаКартинок["Ошибка32"],
			СтатусОповещенияПользователя.Важное, Новый УникальныйИдентификатор);
		Возврат;
	КонецЕсли;
	
	ВыгрузитьОбъектВ1С(ВыгружаемыеДокументы);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОбъектВ1С(ВыгружаемыеДокументы)
	context_params	= Saby_Core.ПроверитьНаличиеПараметровПодключения();	
	Saby_ФоновыеЗаданияКлиент.ЗапуститьINIФоновымЗаданием("Документы_update", ВыгружаемыеДокументы, context_params, ЭтаФорма.ВладелецФормы, "Выгрузка в 1С");
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВложенияНаКлиенте()
	ВыгружаемыеДокументы = Новый Массив();
	Для Каждого ВыгружаемыйДокумент Из Элементы.СписокЗадач.ВыделенныеСтроки Цикл
		СтрокаСпискаЗадач = СписокЗадач.НайтиПоИдентификатору(ВыгружаемыйДокумент);
		Если Не ЗначениеЗаполнено(СтрокаСпискаЗадач.Документ1С) Тогда
			Продолжить; 
		КонецЕсли;
		ВыгружаемыеДокументы.Добавить(СтрокаСпискаЗадач.Документ1С);
	КонецЦикла;
	Если ВыгружаемыеДокументы.Количество() Тогда
		ПроверкаОбмена = Saby_ВстраиваниеВСтандартныеФормы.ПроисходилЛиОбменДокументовСоСБИС(ВыгружаемыеДокументы);
		Saby_КомандыОбменаДляФормыКлиент.ВыгрузитьВложенияИзСБИС( ПроверкаОбмена.БылОбмен, Новый Структура("Форма", Неопределено) );
	Иначе
		ПоказатьОповещениеПользователя(
			"",,"Отсутствуют выгруженные документы"
			,БиблиотекаКартинок["Saby_Ошибка32"]
			,СтатусОповещенияПользователя.Важное,);
	КонецЕсли;
КонецПроцедуры

Процедура ИмяИзСБИСвАПИ3(ИмяСБИС, ПримечаниеСБИС, ИдентификаторДокумента)
	Если ИмяСБИС = "СлужЗап" Тогда
		ИмяСБИС = "Задача";	
	ИначеЕсли ИмяСБИС = "АвансОтчёт" Тогда
		ИмяСБИС = "АвансовыйОтчёт";
	ИначеЕсли ИмяСБИС = "ВнутрПрм" Тогда
		ИмяСБИС = "ВнутреннееПеремещение";
	ИначеЕсли ИмяСБИС = "PayoutDoc" Тогда
		ИмяСБИС = "ВыдачаЗарплаты";
	ИначеЕсли ИмяСБИС = "ДоговорДок" Тогда
		ИмяСБИС = "Договор";
	ИначеЕсли ИмяСБИС = "PriceChange" Тогда
		ИмяСБИС = "ИзменениеЦен";
	ИначеЕсли ИмяСБИС = "Allowance" Тогда
		Если Найти(ПримечаниеСБИС, "уход") > 0 Тогда
			МодульОбъекта = ПолучитьМодульОбъекта();
			context_params	= Saby_Core.ПроверитьНаличиеПараметровПодключения();
			ДокументСБИС = МодульОбъекта.local_helper_read_document(context_params, Новый Структура("Идентификатор", ИдентификаторДокумента));
			Если Найти(ДокументСБИС["Регламент"]["Название"], "уход") > 0 И Найти(ДокументСБИС["Регламент"]["Название"], "Больничный") = 0 Тогда 
				ИмяСБИС = "ОтпускПоУходу";
			Иначе
				ИмяСБИС = "Больничный";        
			КонецЕсли;
		Иначе
			ИмяСБИС = "Больничный";   
		КонецЕсли;
	ИначеЕсли ИмяСБИС = "Номенклатура" Тогда
		ИмяСБИС = "ПоказательОстатокНаСкладе";
	ИначеЕсли ИмяСБИС = "ДокОтгрВх" Тогда
		ИмяСБИС = "Поступление";
	ИначеЕсли ИмяСБИС = "Прайсы" Тогда
		ИмяСБИС = "Прайс";
	ИначеЕсли ИмяСБИС = "ДокОтгрИсх" Тогда
		ИмяСБИС = "Реализация";
	ИначеЕсли ИмяСБИС = "СчетИсх" Тогда
		ИмяСБИС = "СчетНаОплату";
	ИначеЕсли ИмяСБИС = "УдержанияПоЗарплате" Тогда
		ИмяСБИС = "УдержаниеПоЗарплате";
	ИначеЕсли ИмяСБИС = "ШтатнаяДолжность" Тогда
		ИмяСБИС = "ШтатноеРасписание";
	ИначеЕсли ИмяСБИС = "Согласование" Тогда
		ИмяСБИС = "ГрафикОтпусков";
	ИначеЕсли ИмяСБИС = "CadresOther" Тогда
		ИмяСБИС = "ПрочийКадровыйДокумент";
	ИначеЕсли ИмяСБИС = "НачисленияПоЗарплате" Тогда
		ИмяСБИС = "НачислениеПоЗарплате";
	ИначеЕсли ИмяСБИС = "PlanVacationScheduleChange" Тогда
		ИмяСБИС = "ПереносОтпусков";
	ИначеЕсли ИмяСБИС = "ТабельДокумент" Тогда
		ИмяСБИС = "Табель";
	ИначеЕсли ИмяСБИС = "ИзмененияОклада" Тогда
		ИмяСБИС = "ИзменениеУсловийОплаты";
	ИначеЕсли ИмяСБИС = "Indexation" Тогда
		ИмяСБИС = "ИндексацияЗаработка";
	ИначеЕсли ИмяСБИС = "GphAct" Тогда
		ИмяСБИС = "АктПриемки";	
	ИначеЕсли ИмяСБИС = "CombinationPositions" Тогда
		ИмяСБИС = "СовмещениеДолжностей";
	ИначеЕсли ИмяСБИС = "BusinessTrip" Тогда
		ИмяСБИС = "СписочнаяКомандировка";
	ИначеЕсли ИмяСБИС = "GphContract" Тогда
		ИмяСБИС = "ПриемНаРаботу";
	КонецЕсли;	
КонецПроцедуры	

&НаКлиенте
Процедура СписокЗадачВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СписокЗадачОбработкаВыбораСтроки();
КонецПроцедуры

&НаКлиенте
Процедура СписокЗадачКомандаОткрыть(Команда)
	СписокЗадачОбработкаВыбораСтроки();	
КонецПроцедуры

&НаКлиенте
Процедура СписокЗадачОбработкаВыбораСтроки()
	
	ТекущиеДанные = Элементы.СписокЗадач.ТекущиеДанные;
	ТекущийЭлементСпискаЗадач = Элементы.СписокЗадач.ТекущийЭлемент;
	
	Если ТекущиеДанные.ИдСБИС = "ЗагрузитьЕщё" Тогда
		ТекущаяСтраница = ТекущаяСтраница + 1;
		СписокЗадач.Удалить(ТекущиеДанные);
		ОбновитьСписокЗадач(Ложь);
		Возврат;
	КонецЕсли;
	
	Если ТекущийЭлементСпискаЗадач.Имя = "СписокЗадачДокумент1С" и Не ТекущиеДанные.Документ1С = Неопределено Тогда
		ПоказатьЗначение(, ТекущиеДанные.Документ1С);
	Иначе
		ПараметрыФормы = Новый Структура("Идентификатор, ИдСБИС", ТекущиеДанные["Идентификатор"], ТекущиеДанные["ИдСБИС"]);
		ОткрытьФорму("Обработка.SABY.Форма.ФормаПросмотраДокумента", ПараметрыФормы,,ТекущиеДанные["Идентификатор"]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПрямуюССылку(ЗадачаСсылка)
	ЗадачаСсылка = СтрЗаменить(ЗадачаСсылка, "://fix-1c.", "://fix-online.");
	ЗадачаСсылка = СтрЗаменить(ЗадачаСсылка, "://test-1c.", "://test-online.");
	ЗадачаСсылка = СтрЗаменить(ЗадачаСсылка, "://pre-test-1c.", "://pre-test-online.");
	ЗадачаСсылка = СтрЗаменить(ЗадачаСсылка, "://1c.", "://online.");
	Возврат ЗадачаСсылка;
КонецФункции

&НаКлиенте
Процедура СписокЗадачКомандаОткрытьВСБИС(Команда)
	ЗадачаСсылка = ПолучитьПрямуюССылку(Элементы.СписокЗадач.ТекущиеДанные.СсылкаСБИС);
	ПерейтиПоНавигационнойСсылке(ЗадачаСсылка);
КонецПроцедуры

&НаКлиенте
Процедура МенюДействиеВСБИС(Команда)
	
	СписокДокументовСБИС = Новый Массив();
	СписокДокументов1С = Новый Массив();
	Для Каждого Стр Из Элементы.СписокЗадач.ВыделенныеСтроки Цикл 
		СтрокаСпискаЗадач = СписокЗадач.НайтиПоИдентификатору(Стр);
		Если СтрокаСпискаЗадач.ИдСБИС = "ЗагрузитьЕщё" Тогда
			Продолжить;
		КонецЕсли;
		ДокументСБИС = Новый Структура("Идентификатор, ПервичныйКлюч, Документ1С", 
		СтрокаСпискаЗадач["Идентификатор"], СтрокаСпискаЗадач["ИдСБИС"], СтрокаСпискаЗадач["Документ1С"]);	
		СписокДокументовСБИС.Добавить(ДокументСБИС);
		Если СтрокаСпискаЗадач["Документ1С"] <> Неопределено Тогда
			СписокДокументов1С.Добавить(СтрокаСпискаЗадач["Документ1С"]);
		КонецЕсли;
	КонецЦикла;
	Если СписокДокументовСБИС.Количество() = 0 Тогда
		ПоказатьОповещениеПользователя(
			"Не выбрано ни одного документа.",,"",
			БиблиотекаКартинок["Ошибка32"],
			СтатусОповещенияПользователя.Важное, Новый УникальныйИдентификатор);
		Возврат;
	КонецЕсли;
	
	ПараметрыВФорму = Новый Структура("СписокДокументовСБИС, СписокДокументов1С, МожноПереотправитьВСБИС, МожноОбновитьВСБИС", 
	СписокДокументовСБИС, СписокДокументов1С, СписокДокументов1С.Количество() > 0, Истина);
	ОткрытьФорму("Обработка.SABY.Форма.ВыполнитьДействие", ПараметрыВФорму, ЭтаФорма, Новый УникальныйИдентификатор(), , , );
КонецПроцедуры

&НаКлиенте
Процедура МенюВыгрузитьВ1С(Команда)
	
	СписокКнопок = Новый СписокЗначений();	
    СписокКнопок.Добавить(0, "Выгрузить в 1С");
    СписокКнопок.Добавить(1, "Выгрузить в 1С вложения");
		
	ОписаниеОповещения = Новый ОписаниеОповещения("МенюВыгрузитьВ1СОбработкаОповещения", ЭтаФорма);
	ПоказатьВыборИзМеню(ОписаниеОповещения, СписокКнопок, Элементы.МенюВыгрузитьВ1С);
	
КонецПроцедуры

&НаКлиенте
Процедура МенюВыгрузитьВ1СОбработкаОповещения(ЗначениеВыбора, ДопПараметры) Экспорт
	
	Если ЗначениеВыбора = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеВыбора.Значение = 0 Тогда 	
		ВыгрузитьОбъектВ1СНаКлиенте();		
	ИначеЕсли ЗначениеВыбора.Значение = 1 Тогда 	
		ВыгрузитьВложенияНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область include_core_src_Helpers_FormGetters
#КонецОбласти

#Область include_core_src_Helpers_РаботаСоСвойствамиСтруктуры
#КонецОбласти

#Область include_core_src_ExtException
#КонецОбласти

#Область include_base_НазваниеПродукта
#КонецОбласти

#Область include_core_src_ПроверкаВерсии_ПолучитьИмяФайлаИНомерТекущейВерсии
#КонецОбласти

#Область include_core_src_ПроверкаВерсии_НаФорме
#КонецОбласти

#Область include_core_src_DataProcessor_SABY_ОсобенностиПлатформы_МодульФормы
#КонецОбласти


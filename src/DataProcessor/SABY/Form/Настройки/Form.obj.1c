&НаКлиенте
Перем ФормаОткрыта;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ИзмененаДатаОбновленияСтатусов = Ложь;
	ДобавитьИнформациюОВерсии(Элементы.ВерсияПродукта);
	
	Элементы.send_invitations.СписокВыбора.Очистить();
	Элементы.send_invitations.СписокВыбора.Добавить(Ложь, "Не отправлять приглашение");
	Элементы.send_invitations.СписокВыбора.Добавить(Истина,"Отправлять на online.saby.ru");
	Элементы.send_invitations.СписокВыбора.Добавить("my.saby.ru", "Отправлять на my.saby.ru");
	Элементы.send_invitations.СписокВыбора.Добавить("staff.saby.ru", "Отправлять на staff.saby.ru");
	
	МодульОбъекта	= ПолучитьМодульОбъекта();
	ОбщиеНастройки	= МодульОбъекта.ОбщиеНастройкиПрочитать();
	ПубличныеОбщиеНастройки	= get_prop(ОбщиеНастройки, "public");
	
	download_attachments_on_complete		= get_prop(ПубличныеОбщиеНастройки, "download_attachments_on_complete", Истина);
	download_attachments_on_update		= get_prop(ПубличныеОбщиеНастройки, "download_attachments_on_update", Истина);
	refresh_statuses			= get_prop(ПубличныеОбщиеНастройки, "refresh_statuses", Ложь);
	send_invitations			= get_prop(ПубличныеОбщиеНастройки, "send_invitations", Истина);
	run_docflow					= get_prop(ПубличныеОбщиеНастройки, "run_docflow",		Истина);
	send_completed_documents	= get_prop(ПубличныеОбщиеНастройки, "send_completed_documents",	Истина);
	pdf_attachments	= get_prop(ПубличныеОбщиеНастройки, "pdf_attachments",	Ложь);

	context_param	= Saby_Core.НастройкиПодключенияПрочитать();
	advanced_log	= get_prop(context_param, "advanced_log",	Ложь);
	ЗаполнитьДатуСобытияОбновленияСтатусов(context_param);
	
	ПрочитатьНастройкиПодсистемы("ЭТрН");
	ПрочитатьНастройкиПодсистемы("КЭДО");
	ПрочитатьНастройкиПодсистемы("ЭЛН");
	
	ВидимостьЭлементовКЭДО = Ложь; 
	Если Метаданные.ФункциональныеОпции.Найти("Saby_ИспользоватьКЭДО") <> Неопределено Тогда
        ВидимостьЭлементовКЭДО = ПолучитьФункциональнуюОпцию("Saby_ИспользоватьКЭДО");
	КонецЕсли;	
	Элементы.грПриглашение.Видимость			= ВидимостьЭлементовКЭДО; 
	Элементы.run_docflow.Видимость				= ВидимостьЭлементовКЭДО; 
	Элементы.Вложения.Видимость					= ВидимостьЭлементовКЭДО; 
	Элементы.ОткрытьКадровыеДокументы.Видимость				= ВидимостьЭлементовКЭДО; 
	Элементы.ДекорацияЗадачиНативные.Видимость				= ВидимостьЭлементовКЭДО; 
	Элементы.ОткрытьЗадачи.Видимость				= ВидимостьЭлементовКЭДО; 
	Элементы.ОткрытьИсториюОбмена.Видимость				= ВидимостьЭлементовКЭДО; 
	
	Элементы.ДействиеСРегламентнымЗаданием.Заголовок = "Поиск регламентного задания";

КонецПроцедуры


&НаСервере
Функция ПолучитьКоличествоФункциональныхОпций()
	МодульОбъекта = ПолучитьМодульОбъекта();
	МетаданныеРасширения = МодульОбъекта.ПолучитьМетаданныеРасширения();
	КоличествоФО = 0;
	Если МетаданныеРасширения <> Неопределено Тогда 
		КоличествоФО = МетаданныеРасширения.ФункциональныеОпции.Количество();
	КонецЕсли;
	Возврат КоличествоФО;
КонецФункции

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ФормаОткрыта = Истина;
	ПолучитьАктуальностьВерсии();
	УстановитьЗаголовокПодсказкуКнопкиВыйти();
	КоличестовПопытокПолученияРЗ = 3;
	Элементы.ДействиеСРегламентнымЗаданием.Заголовок = "Поиск регламентного задания...";
	ПодключитьОбработчикОжидания("ПолучитьРегламентныеЗадания", 1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	ФормаОткрыта = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ВыйтиНажатие(Элемент)
	Если ЭтаФорма.Элементы.Выйти.Заголовок = "Войти" Тогда
		ПроверкаВведенныхДанныхАутентификации = Новый ОписаниеОповещения("ОбработкаРезультатаЗакрытияФормыАвторизации", ЭтаФорма);
		ОткрытьФорму("Обработка.SABY.Форма.Вход",,,,,,ПроверкаВведенныхДанныхАутентификации);		
	Иначе	
		ВыйтиНаСервере();
		ПолучитьАктуальностьВерсии();
		УстановитьЗаголовокПодсказкуКнопкиВыйти();
		Сообщить("Сессия и пароль сброшены");
		Оповестить("SabySignOut");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция  ОбработкаСменыАккаунтаНаСервер(account_id)
	МодульОбъекта = ПолучитьМодульОбъекта();
	Результат = МодульОбъекта.local_helper_switch_account(Неопределено, account_id);
	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		context_param	= МодульОбъекта.ПроверитьНаличиеПараметровПодключения();
		МодульОбъекта.ПослеАутентификации(context_param);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаКлиенте 
Процедура ОбработкаСменыАккаунта(ВыбранныйЭлемент, ПараметрыОповещения) Экспорт
	Если ВыбранныйЭлемент = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	ИдентификаторСесии = ОбработкаСменыАккаунтаНаСервер(ВыбранныйЭлемент.Значение);
	Если ТипЗнч(ИдентификаторСесии) = Тип("Строка") Тогда
		ПоказатьОповещениеПользователя("Авторизация",,"Выполнен вход - "+ВыбранныйЭлемент.Представление,
		,СтатусОповещенияПользователя.Информация,
		Новый УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СменитьАккаунтНажатие(Элемент)
	Попытка
		СписокАккаунтов = ПолучитьСписокАккаунтов();
	Исключение
		ИнфОбОшибке = ИнформацияОбОшибке();
		СтруктураОшибки = ExtExceptionAnalyse(ИнфОбОшибке);
		ПоказатьОповещениеПользователя(
			"Ошибка",,СтруктураОшибки.message,
			БиблиотекаКартинок["Saby_Ошибка32"],
			СтатусОповещенияПользователя.Важное,);
		Возврат;
	КонецПопытки;
	
	Если СписокАккаунтов.Количество() < 2 Тогда
		ПоказатьОповещениеПользователя("Внимание",,"У вас один аккаунт. Смена невозможна.",
		,СтатусОповещенияПользователя.Информация,
		Новый УникальныйИдентификатор);
		Возврат;
	КонецЕсли;
	ОповещениеВыбораАккаутна = Новый ОписаниеОповещения("ОбработкаСменыАккаунта", ЭтаФорма);
	ПоказатьВыборИзСписка(ОповещениеВыбораАккаутна, СписокАккаунтов);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСопоставленияНажатие(Элемент)
	//Saby_КомандыОбменаДляФормыКлиент.ЗапуститьОповещениеПриНаличииСессии(Saby_КомандыОбменаДляФормыКлиент, "ЗагрузитьСопоставленияНа", Новый Структура());
	Saby_КомандыОбменаДляФормыКлиент.ЗапуститьОповещениеПриНаличииСессии(ЭтаФорма, "ЗагрузитьСопоставления", Новый Структура());
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСопоставления(Результат=Неопределено, ДопПараметры=Неопределено) Экспорт
	connection_info = Неопределено;
	ТекстСообщения = "Загружены сопоставления по умолчанию.";
	Картинка		= БиблиотекаКартинок["Saby_Успешно32"];
	Попытка
		ЗагрузитьСопоставленияНаСервере(connection_info);
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		СтруктураОшибки = Saby_Core.ExtExceptionAnalyse(ИнфоОбОшибке);
		Картинка		= БиблиотекаКартинок["Saby_Ошибка32"];
		ТекстСообщения	= СтруктураОшибки.message;
	КонецПопытки;
	ПоказатьОповещениеПользователя("Сопоставление завершено",,ТекстСообщения,Картинка,СтатусОповещенияПользователя.Важное, Новый УникальныйИдентификатор);
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСопоставленияНаСервере(connection_info)
	//Дополнительная первоначальная ручная инициализация элементов справочника
	Справочники.Saby_СостоянияОбъектов.НачальнаяИнициализация();

	Модуль = ПолучитьМодульОбъекта();
	context_param = Модуль.НастройкиПодключенияПрочитать();
	system_info = Модуль.API_ADDON_READSYSTEMINFO(Неопределено);
	system_info.Вставить("ConnectionStateEvents", Новый Массив);
	system_info["ConnectionStateEvents"].Добавить("NewSystem");
	connection_info = Модуль.local_helper_init_connection(context_param, system_info);
	Модуль.ПриСозданииНовогоПодключения(connection_info);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРезультатаЗакрытияФормыАвторизации(Результат, Параметры) Экспорт
	Если Результат = Неопределено Тогда Возврат; КонецЕсли;
	ПолучитьАктуальностьВерсии();
	УстановитьЗаголовокПодсказкуКнопкиВыйти();
	//А вот тут бы проверить куда мы дальше хотим идти, если есть такие указания в - Параметры
	//Это для команд открытия формы браузера.
	Если ТипЗнч(Параметры) = Тип("Структура") Тогда
		ОповещениеМодуль = get_prop(Параметры,"Модуль");
		ОповещениеМетод = get_prop(Параметры,"Метод");
		Если ОповещениеМодуль = Неопределено ИЛИ ОповещениеМетод = Неопределено Тогда Возврат; КонецЕсли;
		МетодЗавершенияАвторизации = Новый ОписаниеОповещения(ОповещениеМетод, ОповещениеМодуль);
		ВыполнитьОбработкуОповещения(МетодЗавершенияАвторизации);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗаголовокПодсказкуКнопкиВыйти()
	saby_param = ПолучитьСБИСПараметры();	
	АвторизацияВыполнена = get_prop(saby_param, "session") <> Неопределено;
	Если АвторизацияВыполнена Тогда
		ЭтаФорма.Элементы.Выйти.Заголовок = "Выйти";
		ЭтаФорма.Элементы.Выйти.Подсказка = "Закрыть сессию в SABY";
	Иначе
		ЭтаФорма.Элементы.Выйти.Заголовок = "Войти";
		ЭтаФорма.Элементы.Выйти.Подсказка = "Открыть сессию в SABY";
	КонецЕсли;
	Элементы.ЛогинПользователя.Видимость	= АвторизацияВыполнена;
	Элементы.АдресСервера.Видимость			= АвторизацияВыполнена;
	Элементы.ЛогинПользователя.Заголовок	= get_prop(saby_param, "login");
	Элементы.АдресСервера.Заголовок			= get_prop(saby_param, "api_url");
	Элементы.ПереключитьАккаунт.Доступность = (ЭтаФорма.Элементы.Выйти.Заголовок = "Выйти");
	ЭтаФорма.ОбновитьОтображениеДанных();
КонецПроцедуры

&НаСервере
Функция ПолучитьСБИСПараметры()
	МодульОбъекта = ПолучитьМодульОбъекта();
	saby_param = МодульОбъекта.НастройкиПодключенияПрочитать();
	Возврат saby_param;
КонецФункции	

&НаСервере
Процедура ВыйтиНаСервере()
	МодульОбъекта = ПолучитьМодульОбъекта();
	saby_param = МодульОбъекта.НастройкиПодключенияПрочитать();
	Если saby_param <> Неопределено Тогда	
		saby_param.session = Неопределено;
		saby_param.password = Неопределено;
		МодульОбъекта.НастройкиПодключенияЗаписать(saby_param );
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРедакторФайловНастроекНажатие(Элемент)
	Saby_КомандыОбменаДляФормыКлиент.ЗапуститьОповещениеПриНаличииСессии(Saby_КомандыОбменаДляФормыКлиент, "ОткрытьРедакторФайловНастроек", Новый Структура());
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗадачиНажатие( Команда, ПараметрКоманды ) Экспорт
	Saby_КомандыОбменаДляФормыКлиент.ЗапуститьОповещениеПриНаличииСессии(Saby_КомандыОбменаДляФормыКлиент, "ОткрытьЗадачи", Новый Структура());
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКадровыеДокументыНажатие( Команда, ПараметрКоманды ) Экспорт 
	Saby_КомандыОбменаДляФормыКлиент.ЗапуститьОповещениеПриНаличииСессии(Saby_КомандыОбменаДляФормыКлиент, "ОткрытьКадровыеДокументы", Новый Структура());
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИсториюОбменаНажатие(Элемент)
	Saby_КомандыОбменаДляФормыКлиент.ЗапуститьОповещениеПриНаличииСессии(Saby_КомандыОбменаДляФормыКлиент, "ОткрытьИсториюОбмена", Новый Структура());
КонецПроцедуры

&НаКлиенте
Процедура СброситьКэшНажатие(Элемент)
	СброситьКэшНаСервере();
	Сообщить("Общие настройки ини очищены");
КонецПроцедуры

&НаСервере
Процедура СброситьКэшНаСервере()
	УстановитьПривилегированныйРежим(Истина);
	МодульОбъекта	= ПолучитьМодульОбъекта();
	СервераСБИС		= МодульОбъекта.СписокСерверовSaby();
	Для Каждого АдресСбис Из СервераСБИС Цикл
		ХранилищеОбщихНастроек.Сохранить("Saby", "Ini"+АдресСбис.Значение, Неопределено,,"Saby");
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаписатьОбщиеПараметрыНаСервере()
	МодульОбъекта = ПолучитьМодульОбъекта();
	ОбщиеНастройки	= МодульОбъекта.ОбщиеНастройкиПрочитать();
	ПубличныеОбщиеНастройки	= get_prop(ОбщиеНастройки, "public", Новый Структура);
	
	ПубличныеОбщиеНастройки.Вставить("download_attachments_on_complete",		download_attachments_on_complete);
	ПубличныеОбщиеНастройки.Вставить("download_attachments_on_update",			download_attachments_on_update);
	ПубличныеОбщиеНастройки.Вставить("refresh_statuses",						refresh_statuses);
	ПубличныеОбщиеНастройки.Вставить("run_docflow",								run_docflow);
	ПубличныеОбщиеНастройки.Вставить("send_invitations",						send_invitations);
	ПубличныеОбщиеНастройки.Вставить("send_completed_documents",				send_completed_documents);
	ПубличныеОбщиеНастройки.Вставить("pdf_attachments",							pdf_attachments);
	
	ОбщиеНастройки.Вставить("public", ПубличныеОбщиеНастройки);
	МодульОбъекта.ОбщиеНастройкиЗаписать(ОбщиеНастройки);  
	
	ЗаписатьНастройкиПодсистемы("ЭТрН");
	ЗаписатьНастройкиПодсистемы("КЭДО");
	ЗаписатьНастройкиПодсистемы("ЭЛН");
	
КонецПроцедуры

Процедура ЗаписатьПараметрыПользователя();
	context_param	= Saby_Core.НастройкиПодключенияПрочитать();
	Если context_param <> Неопределено Тогда 
		context_param.Вставить("advanced_log", advanced_log);
		Если ИзмененаДатаОбновленияСтатусов Тогда 
			УстановитьДатуСобытияОбновленияСтатусов(context_param);
		КонецЕсли;
	КонецЕСли;
	Saby_Core.НастройкиПодключенияЗаписать(context_param);
КонецПроцедуры

&НаКлиенте
Процедура ДатаВремяУказателяСтатусаПриИзменении(Элемент)
	ИзмененаДатаОбновленияСтатусов = Истина;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДатуСобытияОбновленияСтатусов(context_param)
	ПоследнееСобытие = get_prop(context_param, "last_event");
	ДатаСобытияСтрокой	=  get_prop(ПоследнееСобытие, "date", "01.01.0001 00.00.00");
	Если Не ПустаяСтрока(ДатаСобытияСтрокой) Тогда
		ЭлементыДатыСобытия = СтрРазделить(СтрЗаменить(ДатаСобытияСтрокой, " ", "."), ".");
		//В ином случае нам тут делать нечего, скорее всего будет произвольный набор данных
		//на коротый мы не расчитывали
		Если ЭлементыДатыСобытия.Количество() = 6 Тогда
			Попытка
				ДатаВремяУказателяСтатуса = Дата(
					ЭлементыДатыСобытия[2],
					ЭлементыДатыСобытия[1],
					ЭлементыДатыСобытия[0],
					ЭлементыДатыСобытия[3],
					ЭлементыДатыСобытия[4],
					ЭлементыДатыСобытия[5]
				);
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьДатуСобытияОбновленияСтатусов(context_param)
	УказателиНаСобытие = Новый Структура();
	Если ДатаВремяУказателяСтатуса <> Дата(1,1,1) Тогда
		УказателиНаСобытие	= Новый Структура("date", Формат(ДатаВремяУказателяСтатуса, "ДФ='dd.MM.yyyy HH.mm.ss'"));
	КонецЕсли;
	context_param.Вставить("last_event", УказателиНаСобытие);
КонецПроцедуры

&НаСервере
Процедура ПрочитатьНастройкиПодсистемы(ИмяПодсистемы, ОтображатьФО = Истина)
	
	ИмяФО = "Saby_Использовать" + ИмяПодсистемы;
	Если Метаданные.ФункциональныеОпции.Найти(ИмяФО) = Неопределено Тогда 
		Элементы[ИмяФО].Видимость = Ложь; 
	Иначе
		ЭтаФорма[ИмяФО] = Константы[ИмяФО].Получить();		
	КонецЕсли;
	Элементы[ИмяФО].Видимость = Элементы[ИмяФО].Видимость И ОтображатьФО; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНастройкиПодсистемы(ИмяПодсистемы)
	
	ИмяФО = "Saby_Использовать" + ИмяПодсистемы; 
	Если Метаданные.ФункциональныеОпции.Найти(ИмяФО) <> Неопределено Тогда 
		Константы[ИмяФО].Установить(ЭтаФорма[ИмяФО]);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ТребуетсяВывестиСообщениеОНеобходимостиАвторизации()
	ОбработкаSABY = ПолучитьМодульОбъекта();
	Возврат ОбработкаSABY.ПроверитьНаличиеПараметровПодключения() = Неопределено;
КонецФункции

&НаКлиенте
Процедура ЗаписатьОбщиеПараметры(Команда)
	ЗаписатьПараметрыПользователя();
	ЗаписатьОбщиеПараметрыНаСервере();
	ОбновитьИнтерфейс(); //Обновление интерфейса после вкл/выкл функциональных опций
	Если ТребуетсяВывестиСообщениеОНеобходимостиАвторизации() Тогда
		ПоказатьОповещениеПользователя(
			"Функционал SABY недоступен."
			,Неопределено
			,"Для работы необходимо авторизоваться."
			,БиблиотекаКартинок["Ошибка32"]
			,СтатусОповещенияПользователя.Важное,);
	КонецЕсли;
	Закрыть(Истина);
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокАккаунтов()
	МодульОбъекта = ПолучитьМодульОбъекта();
	Результат = МодульОбъекта.local_helper_get_accoutslist(Неопределено);
	СписокАккаунтов	= Новый СписокЗначений;
	Если ТипЗнч(Результат) = Тип("Массив") Тогда
		Для Каждого ЭлементАккаунт Из Результат Цикл
			СписокАккаунтов.Добавить(get_prop(ЭлементАккаунт,"НомерАккаунта"), get_prop(ЭлементАккаунт,"НазваниеАккаунта"));
		КонецЦикла;
	КонецЕсли;
	Возврат СписокАккаунтов;
КонецФункции

&НаКлиенте
Процедура ДекорацияЗадачиНативныеНажатие(Элемент)
	ОткрытьФорму("Обработка.SABY.Форма.Задачи");
КонецПроцедуры

&НаКлиенте
Процедура РоботОперацииНажатие(Элемент)
	ОткрытьФорму("Обработка.SABY.Форма.РоботСписок");
КонецПроцедуры

#Область include_core_base_ВзаимодействиеСРегламентнымиЗаданиями
#КонецОбласти

#Область include_base_src_ОткрытьСтраницуИсторииИзменения
#КонецОбласти

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметры, Источник)
	Если ИмяСобытия = "Saby_ЗакрытиеФормыАвторизации" Тогда
		//Параметры не важны
		//АвторизацияУспешна = get_prop(Параметры, "АвторизацияУспешна", Ложь);
		//ДальнейшееДействие = get_prop(Параметры, "ДальнейшееДействие", "");
		//Важно перерисовать форму
		ПолучитьАктуальностьВерсии(ФормаОткрыта);
		УстановитьЗаголовокПодсказкуКнопкиВыйти();
	КонецЕсли;
КонецПроцедуры

#Область include_core_src_DataProcessor_SABY_ОсобенностиПлатформы_РаботаСЭлементамиФормы
#КонецОбласти

#Область include_core_base_ПроверкаВерсии_НаФорме
#КонецОбласти

#Область include_core_base_Helpers_FormGetters
#КонецОбласти

#Область include_core_base_Helpers_РаботаСоСвойствамиСтруктуры
#КонецОбласти

#Область include_core_base_ExtException
#КонецОбласти


//&НаКлиенте
//Перем КомандыПечатиФормы;
//&НаКлиенте
//Перем Документы;

&НаКлиенте
Перем МенеджерыКриптографии;

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	СтатусВерсии = ПолучитьИнформациюОВерсииПоУмолчанию();
	СтатусВерсии = ПолучитьСтатусВерсииНаФорме(Ложь, СтатусВерсии);
	ОбновитьИнформациюОВерсии(СтатусВерсии);
	
	//Saby_ТранспортПриИзменении( Элементы.ТаблицаПолучателейSMS );
	//ИзменениеВидаЭлементов();
	
	//ВЫзов с клиента, тк всё храниться в переменных формы
	ВложенияТекущегоТипаДокумента.Очистить();
	КомандыПечатиФормы	= Новый Массив;
	ЗаполнитьСписокПФПоТблДокументов();
	Попытка
		ЗаполнитьТЗДоступныхРегламентов();
	Исключение
		Отказ	= Истина;
		ИнфоОбОшибке = ИнформацияОбОшибке();
		СтруктураОшибки = ExtExceptionAnalyse(ИнфоОбОшибке);
		ОписаниеОшибки = СтруктураОшибки.detail;
		ПоказатьОповещениеПользователя(
			"Ошибка",,
			ОписаниеОшибки,
			БиблиотекаКартинок["Ошибка32"],
			СтатусОповещенияПользователя.Важное,
			Новый УникальныйИдентификатор
		);
		Возврат;
	КонецПопытки;
	ПрочитатьВыборПФДляВидаДокумента(Объекты[0].ВидОбъекта);
	УстановитьФильтрПФПоТипуДокумента(Объекты[0].ВидОбъекта);
	ЗаполнитьСписокРегламентов(Объекты[0].ВидОбъекта);
	СкрытьПФЕслиНеДокумент();
	//ЗаполнитьКоментарииДокументовКОтправке();
	УстановитьПроизвольноеНазваниеРегламента();
КонецПроцедуры

&НаКлиенте
Процедура СкрытьПФЕслиНеДокумент()
	ТипМетаданных = ПолучитьТипМетаданных(Объекты[0].Объект);
	Если Не ТипМетаданных = "Документы" Тогда 
		ВидимостьЭлементаФормы("ВложенияТипаДокумента", Ложь);
		ВидимостьЭлементаФормы("грДобавитьФайл", Ложь);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПроизвольноеНазваниеРегламента()
	ТД = Элементы.Объекты.ТекущиеДанные;
	Если ТД <> Неопределено Тогда
		РегламентПриИзмененииНаСервере(ТД.ВидОбъекта);
	КонецЕсли;	
	ТипМетаданных = ПолучитьТипМетаданных(Объекты[0].Объект);
	Если ТипМетаданных = "Документы" или Найти(Регламент, "ПрочийКадровыйДокумент") > 0 Тогда
		ВидимостьЭлементаФормы("ВложенияТипаДокумента", Истина);
		ВидимостьЭлементаФормы("грДобавитьФайл", Истина);
		ВидимостьЭлементаФормы("ПростойЗапросПодписи", Истина);
	Иначе
		ВидимостьЭлементаФормы("ВложенияТипаДокумента", Ложь);
		ВидимостьЭлементаФормы("грДобавитьФайл", Ложь);
		ВидимостьЭлементаФормы("ПростойЗапросПодписи", Ложь);
	КонецЕсли;
	Для каждого Регламента из РегламентПоТипамДокументов Цикл
		Если Регламента.Регламент.Значение = Регламент Тогда
			Если Регламента.Регламент.ПроизвольноеНазваниеРегламента Тогда
				ВидимостьЭлементаФормы("ПроизвольноеНазваниеРегламента", Истина);
				ВидимостьЭлементаФормы("ПроизвольноеНазваниеРегламентаВидимость", Ложь);
			Иначе
				ВидимостьЭлементаФормы("ПроизвольноеНазваниеРегламента", Ложь);
				ВидимостьЭлементаФормы("ПроизвольноеНазваниеРегламентаВидимость", Истина);
			КонецЕсли;
			Прервать;
		КонецЕсли;	
	КонецЦикла;
	
	Для каждого влож из ВложенияТекущегоТипаДокумента Цикл
		Если влож.ОтметкаВыбора Тогда
			ПроизвольноеНазваниеРегламента = влож.Представление;
			Возврат;
		КонецЕсли;
	КонецЦикла;
	ПроизвольноеНазваниеРегламента = Лев(Регламент, Найти(Регламент,"[/") - 1);;
КонецПроцедуры	

&НаКлиенте
Процедура ВидимостьЭлементаФормы(НазваниеЭлемента, ВидимостьЭлемента)
	ЭлементыФормочки = ПолучитьЭлементыФормы();
	ЭлементыФормочки[НазваниеЭлемента].Видимость = ВидимостьЭлемента;		
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ДобавитьИнформациюОВерсии(Элементы.ВерсияПродукта);
	мДокументы	= Неопределено;
	Объекты.Очистить();
	Если Параметры.Свойство("Источник", мДокументы) Тогда
		Если мДокументы.Количество() > 0 Тогда 
			ПервыйДок = мДокументы[0]; 
		Иначе
			//Закроем форму при отсутствии документов
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		УстановитьЗаголовокФормы(мДокументы.Количество(), ПервыйДок);
		Для Каждого ОтпДокумент Из мДокументы Цикл
			нСтрока 				= Объекты.Добавить();
			нСтрока.Объект			= ОтпДокумент.Ссылка;
			нСтрока.Представление	= ОтпДокумент.Ссылка;
			нСтрока.СтатусОшибки	= 0;
			нСтрока.ВидОбъекта		= ОтпДокумент.Ссылка.Метаданные().Имя;
			нСтрока.ИмяИни			= ОтпДокумент.ИмяИни;	
		КонецЦикла;
		
		Элементы.ПростойЗапросПодписи.Видимость = НЕ ОбщегоНазначения.ЭтоСправочник(ПервыйДок.Ссылка.Метаданные());
	Иначе
		//Закроем форму при отсутствии документов
		Отказ = Истина;
	КонецЕсли;

	ПростойЗапрос = Ложь; //Пока убрано с формы
	УстановитьУсловноеОформление( ЭтаФорма );
	ПростойЗапросПодписи	= Ложь;
	Элементы.ДобавитьСотрудника.Видимость = ПростойЗапросПодписи;
	Элементы.СписокИсполнителей.Видимость = ПростойЗапросПодписи;
	Элементы.КаналИнформации.Видимость = ПростойЗапросПодписи;
	Элементы.МаршрутОзнакомления.Видимость = ПростойЗапросПодписи;
КонецПроцедуры



&НаСервере
Процедура УстановитьУсловноеОформление(ЭтаФорма_)
	
	//Оптправляем все виды документов. поэтому раскарска уже не нужна, код оставлен на будущее, 
	//ли вдруг нужно будет раскрасить таблицу документов по каким то другим условиям
	
	//мПоляОформления		= Новый Массив();
	//мПоляОформления.Добавить("ДокументыКОтправке");
	//
	//ПутьКПолюОтбора		= "ДокументыКОтправке.СтатусОшибки";
	//ПутьКПолюСравнения	= "ДокументыКОтправке.СтатусОшибки";
	//
	//
	////*******************************
	////Еще собрать
	//Элемент = УсловноеОформление.Элементы.Добавить();
	//Для Каждого ИмяПоля Из мПоляОформления Цикл
	//	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	//	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяПоля].Имя);
	//КонецЦикла;
	//
	//ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбора);
	//ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	//ОтборЭлемента.ПравоеЗначение = 1;//Новый ПолеКомпоновкиДанных(ПутьКПолюСравнения);
	//
	//Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Красный);	
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьВыборПФДляВидаДокумента( ВидОбъекта )
	МассивПечатныхФорм	= Новый Массив();
	мВыбрПечатныхФорм = ВложенияТекущегоТипаДокумента.НайтиСтроки( Новый Структура("ОтметкаВыбора, ВидОбъекта", Истина, ВидОбъекта) );
	Для Каждого ПФорма из мВыбрПечатныхФорм Цикл
		МассивПечатныхФорм.Добавить( ПФорма.Представление );
	КонецЦикла;
	
	//Обновим отметки в глобальной таблице ПечатныхФорм
	мВыбрПечатныхФорм = ВложенияТекущегоТипаДокумента.НайтиСтроки( Новый Структура("ВидОбъекта", ВидОбъекта) );
	Для Каждого ПФорма из мВыбрПечатныхФорм Цикл
		мПФ	= ВложенияПоТипамДокументов.НайтиСтроки( Новый Структура("Представление, ВидОбъекта", ПФорма.Представление, ВидОбъекта) );
		Для Каждого СтрокаВл Из мПФ Цикл
			СтрокаВл.ОтметкаВыбора = ПФорма.ОтметкаВыбора;
			Прервать;
		КонецЦикла;
	КонецЦикла;
	ХранилищеОбщихНастроек.Сохранить("Saby_ПФ_КОтправке", ВидОбъекта, МассивПечатныхФорм,,);
КонецПроцедуры

&НаСервере
Функция ПрочитатьВыборПФДляВидаДокумента( ВидОбъекта )
	МассивПечатныхФорм = ХранилищеОбщихНастроек.Загрузить("Saby_ПФ_КОтправке", ВидОбъекта,,);
	Если ТипЗнч(МассивПечатныхФорм) = Тип("Массив") Тогда
		Для Каждого ПФорма из МассивПечатныхФорм Цикл
			//Обновим общие данные
			мПФ	= ВложенияПоТипамДокументов.НайтиСтроки( Новый Структура("Представление, ВидОбъекта", ПФорма, ВидОбъекта) );
			Для Каждого СтрокаВл Из мПФ Цикл
				СтрокаВл.ОтметкаВыбора = Истина;
			КонецЦикла;
			//Обновим данные на форме
			мПФ	= ВложенияТекущегоТипаДокумента.НайтиСтроки( Новый Структура("Представление, ВидОбъекта", ПФорма, ВидОбъекта) );
			Для Каждого СтрокаВл Из мПФ Цикл
				СтрокаВл.ОтметкаВыбора = Истина;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ЗаполнитьСписокРегламентов(ВидОбъекта)
	Элементы.Регламент.СписокВыбора.Очистить();
	Отбор = Новый Структура("ВидОбъекта", ВидОбъекта);
    СтрокиРегламента = РегламентПоТипамДокументов.НайтиСтроки(Отбор);
	Для Каждого Регл Из СтрокиРегламента Цикл
		_Строка = Элементы.Регламент.СписокВыбора.Добавить();
		_Строка.Значение = Регл.Регламент.Значение;
		_Строка.Представление = Регл.Регламент.Представление;	
	КонецЦикла;
	
	СтрокиРегл = РегламентТекущегоТипаДокумента.НайтиСтроки(Отбор);
	Если СтрокиРегл.Количество() > 0 Тогда
		Для каждого Регл из СтрокиРегл Цикл
			Регламент = Регл.Регламент;
		КонецЦикла;
	Иначе	
		Регламент = Элементы.Регламент.СписокВыбора[0].Значение;
	КонецЕсли;	
	ЗаписатьВыбранныйРегламент(Регламент, ВидОбъекта);
КонецПроцедуры	

&НаСервере
Функция ПолучитьСписокРегламентов(ВидОбъекта) 
	МодульОбъекта	= ПолучитьМодульОбъекта();
	context_params	= МодульОбъекта.ПроверитьНаличиеПараметровПодключения();
	
	ОбъектСБИС = ПолучитьИзОбъекта1СОбъектСБИС(ВидОбъекта);
	ТипыДокументов = Новый Массив;
	ТипыДокументов.Добавить(ОбъектСБИС);
		
	Возврат МодульОбъекта.local_helper_regl_get_by_types(context_params, ТипыДокументов);
КонецФункции

&НаСервере
Процедура ЗаписатьВыбранныйРегламент(ВыбранныйРегламент, ВидОбъекта)
	Отбор = Новый Структура("ВидОбъекта", ВидОбъекта);
    СтрокиРегл = РегламентТекущегоТипаДокумента.НайтиСтроки(Отбор);
	Если СтрокиРегл.Количество() > 0 Тогда
		Для каждого Регл из СтрокиРегл Цикл
			Регл.Регламент = ВыбранныйРегламент;
			Регл.ВидОбъекта = ВидОбъекта;
		КонецЦикла;
	Иначе	
		ТекущийРегламент = РегламентТекущегоТипаДокумента.Добавить();
		ТекущийРегламент.Регламент = ВыбранныйРегламент;
		ТекущийРегламент.ВидОбъекта = ВидОбъекта;  
	КонецЕсли;	
КонецПроцедуры
	
&НаСервере
Процедура ДобавитьПараметрыВОбщиеНастройки(context_params, СтруктураПараметров)
	МодульОбъекта = ПолучитьМодульОбъекта();
	ОбщиеНастройки	= МодульОбъекта.ОбщиеНастройкиПрочитать();
	ПубличныеОбщиеНастройки	= get_prop(ОбщиеНастройки, "public", Новый Структура);
	Для каждого ЭлемСтруктуры из СтруктураПараметров Цикл
		ПубличныеОбщиеНастройки.Вставить(ЭлемСтруктуры.Ключ, ЭлемСтруктуры.Значение);
	КонецЦикла;
	ОбщиеНастройки.Вставить("public", ПубличныеОбщиеНастройки);
	МодульОбъекта.ОбщиеНастройкиЗаписать(ОбщиеНастройки);
	context_params["public"] = ПубличныеОбщиеНастройки;
КонецПроцедуры
	
&НаСервере
Функция ПолучитьИзОбъекта1СОбъектСБИС(ВидОбъекта)
	Если ВидОбъекта = "БольничныйЛист" Тогда
		Возврат "Allowance";
	ИначеЕсли ВидОбъекта = "ГрафикОтпусков" Тогда
		Возврат "Согласование";
	ИначеЕсли ВидОбъекта = "ДоговорРаботыУслуги" Тогда
		Возврат "ПриемНаРаботу";
	ИначеЕсли ВидОбъекта = "ИзменениеГрафикаРаботыСписком" Тогда
		Возврат "ИзмененияОклада";
	ИначеЕсли ВидОбъекта = "ИзменениеОплатыТруда" Тогда
		Возврат "ИзмененияОклада";
	ИначеЕсли ВидОбъекта = "ИзменениеПлановыхНачислений" Тогда
		Возврат "ИзмененияОклада";
	ИначеЕсли ВидОбъекта = "ИндексацияЗаработка" Тогда
		Возврат "Indexation";
	ИначеЕсли ВидОбъекта = "КадровыйПеревод" Тогда
		Возврат "ИзмененияДолжности";
	ИначеЕсли ВидОбъекта = "КадровыйПереводСписком" Тогда
		Возврат "ИзмененияДолжности";
	ИначеЕсли ВидОбъекта = "Командировка" Тогда
		Возврат "BusinessTrip";
	ИначеЕсли ВидОбъекта = "КомандировкиСотрудников" Тогда
		Возврат "BusinessTrip";
	ИначеЕсли ВидОбъекта = "ОплатаПоСреднемуЗаработку" Тогда
		Возврат "Отпуск";
	ИначеЕсли ВидОбъекта = "ОплатаПоСреднемуЗаработкуСписком" Тогда
		Возврат "Отпуск";
	ИначеЕсли ВидОбъекта = "Отгул" Тогда
		Возврат "Отгул";
	ИначеЕсли ВидОбъекта = "ОтгулСписком" Тогда
		Возврат "Отгул";
	ИначеЕсли ВидОбъекта = "Отпуск" Тогда
		Возврат "Отпуск";
	ИначеЕсли ВидОбъекта = "ОтпускаСотрудников" Тогда
		Возврат "Отпуск";
	ИначеЕсли ВидОбъекта = "ОтпускБезСохраненияОплаты" Тогда
		Возврат "Отпуск";
	ИначеЕсли ВидОбъекта = "ОтпускБезСохраненияОплатыСписком" Тогда
		Возврат "Отпуск";
	ИначеЕсли ВидОбъекта = "ОплатаДнейУходаЗаДетьмиИнвалидами" Тогда
		Возврат "Отпуск";
	ИначеЕсли ВидОбъекта = "ОтпускПоУходуЗаРебенком" Тогда
		Возврат "Allowance";
	ИначеЕсли ВидОбъекта = "ПереводНаРаботуСКоронавирусом" Тогда
		Возврат "ИзмененияДолжности";
	ИначеЕсли ВидОбъекта = "ПеремещениеВДругоеПодразделение" Тогда
		Возврат "ИзмененияДолжности";
	ИначеЕсли ВидОбъекта = "ПеремещениеМеждуТерриториями" Тогда
		Возврат "ИзмененияДолжности";
	ИначеЕсли ВидОбъекта = "ПереносОтпуска" Тогда
		Возврат "PlanVacationScheduleChange";
	ИначеЕсли ВидОбъекта = "ПриемНаРаботу" Тогда
		Возврат "ПриемНаРаботу";
	ИначеЕсли ВидОбъекта = "ПриемНаРаботуСписком" Тогда
		Возврат "ПриемНаРаботу";
	ИначеЕсли ВидОбъекта = "ПрогулНеявка" Тогда
		Возврат "Прогул";
	ИначеЕсли ВидОбъекта = "ПрогулНеявкаСписком" Тогда
		Возврат "Прогул";
	ИначеЕсли ВидОбъекта = "ПрогулНеявкаСписком" Тогда
		Возврат "Прогул";
	ИначеЕсли ВидОбъекта = "РаботаВВыходныеИПраздничныеДни" Тогда
		Возврат "Переработка";
	ИначеЕсли ВидОбъекта = "РаботаСверхурочно" Тогда
		Возврат "Переработка";
	ИначеЕсли ВидОбъекта = "РегистрацияПереработок" Тогда
		Возврат "Переработка";
	ИначеЕсли ВидОбъекта = "ТабельУчетаРабочегоВремени" Тогда
		Возврат "ТабельДокумент";
	ИначеЕсли ВидОбъекта = "Увольнение" Тогда
		Возврат "ПриказНаУвольнение";
	ИначеЕсли ВидОбъекта = "УвольнениеСписком" Тогда
		Возврат "ПриказНаУвольнение";
	ИначеЕсли ВидОбъекта = "МатериальнаяПомощь" Тогда
		Возврат "НачисленияПоЗарплате";
	ИначеЕсли ВидОбъекта = "Премия" Тогда
		Возврат "Поощрение";
	ИначеЕсли ВидОбъекта = "Совмещение" Тогда
		Возврат "CombinationPositions";
	ИначеЕсли ВидОбъекта = "АктПриемкиВыполненныхРаботОказанныхУслуг" Тогда
		Возврат "GphAct";
	ИначеЕсли ВидОбъекта = "ПростойСотрудников" Тогда
		Возврат "Простой";
	Иначе
		Возврат ВидОбъекта;
	КонецЕсли;	
КонецФункции	
&НаСервере
Процедура УстановитьЗаголовокФормы(КоличествоДок, ПервыйДок)
	//Элементы.ГрПредпросмотр.Видимость = (КоличествоДок = 1);
	//Элементы.ГрСписокДокументов.Видимость = НЕ (КоличествоДок = 1);
	Если КоличествоДок = 1 Тогда 
		ЭтаФорма.Заголовок	= "Отправка в SABY "+ СокрЛП(ПервыйДок.Ссылка);
	Иначе
		ЭтаФорма.Заголовок	= "Отправка документов в SABY";
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ЗаполнитьСписокПФПоТблДокументов()
	
	ВыремТаблМД	= Объекты.Выгрузить(,"Объект");
	ВыремТаблМД.Колонки.Добавить("ОбъектМД");
	Для Каждого СтрДокум Из ВыремТаблМД Цикл
		СтрДокум.ОбъектМД	= СтрДокум.Объект.Метаданные();
	КонецЦикла;
	ВыремТаблМД.Свернуть("ОбъектМД");
	
	Для Каждого СтрДокум Из ВыремТаблМД Цикл
		Попытка
			КомандыПечатиФормыВр	= УправлениеПечатью.КомандыПечатиОбъекта(СтрДокум.ОбъектМД);
		Исключение
			//У объекта в менеджере объекта отсутствует процедура - ДобавитьКомандыПечати 
			Продолжить;
		КонецПопытки;
		
		ДобавленныеПФ = Новый Соответствие();
		//Общие ПФ формы
		ИспКомандыПФ = КомандыПечатиФормыВр.НайтиСтроки( Новый Структура("Отключена, СкрытаФункциональнымиОпциями, СписокФорм", Ложь, Ложь, "" ) );
		Для Каждого КомандаПечати Из ИспКомандыПФ Цикл
			//Отключим дублирование ПФ, используются при включении ФО - "Работа в росии"
			Если Найти(КомандаПечати.Обработчик, "КадровыйЭДОКлиент") > 0 Тогда Продолжить; КонецЕсли;
			Если ДобавленныеПФ[КомандаПечати.Представление] <> Неопределено Тогда Продолжить; КонецЕсли;
			ДобавленныеПФ.Вставить(КомандаПечати.Представление, Истина);
			
			КомандаП = Новый Структура("Обработчик, ДополнительныеПараметры, МенеджерПечати, Идентификатор, Представление, ПроверкаПроведенияПередПечатью, ПроверкаПроведенияПередПечатью, ФункциональныеОпции",);
			ЗаполнитьЗначенияСвойств(КомандаП, КомандаПечати);
			НоваяПФ					= ВложенияПоТипамДокументов.Добавить();
			НоваяПФ.Представление	= КомандаПечати.Представление;
			НоваяПФ.ТипВложения     = "ПечатнаяФорма";
			НоваяПФ.ИндексКартинки	= 0;
			НоваяПФ.ВидОбъекта		= СтрДокум.ОбъектМД.Имя;
			НоваяПФ.Команда			= КомандаП;
		КонецЦикла;
		
		//ПФ для списка ПФ формы //Может нужнгы ПФ для объекта???
		ИспКомандыПФ = КомандыПечатиФормыВр.НайтиСтроки( Новый Структура("Отключена, СкрытаФункциональнымиОпциями, СписокФорм", Ложь, Ложь, "ФормаСписка" ) );
		Для Каждого КомандаПечати Из ИспКомандыПФ Цикл
			//Отключим дублирование ПФ, используются при включении ФО - "Работа в росии"
			Если Найти(КомандаПечати.Обработчик, "КадровыйЭДОКлиент") > 0 Тогда Продолжить; КонецЕсли;
			Если ДобавленныеПФ[КомандаПечати.Представление] <> Неопределено Тогда Продолжить; КонецЕсли;
			ДобавленныеПФ.Вставить(КомандаПечати.Представление, Истина);
			
			КомандаП = Новый Структура("Обработчик, ДополнительныеПараметры, МенеджерПечати, Идентификатор, Представление, ПроверкаПроведенияПередПечатью, ПроверкаПроведенияПередПечатью, ФункциональныеОпции",);
			ЗаполнитьЗначенияСвойств(КомандаП, КомандаПечати);
			НоваяПФ					= ВложенияПоТипамДокументов.Добавить();
			НоваяПФ.Представление	= КомандаПечати.Представление;
			НоваяПФ.ТипВложения     = "ПечатнаяФорма";
			НоваяПФ.ИндексКартинки	= 0;
			НоваяПФ.ВидОбъекта		= СтрДокум.ОбъектМД.Имя;
			НоваяПФ.Команда			= КомандаП;
		КонецЦикла;
	КонецЦикла;
	
КонецФункции 

&НаСервере
Процедура ЗаполнитьТЗДоступныхРегламентов()
	ПоискСовпаденийТипаОбъекта = "";

	Для Каждого СтрДокум Из Объекты Цикл
		ИмяТипаДокумента = СтрДокум.ВидОбъекта;
		Если Найти(ПоискСовпаденийТипаОбъекта, ИмяТипаДокумента+";") > 0 Тогда
			Продолжить;
		Иначе
			ПоискСовпаденийТипаОбъекта = ПоискСовпаденийТипаОбъекта + ИмяТипаДокумента+";";	
		КонецЕсли;	
		
		НовыйРегл = РегламентПоТипамДокументов.Добавить();
		НовыйРегл.Регламент = Новый Структура("Значение, Представление, ПроизвольноеНазваниеРегламента",
		"", 
		Новый ФорматированнаяСтрока("По умолчанию", Новый Шрифт(,, Истина)),
		Ложь);
		НовыйРегл.ВидОбъекта = ИмяТипаДокумента;
		
		СписокРегламентов = ПолучитьСписокРегламентов(ИмяТипаДокумента);
		Для каждого Регл из СписокРегламентов Цикл
			НовыйРегл = РегламентПоТипамДокументов.Добавить();
			НовыйРегл.Регламент = Новый Структура("Значение, Представление, ПроизвольноеНазваниеРегламента",
													Регл["Name"] + "[/" + Регл["DocType"] + "/]", 
													Новый ФорматированнаяСтрока(Регл["Name"], Новый Шрифт(,, Истина)), 
													Ложь);
			НовыйРегл.ВидОбъекта = ИмяТипаДокумента; 
		КонецЦикла;
		
		СписокРегламентов = ПолучитьСписокРегламентов("CadresOther");
		Для каждого Регл из СписокРегламентов Цикл		
			НовыйРегл = РегламентПоТипамДокументов.Добавить();
			НовыйРегл.Регламент = Новый Структура("Значение, Представление, ПроизвольноеНазваниеРегламента",
													Регл["Name"] + "[/ПрочийКадровыйДокумент/]", 
													Новый ФорматированнаяСтрока(Регл["Name"], Новый Шрифт(,, Ложь)), 
													get_prop(get_prop(Регл,"AdditionalData", Новый Соответствие), "DocOtherCustomTitle", Ложь));
			НовыйРегл.ВидОбъекта = ИмяТипаДокумента; 
		КонецЦикла;
	КонецЦикла;	
КонецПроцедуры	

&НаСервере
Процедура ПослеВыполненияЗадания(Результат, ДопПараметры) Экспорт
	Сообщить("ПослеВыполненияЗадания");
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьВСБИС_ПослеАутентификации(Результат, Параметры) Экспорт 
	Если Результат <> Неопределено Тогда
		ЗагрузитьВСБИС( Параметры.Команда );
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ЗаполнитьСтруктуруПечатныхФормДляПередачиНаСервере()
	МодульОбработки = ПолучитьМодульОбъекта();
	Возврат МодульОбработки.ЗаполнитьСтруктуруПечатныхФормДляПередачи(ВложенияПоТипамДокументов);
КонецФункции

#Область ЗагрузитьВСБИС

&НаКлиенте
Процедура ЗагрузитьВСБИС(Команда)
	
	Отказ	= Ложь;
	context_params	= Saby_Core.ПроверитьНаличиеПараметровПодключения();

	Если context_params = Неопределено Тогда
		ВходяшиеПараметры	= Новый Структура("Команда",Команда);
		ПроверкаВведенныхДанныхАутентификации = Новый ОписаниеОповещения("ЗагрузитьВСБИС_ПослеАутентификации", ЭтаФорма, ВходяшиеПараметры);
		ОткрытьФорму("Обработка.SABY.Форма.Вход",,,,,, ПроверкаВведенныхДанныхАутентификации);
		Возврат;
	КонецЕсли;	
	
	ВыбранныеПечатныеФормы = ЗаполнитьСтруктуруПечатныхФормДляПередачиНаСервере();
	
	ОбрабатываемыеОбъекты = Новый Массив();
	
	мИсполнители = Новый Массив;
	Если ПростойЗапросПодписи Тогда
		Для Каждого Исполнитель Из СписокИсполнителей Цикл
			Если Исполнитель.Сотрудник.Пустая() Тогда Продолжить; КонецЕсли;
			мИсполнители.Добавить(Новый Структура("ФИО, ТабельныйНомер, Роль", СокрЛП(Исполнитель.Сотрудник), get_prop(Исполнитель.Сотрудник, "Код"), ?(ЗначениеЗаполнено(Исполнитель.Роль), Исполнитель.Роль, "Сотрудник")));
		КонецЦикла;
	КонецЕсли;
		
	ТипМетаданных = ПолучитьТипМетаданных(Объекты[0].Объект);
	Для Каждого ВыгружаемыйДокумент Из Объекты Цикл
		
		Отбор = Новый Структура("ВидОбъекта", ВыгружаемыйДокумент.ВидОбъекта);
    	СписокРегламентов = РегламентТекущегоТипаДокумента.НайтиСтроки(Отбор);
		Для каждого Регл из СписокРегламентов Цикл
		 	ПолноеНазваниеРегламента = Регл.Регламент;	
		КонецЦикла;
		НазваниеРегламента = Лев(ПолноеНазваниеРегламента, Найти(ПолноеНазваниеРегламента,"[/") - 1);
		
		Если ЗначениеЗаполнено(ВыгружаемыйДокумент.ИмяИни) Тогда
			ИмяИни = "СинхВыгрузка_"+ВыгружаемыйДокумент.ИмяИни;
		ИначеЕсли Найти(ПолноеНазваниеРегламента, "ПрочийКадровыйДокумент") > 0 Тогда
			ИмяИни = "СинхВыгрузка_ПрочийКадровыйДокумент"+ВыгружаемыйДокумент.ВидОбъекта;
		Иначе	
			ИмяИни = "СинхВыгрузка_"+ВыгружаемыйДокумент.ВидОбъекта;	
		КонецЕсли;
		
		API3_ref = Новый Структура;
		API3_ref.Вставить("ИдИС",			СокрЛП(ВыгружаемыйДокумент.Объект.УникальныйИдентификатор()) );
		API3_ref.Вставить("ТипИС",			ТипМетаданных );
		API3_ref.Вставить("ИмяИС",			ВыгружаемыйДокумент.ВидОбъекта );
		API3_ref.Вставить("ini_name",		ИмяИни );
		API3_ref.Вставить("Название",		СокрЛП(ВыгружаемыйДокумент.Объект) );
		API3_ref.Вставить("Регламент",		?(ЗначениеЗаполнено(НазваниеРегламента), НазваниеРегламента, Неопределено) );
		API3_ref.Вставить("ПроизвольноеНазваниеРегламента",		?(ЗначениеЗаполнено(ПроизвольноеНазваниеРегламента) и Элементы.ПроизвольноеНазваниеРегламента.Видимость, ПроизвольноеНазваниеРегламента, Неопределено) );
		API3_ref.Вставить("_print_forms",	?(ВыбранныеПечатныеФормы.Свойство(ВыгружаемыйДокумент.ВидОбъекта),ВыбранныеПечатныеФормы[ВыгружаемыйДокумент.ВидОбъекта],Неопределено));
		ОбрабатываемыеОбъекты.Добавить(API3_ref);
	КонецЦикла; 
	
	ПараметрыВызова = Новый Структура("МассивОбъектов, Исполнители, ПростойЗапросПодписи, КаналИнформации, МаршрутОзнакомления",
		ОбрабатываемыеОбъекты, 
		мИсполнители, 
		ПростойЗапросПодписи, 
		?(ЗначениеЗаполнено(КаналИнформации), КаналИнформации, 0), 
		?(ЗначениеЗаполнено(МаршрутОзнакомления), МаршрутОзнакомления, 0));
	
	Контекст = Новый Структура;
	Контекст.Вставить("ПараметрыВызова", ПараметрыВызова);
	Контекст.Вставить("context_params", context_params);
	ОбработчикРезультата = Новый ОписаниеОповещения(
		"ЗагрузитьВСБИСПослеОбновленияКэшаЛокальныхСертификатов", ЭтотОбъект, Контекст);
	
	ОбновитьКэшЛокальныхСертификатов(ОбработчикРезультата);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьВСБИСПослеОбновленияКэшаЛокальныхСертификатов(РезультатОбновленияКеша, Контекст) Экспорт
	
	Saby_ФоновыеЗаданияКлиент.ЗапуститьINIФоновымЗаданием("Документы_send", Контекст.ПараметрыВызова, Контекст.context_params, ЭтаФорма.ВладелецФормы, "Отправка в SABY");
	
	ЭтаФорма.Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область ТаблицаПечатныхФормИФормированиеПредпросмотра

&НаСервере
Функция СформироватьПФНаСервере(КомандаПечати, ВыбранныйДокумент )
	
	ПараметрыПечати = Новый Структура("ДополнитьКомплектВнешнимиПечатнымиФормами", Ложь);
	ОбъектыПечати = Новый Массив;
	ОбъектыПечати.Добавить( ВыбранныйДокумент );	
	
	ВзТабличныйДокумент = "";
	// Формирование табличных документов.
	Если Найти(КомандаПечати.Менеджерпечати, "ДополнительныеОтчетыИОбработки") > 0 Тогда
		СсылкаНаПечатнуюФорму	= КомандаПечати.ДополнительныеПараметры.Ссылка;
		Если СсылкаНаПечатнуюФорму.Пустая() Тогда ВызватьИсключение("Отсутствует внешняя печатная форма.") КонецЕсли;
		ПараметрыВызова	= Новый Структура("ИдентификаторКоманды, ОбъектыНазначения", КомандаПечати.Идентификатор, ОбъектыПечати);
		ПечатныеФормы	= Неопределено;
		ОбъектыПечати	= Новый СписокЗначений;
		ПараметрыВывода	= Неопределено;
		Попытка
		УправлениеПечатью.ПечатьПоВнешнемуИсточнику(
			СсылкаНаПечатнуюФорму,
			ПараметрыВызова,
			ПечатныеФормы,
			ОбъектыПечати,
			ПараметрыВывода
			);
		Исключение
			ПечатныеФормы = Новый Массив;
		КонецПопытки;
		Для Каждого ПФ Из ПечатныеФормы Цикл
			ВзТабличныйДокумент = ПоместитьВоВременноеХранилище(ПФ.ТабличныйДокумент, Новый УникальныйИдентификатор);
			Прервать;
		КонецЦикла; 
	Иначе
		Попытка
			ПечатныеФормы = УправлениеПечатью.СформироватьПечатныеФормы(КомандаПечати.МенеджерПечати, КомандаПечати.Идентификатор,
			ОбъектыПечати, ПараметрыПечати);
		Исключение
			ПечатныеФормы = Неопределено;
		КонецПопытки;
		
		Если 	ТипЗнч(ПечатныеФормы) = Тип("Структура") И ПечатныеФормы.Свойство("КоллекцияПечатныхФорм") Тогда
			Для Каждого ПФ Из ПечатныеФормы.КоллекцияПечатныхФорм Цикл
				ВзТабличныйДокумент = ПоместитьВоВременноеХранилище(ПФ.ТабличныйДокумент, Новый УникальныйИдентификатор);
				Прервать;
			КонецЦикла;
		КонецЕсли;		
	КонецЕсли;
	
	Возврат ВзТабличныйДокумент;
	
КонецФункции

&НаСервере
Функция ОтобразитьПФ( АдресТД )
	Предпросмотр.Очистить();
	Если НЕ ПустаяСтрока(АдресТД)Тогда
		ВрТабличныйДок = ПолучитьИзВременногоХранилища(АдресТД);
		Если ТипЗнч(ВрТабличныйДок) = Тип("ТабличныйДокумент") Тогда
			Предпросмотр.Вывести(ВрТабличныйДок);
		КонецЕсли;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура СформироватьПФ()
	//А нужно ли это условие???
	ТД = Элементы.ВложенияТипаДокумента.ТекущиеДанные;
	Если Объекты.Количество() = 1 Тогда
		ТД.АдресПревьюВХранилище = СформироватьПФНаСервере(ТД.Команда, Объекты[0].Объект);
	Иначе
		ТД.АдресПревьюВХранилище = СформироватьПФНаСервере(ТД.Команда, Элементы.Объекты.ТекущиеДанные.Объект);
	КонецЕсли;
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВложенийОтметкаПриИзменении(Элемент)
	ТД = Элементы.ВложенияТипаДокумента.ТекущиеДанные;
	ИдСтроки = ТД.ПолучитьИдентификатор();
	//ОтобразитьПФ( ?(ТД.ОтметкаВыбора, ТД.ПФ, "") );
	//ЗаполнитьКоментарииДокументовКОтправке();
	Если Объекты.Количество() = 1 Тогда
		ЗаписатьВыборПФДляВидаДокумента(Объекты[0].ВидОбъекта);
	Иначе
		ЗаписатьВыборПФДляВидаДокумента(Элементы.Объекты.ТекущиеДанные.ВидОбъекта);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВложенийПриАктивизацииСтроки(Элемент)
	ТД = Элементы.ВложенияТипаДокумента.ТекущиеДанные;
	Если ТД = Неопределено ИЛИ ТД.ТипВложения <> "ПечатнаяФорма"  Тогда Возврат; КонецЕсли;
	//Пока печать только по двойному клику на строчке печатной формы
	
	//Если ДокументыКОтправке.Количество() = 1 Тогда
	//	ТД.ПФ = СформироватьПФНаСервере(ТД.Команда, ДокументыКОтправке[0].Документ);
	//Иначе
	//	ТД.ПФ = СформироватьПФНаСервере(ТД.Команда, Элементы.ДокументыКОтправке.ТекущиеДанные.Документ);
	//КонецЕсли;
	//ЗаполнитьКоментарииДокументовКОтправке();
	ОтобразитьПФ(ТД.АдресПревьюВХранилище);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВложенийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТД = Элементы.ВложенияТипаДокумента.ТекущиеДанные;
	Если ТД = Неопределено ИЛИ ТД.ТипВложения <> "ПечатнаяФорма"  Тогда Возврат; КонецЕсли;
	СформироватьПФ();
	ОтобразитьПФ(ТД.АдресПревьюВХранилище);
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ЗаполнитьКоментарииДокументовКОтправке()
	
	//ТД_ПФ = Элементы.ТаблицаВложений.ТекущиеДанные;
	//МДокументов = ДокументыКОтправке.НайтиСтроки( Новый СТруктура("ВидОбъекта"), ТД_ПФ.ВидОбъекта );
	//Если МДокументов.Количество() > 0 Тогда
	//	ТипПервогоДокумента = МДокументов.Документ.Метаданные().Имя;
	//Иначе
	//	//Э... так быть не должОн.
	//	Возврат;
	//КонецЕсли;
	//СписокПФСтрокой	= "";
	//мВыбрПечатныхФорм = ТаблицаВложений.НайтиСтроки( Новый Структура("ОтметкаВыбора", Истина) );
	//Для Каждого ПФорма из мВыбрПечатныхФорм Цикл
	//	СписокПФСтрокой	= СписокПФСтрокой + ПФорма.Представление + ",";
	//КонецЦикла;
	//Для Каждого УказательДок Из ДокументыКОтправке Цикл
	//	Если ТипПервогоДокумента <> УказательДок.Документ.Метаданные().Имя Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	УказательДок.Комментарий	= СписокПФСтрокой;
	//КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФильтрПФПоТипуДокумента(ВидОбъекта)
	ВложенияТекущегоТипаДокумента.Очистить();
	Отбор = Новый Структура("ВидОбъекта", ВидОбъекта);
    СтрокиПФ = ВложенияПоТипамДокументов.НайтиСтроки(Отбор);
	Для Каждого СтрокаДокПФ Из СтрокиПФ Цикл
		ЗаполнитьЗначенияСвойств(ВложенияТекущегоТипаДокумента.Добавить(), СтрокаДокПФ);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКОтправкеПриАктивизацииСтроки(Элемент)
	ТД = Элементы.Объекты.ТекущиеДанные;
	ВложенияТекущегоТипаДокумента.Очистить();
	Если ТД = Неопределено Тогда Возврат; КонецЕсли;
	УстановитьФильтрПФПоТипуДокумента(ТД.ВидОбъекта);
	ПрочитатьВыборПФДляВидаДокумента(ТД.ВидОбъекта);
	ЗаполнитьСписокРегламентов(ТД.ВидОбъекта);
	УстановитьПроизвольноеНазваниеРегламента();
КонецПроцедуры

&НаСервере
Процедура УдалитьСтрокуВыбранногоОбъекта(ИдентификаторыСтрок)
	Для Каждого ИдентификаторСтроки Из ИдентификаторыСтрок Цикл
		СтрокаТЧ = Объекты.НайтиПоИдентификатору(ИдентификаторСтроки);
		Объекты.Удалить(СтрокаТЧ);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОтветНаВопросОбУдаленииВыгружаемыхОбъектов(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если Объекты.Количество() = Параметры.Количество() Тогда
			//Удалены все объекты, имеет смысл сразу же закрыть форму
			Закрыть();
		Иначе
			Если Параметры.Количество() > 0 Тогда
				УдалитьСтрокуВыбранногоОбъекта(Параметры);	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	ИдентификаторыСтрок = Новый Массив;
	Для Каждого ИдСтроки Из Элемент.ВыделенныеСтроки Цикл
		ИдентификаторыСтрок.Добавить(ИдСтроки);
	КонецЦикла;
	Оповещение = Новый ОписаниеОповещения(
		"ПроверитьОтветНаВопросОбУдаленииВыгружаемыхОбъектов",
		ЭтаФорма,
		ИдентификаторыСтрок	
	);
	ПоказатьВопрос(
		Оповещение,
		"Удалить выбранные объекты из списка отправляемых?",
		РежимДиалогаВопрос.ДаНет,
		0,
		КодВозвратаДиалога.Нет,
		"Удаление объектов из списка."
	);
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВложениеНаСервере(ИмяТаблицы, ВидОбъекта, ТипВложения, Представление)
	мСтрокКУдалению = ЭтотОбъект[ИмяТаблицы].НайтиСтроки(Новый Структура("ВидОбъекта, ТипВложения, Представление", ВидОбъекта, ТипВложения, Представление));
	Если мСтрокКУдалению.Количество() > 0 Тогда
		//удаляем обратным перебором, т.к. индекс строк меняется
		ВсегоСтрок = мСтрокКУдалению.Количество() - 1;
		Для СчетСтрок = 0 По ВсегоСтрок Цикл
			СтрокаКУдалению = мСтрокКУдалению[ВсегоСтрок-СчетСтрок];
			СтрокаКУдалению = ЭтаФорма[ИмяТаблицы].НайтиПоИдентификатору(СтрокаКУдалению.ПолучитьИдентификатор());
			ЭтаФорма[ИмяТаблицы].Удалить(СтрокаКУдалению);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры	

&НаКлиенте
Процедура УдалитьВложение(Команда)
	ДанныеСтроки = Элементы.ВложенияТипаДокумента.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено ИЛИ ДанныеСтроки.ТипВложения = "ПечатнаяФорма" Тогда
		Возврат;
	КонецЕсли;
	//Удаление из общей таблицы
	УдалитьВложениеНаСервере("ВложенияПоТипамДокументов", ДанныеСтроки.ВидОбъекта, ДанныеСтроки.ТипВложения,ДанныеСтроки.Представление);
	//Удаление из таблицы на форме
	УдалитьВложениеНаСервере("ВложенияТекущегоТипаДокумента", ДанныеСтроки.ВидОбъекта, ДанныеСтроки.ТипВложения,ДанныеСтроки.Представление);
КонецПроцедуры

&НаСервере
Процедура РегламентПриИзмененииНаСервере(ВидОбъекта)
	ЗаписатьВыбранныйРегламент(Регламент, ВидОбъекта);
КонецПроцедуры

&НаКлиенте
Процедура РегламентПриИзменении(Элемент)
	УстановитьПроизвольноеНазваниеРегламента();
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИмяФайла(ПолноеИмяФайла)
	ТолькоПуть = ПолноеИмяФайла;
	Счетчик = СтрНайти(ПолноеИмяФайла, "\", НаправлениеПоиска.СКонца);
	Если Счетчик > 1 Тогда
		ТолькоПуть = Сред(ПолноеИмяФайла, Счетчик + 1);
	КонецЕсли;
	Возврат ТолькоПуть;
КонецФункции

#Область include_core_src_Helpers_ОпределениеТиповКонтента
#КонецОбласти

&НаКлиенте
Процедура ВыборФайлаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы <> Неопределено Тогда
		ИндексКартинки = 0;
		Для каждого ВыбранныйФайл из ВыбранныеФайлы Цикл
			ВидОбъекта				= Элементы.Объекты.ТекущиеДанные.ВидОбъекта;
			
			#Если ВебКлиент Тогда
				ИмяФайла				= ПолучитьИмяФайла(ВыбранныйФайл.Имя);
	        #Иначе
				ИмяФайла				= ПолучитьИмяФайла(ВыбранныйФайл.ПолноеИмя);
	        #КонецЕсли
			ТипФайла				= ПолучитьТипФайла(ИмяФайла);
			ИмяФайлаБезРаширения	= СтрЗаменить(ИмяФайла, "."+ТипФайла, "");
			
			НоваяПФ					= ВложенияПоТипамДокументов.Добавить();
			НоваяПФ.ОтметкаВыбора	= Истина;
			НоваяПФ.Представление	= ИмяФайлаБезРаширения;
			НоваяПФ.ТипВложения     = "ФайлСДиска";
			НоваяПФ.ИндексКартинки	= ИндексКартинки;
			НоваяПФ.ВидОбъекта		= ВидОбъекта;
			
			#Если ВебКлиент Тогда
				ФайлДД				= ПолучитьИзВременногоХранилища(ВыбранныйФайл.Хранение);
				ФайлBase64			= Base64Строка(ФайлДД);
				АдресВХранилище		= ПоместитьВоВременноеХранилище(ФайлBase64, Новый УникальныйИдентификатор);
	        #Иначе
				ФайлДД				= Новый ДвоичныеДанные(ВыбранныйФайл.ПолноеИмя);
				ФайлBase64			= Base64Строка(ФайлДД);
				АдресВХранилище		= ПоместитьВоВременноеХранилище(ФайлBase64, Новый УникальныйИдентификатор);
	        #КонецЕсли
			
			НоваяПФ.Команда			= Новый Структура("ИмяФайла, АдресВХранилище",ИмяФайла, АдресВХранилище);
			УстановитьФильтрПФПоТипуДокумента(ВидОбъекта);			ИндексКартинки = ИндексКартинки + 1;
		КонецЦикла	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложение(Команда)
	СтандартнаяОбработка = Ложь;
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Фильтр = НСтр("ru=’Любой файл (*.*)|*.*'");
	Диалог.Заголовок = НСтр("ru=’Выберите файл'");
	Диалог.МножественныйВыбор = Истина;
	ОбработкаОкончанияЗагрузки = Новый ОписаниеОповещения("ВыборФайлаЗавершение", ЭтаФорма, Диалог);
	НачатьПомещениеФайлов(ОбработкаОкончанияЗагрузки, , Диалог, Истина, УникальныйИдентификатор);
КонецПроцедуры

&НаСервере
Функция ПолучитьИмяПрисоединенногоФайла(СсылкаНаПрисоединенныйФайл) Экспорт
	Возврат СсылкаНаПрисоединенныйФайл.Наименование;
КонецФункции

&НаКлиенте
Процедура ОбработкаВыбораВложения(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ТипЗнч(ВыбранныеФайлы) = Тип("Массив") Тогда
		Для Каждого СсылкаНаПрисоединенныйФайл Из ВыбранныеФайлы Цикл
			ВидОбъекта				= Элементы.Объекты.ТекущиеДанные.ВидОбъекта;
			
			НоваяПФ					= ВложенияПоТипамДокументов.Добавить();
			НоваяПФ.ОтметкаВыбора	= Истина;
			НоваяПФ.Представление	= ПолучитьИмяПрисоединенногоФайла(СсылкаНаПрисоединенныйФайл);
			НоваяПФ.ТипВложения     = "ПрисоединенныйФайл";
			НоваяПФ.ИндексКартинки	= 0;
			НоваяПФ.ВидОбъекта		= ВидОбъекта;
			НоваяПФ.Команда			= Новый Структура("Ссылка",СсылкаНаПрисоединенныйФайл);
			УстановитьФильтрПФПоТипуДокумента(ВидОбъекта);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьФизЛицоСотрудника(Сотрудник)
	Возврат	Сотрудник.ФизическоеЛицо;
КонецФункции

&НаКлиенте
Процедура ДобавитьВложениеИзПрикреплёныхФайлов(Команда)
	СтандартнаяОбработка = Ложь;
	ТД = Элементы.Объекты.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ВладелецФайла = ТД.Объект;
	Если ТипЗнч(ВладелецФайла) = Тип("СправочникСсылка.Сотрудники") Тогда
		ВладелецФайла = ПолучитьФизЛицоСотрудника(ВладелецФайла);
	КонецЕсли;	
	ПараметрыФормы.Вставить("ВладелецФайла",	 	ВладелецФайла);
	ПараметрыФормы.Вставить("ТолькоПросмотр",		Истина);
	ПараметрыФормы.Вставить("РежимВыбора",			Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор",	Истина);
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("ОбработкаВыбораВложения", ЭтаФорма);
	ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы",
         ПараметрыФормы,
         ЭтаФорма,
         Новый УникальныйИдентификатор,
         ,,ОповещениеЗавершения,
		 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ПростойЗапросПодписиПриИзменении(Элемент)
	Элементы.ДобавитьСотрудника.Видимость = ПростойЗапросПодписи;
	Элементы.СписокИсполнителей.Видимость = ПростойЗапросПодписи;
	Элементы.КаналИнформации.Видимость = ПростойЗапросПодписи;
	Элементы.МаршрутОзнакомления.Видимость = ПростойЗапросПодписи;
	Если ПростойЗапросПодписи Тогда 
		СписокИсполнителей.Очистить();
		Если Объекты.Количество() = 1 Тогда
			СправочникСотрудник = get_prop(Объекты[0].Объект, "Сотрудник"); 
			Если ЗначениеЗаполнено(СправочникСотрудник) Тогда
				СправочникСотрудник = НайтиСотрудника(Строка(СправочникСотрудник));
				Если ЗначениеЗаполнено(СправочникСотрудник) Тогда
					НоваяСтрока = СписокИсполнителей.Добавить();
					НоваяСтрока.Сотрудник = СправочникСотрудник;
					НоваяСтрока.Роль = "Сотрудник";
				КонецЕсли;
			КонецЕсли;	
			СправочникСотрудник = get_prop(Объекты[0].Объект, "Руководитель");
			Если ЗначениеЗаполнено(СправочникСотрудник) Тогда
				СправочникСотрудник = НайтиСотрудника(Строка(СправочникСотрудник));
				Если ЗначениеЗаполнено(СправочникСотрудник) Тогда
					НоваяСтрока = СписокИсполнителей.Добавить();
					НоваяСтрока.Сотрудник	= СправочникСотрудник;
					НоваяСтрока.Роль = "Руководитель";
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Функция НайтиСотрудника(ИмяСотрудника)
	Возврат Справочники.Сотрудники.НайтиПоНаименованию(ИмяСотрудника);	
КонецФункции

#Область include_base_НазваниеПродукта
#КонецОбласти

#Область include_core_src_ПроверкаВерсии_ПолучитьИмяФайлаИНомерТекущейВерсии
#КонецОбласти

#Область include_core_src_ПроверкаВерсии_НаФорме
#КонецОбласти

#Область include_core_src_Helpers_FormGetters
#КонецОбласти

#Область include_core_src_Helpers_РаботаСоСвойствамиСтруктуры
#КонецОбласти

#Область include_core_src_ExtException
#КонецОбласти

#Область include_base_РаботаСТаблицейИсполнителей
#КонецОбласти

#Область include_core_src_Криптография_НаКлиенте1С
#КонецОбласти

#Область include_core_src_DataProcessor_SABY_ОсобенностиПлатформы_МодульФормы
#КонецОбласти


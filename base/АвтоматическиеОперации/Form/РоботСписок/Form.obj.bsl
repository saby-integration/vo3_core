#Область ОписаниеПеременных

#КонецОбласти

#Область include_core_base_locale_ЛокализацияНазваниеПродукта
#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Заполнитьcontext_param();
	ЭтоВнешняяОбработка = ЭтоВнешняяОбработка();
	ИмяОбработки = ИмяОбработки();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если context_param = Неопределено Тогда  
		ИмяФормыВхода = ТипМетаданныхОбработки()+".SABY.Форма.Вход";	
		ОписаниеОповещенияПослеАвторизации = Новый ОписаниеОповещения("ПослеАвторизации",ЭтотОбъект);
		ОткрытьФорму(ИмяФормыВхода,,,,,,ОписаниеОповещенияПослеАвторизации,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ПродолжитьОткрытие();
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ОбновитьАвтоматическиеОперации" Тогда
		ОбновитьТаблицуАвтоматическиеОперации();
	ИначеЕсли ИмяСобытия = "SabySignOut" Тогда
		Закрыть();	
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаПодключений

&НаКлиенте
Процедура ТаблицаПодключенийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = ИСТИНА;  
	ПараметрыПередачи = Новый Структура;
	ПараметрыПередачи.Вставить("context_param", context_param);	
	ПараметрыПередачи.Вставить("Ключ", Строка(Новый УникальныйИдентификатор));	
	ОткрытьФормуАвтоматическаяОперация(ПараметрыПередачи);	
КонецПроцедуры 

&НаКлиенте
Процедура ТаблицаПодключенийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = ЛОЖЬ;
	ОткрытиеЭлементаТаблицыПодключений();
КонецПроцедуры  

&НаКлиенте
Процедура Обновить(Команда)
	Элементы.ТекстДлительнойОперации.Заголовок = "Обновляем список автоматических операций...";
	ОбновитьТаблицуАвтоматическиеОперации();	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьОперацию(Команда)
	ТекущиеДанные = Элементы.ТаблицаПодключений.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ОповещениеОбУдаленииОперации = Новый ОписаниеОповещения("УдалениеОперации", ЭтотОбъект, ТекущиеДанные.Идентификатор); 
		ТекстВопроса = "Вы действительно хотите удалить операцию?";	
		ПоказатьВопрос(ОповещениеОбУдаленииОперации, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПодключенийПередНачаломИзменения(Элемент, Отказ)
	Отказ = ИСТИНА;
	ОткрытиеЭлементаТаблицыПодключений();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПодключенийПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	УдалитьОперацию(Неопределено);	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы
// Код процедур и функций
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УдалениеОперации(Ответ, ИдентификаторОперации) Экспорт  
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Результат = УдалитьОперациюНаСервере(ИдентификаторОперации);
		Если Результат = ИСТИНА Тогда
			Элементы.ТекстДлительнойОперации.Заголовок = "Удаляем автоматическую операцию...";
			ОбновитьТаблицуАвтоматическиеОперации();
		КонецЕсли; 
	КонецЕсли;	
КонецПроцедуры	


&НаКлиенте
Процедура ПослеАвторизации(Результат, ДополнительныеПараметры) Экспорт 
	Заполнитьcontext_param();
	ПродолжитьОткрытие();
КонецПроцедуры

&НаСервере
Процедура Заполнитьcontext_param()
	МодульОбъекта = ПолучитьМодульОбъекта(); 
	context_param = МодульОбъекта.ПроверитьНаличиеПараметровПодключения();	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьОткрытие()
	ЗаполнитьПутьОбработкиДляВыполненияФоновогоЗадания();
	ОбновитьТаблицуАвтоматическиеОперации(); 	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОперацииНаСервере() 
	МодульОбъекта = ПолучитьМодульОбъекта();
	ТаблицаПодключений.Очистить();
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если ТипЗнч(Результат) = Тип("Массив") Тогда	
		Для Каждого Запись ИЗ Результат Цикл	
			НоваяСтрока = ТаблицаПодключений.Добавить();
			НоваяСтрока.Название = Запись["Title"];
			НоваяСтрока.Проблема = ЛОЖЬ;
			НоваяСтрока.Активность = Запись["Sync"];
			НоваяСтрока.Идентификатор = Запись["Uuid"];
			НоваяСтрока.Сервис = Запись["Format"];
			НоваяСтрока.Подсистема = Запись["ConfigId"];
			НоваяСтрока.Версия = Формат(Запись["SubsystemVersion"],"ЧГ=");
			NextRun = Запись.Получить("NextRun");
			Если ЗначениеЗаполнено(NextRun) Тогда
				НоваяСтрока.СледующийЗапуск = МодульОбъекта.ПреобразоватьСтрокуВДату("dd-MM-yyyy HH:mm:ss", NextRun);
			КонецЕсли;
			LastRun = Запись.Получить("LastRun");
			Если ЗначениеЗаполнено(LastRun) Тогда
				НоваяСтрока.ПоследнийЗапуск = МодульОбъекта.ПреобразоватьСтрокуВДату("dd-MM-yyyy HH:mm:ss", LastRun);
			КонецЕсли;
			Статус = Запись.Получить("StatusID");
			Если Статус <> Неопределено И Статус > 0 И Статус <> 100 Тогда 
				НоваяСтрока.Проблема = ИСТИНА;
			Иначе
				НоваяСтрока.Проблема = ЛОЖЬ;				
			КонецЕсли;	
		КонецЦикла;
		Элементы.ОшибкаПолученияДанных.Видимость = ЛОЖЬ;
	ИначеЕсли ТипЗнч(Результат) = Тип("ИнформацияОбОшибке") Тогда
		ОшибкаПолученияДанных = ExtExceptionToMessage(ExtExceptionAnalyse(Результат));
		Сообщить(ОшибкаПолученияДанных,СтатусСообщения.Внимание);
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Функция УдалитьОперациюНаСервере(Идентификатор)
	МодульОбъекта = ПолучитьМодульОбъекта();
	params = Новый Структура("id",Идентификатор); 
	res = МодульОбъекта.local_helper_delete_connection(context_param, params);
	Если res = Истина Тогда 
		УзелПланаОбмена = МодульОбъекта.ОпределитьУзелПланаОбменаПоИдентификатору(Идентификатор); 
		Если УзелПланаОбмена <> Неопределено Тогда 
			Попытка 
				 ОбменДаннымиСервер.УдалитьНастройкуСинхронизации(УзелПланаОбмена);
			Исключение	 
				УдалениеУзлаОбмена(УзелПланаОбмена);
			КонецПопытки;	
		КонецЕсли;	
	КонецЕсли;	
	Возврат res;
КонецФункции

&НаКлиенте
Процедура ОбновитьТаблицуАвтоматическиеОперации() 
	
	АдресРезультата=ПоместитьВоВременноеХранилище(Неопределено, ЭтаФорма.УникальныйИдентификатор);
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("context_param", context_param);
	ПараметрыЗадания.Вставить("АдресРезультата",АдресРезультата);
	//ИдентификаторЗадания = ЗапуститьФоновоеЗадание(ПараметрыЗадания);
	НаименованиеФоновогоЗадания = НСтр("ru = 'Получить список "+ЛокализацияНазваниеПродукта()+" подключений'");
	ЗаполнитьПутьОбработкиДляВыполненияФоновогоЗадания();	
	ДлительнаяОперация = ЗапуститьФоновоеЗадание(ПараметрыЗадания, "ПолучитьАвтоматическиеОперацииФоновыеЗадания", НаименованиеФоновогоЗадания);
		
	ОтобразитьГруппуДлительныйПроцесс();
	ПодключитьОбработчикОжидания("ПроверкаВыполненияФоновогоЗадания", 1, ЛОЖЬ);
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьГруппуДлительныйПроцесс() 
	Элементы.ГруппаИнтерфейса.ТекущаяСтраница = Элементы.ГруппаИнтерфейса.ПодчиненныеЭлементы.ГруппаДлительныйПроцесс;
	Элементы.ТаблицаПодключенийДобавить.Видимость 		= ЛОЖЬ;
	Элементы.ТаблицаПодключенийОбновить.Видимость 		= ЛОЖЬ;
	Элементы.ТаблицаПодключенийРедактировать.Видимость 	= ЛОЖЬ;
	Элементы.ТаблицаПодключенийУдалить.Видимость 		= ЛОЖЬ;
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьОсновнуюГруппу()
	Элементы.ГруппаИнтерфейса.ТекущаяСтраница = Элементы.ГруппаИнтерфейса.ПодчиненныеЭлементы.ГруппаОсновная;	
	Элементы.ТаблицаПодключенийДобавить.Видимость 		= ИСТИНА;
	Элементы.ТаблицаПодключенийОбновить.Видимость 		= ИСТИНА;
	Элементы.ТаблицаПодключенийРедактировать.Видимость 	= ИСТИНА;
	Элементы.ТаблицаПодключенийУдалить.Видимость		= ИСТИНА;
КонецПроцедуры	

&НаСервереБезКонтекста
Функция СостояниеФоновогоЗаданияНаСервере(ИдентификаторЗадания)   
	Результат = Новый Структура;
	Результат.Вставить("Статус", "Выполняется");
	Результат.Вставить("КраткоеПредставлениеОшибки", Неопределено);
	Результат.Вставить("ПодробноеПредставлениеОшибки", Неопределено);
	Результат.Вставить("Прогресс", Неопределено);
	Результат.Вставить("Сообщения", Неопределено);
	Результат.Вставить("Наименование", Неопределено);
	
	Если ТипЗнч(ИдентификаторЗадания) = Тип("Строка") Тогда
		ИдентификаторЗадания = Новый УникальныйИдентификатор(ИдентификаторЗадания);
	КонецЕсли;
	
	Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	Если Задание.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно 
		Или Задание.Состояние = СостояниеФоновогоЗадания.Отменено Тогда
		Результат.Статус = "Ошибка";
	ИначеЕсли Задание.Состояние = СостояниеФоновогоЗадания.Завершено Тогда
		Результат.Статус = "Выполнено";		
	КонецЕсли; 
	Возврат Результат;	
КонецФункции

&НаКлиенте
Процедура ПроверкаВыполненияФоновогоЗадания()  
	Задание = СостояниеФоновогоЗаданияНаСервере(ИдентификаторЗадания);
	Если Задание = Неопределено
		ИЛИ Задание.Свойство("Статус") = ЛОЖЬ 
		ИЛИ Задание.Статус <> "Выполняется" Тогда
		ОтключитьОбработчикОжидания("ПроверкаВыполненияФоновогоЗадания");
		ОтобразитьОсновнуюГруппу();
		ОбновитьОперацииНаСервере();
	КонецЕсли; 	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуАвтоматическаяОперация(ПараметрыПередачи)
	Попытка
		ИмяФормыРоботОперация = ТипМетаданныхОбработки()+".SABY.Форма.РоботОперация";
		ОткрытьФорму(ИмяФормыРоботОперация, ПараметрыПередачи,,ПараметрыПередачи.Ключ);
		ПоказатьСкрытьОшибкуПолученияДанных(ЛОЖЬ, "");	
	Исключение  
		ИнфОбОшибке = ИнформацияОбОшибке();
		ОшибкаСтруктура = ExtExceptionAnalyse(ИнфОбОшибке);
		Если ОшибкаСтруктура <> Неопределено Тогда
			ТекстОшибки = ExtExceptionToMessage(ОшибкаСтруктура); 
			ПоказатьСкрытьОшибкуПолученияДанных(ИСТИНА, ТекстОшибки);
		КонецЕсли;
	КонецПопытки;	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытиеЭлементаТаблицыПодключений()
	ТекущиеДанные = Элементы.ТаблицаПодключений.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда	
		ПараметрыПередачи = Новый Структура;
		ПараметрыПередачи.Вставить("context_param", 				context_param);	
		ПараметрыПередачи.Вставить("Сервис",						ТекущиеДанные.Сервис); 
		ПараметрыПередачи.Вставить("Версия",						ТекущиеДанные.Версия);
		ПараметрыПередачи.Вставить("Подсистема",					ТекущиеДанные.Подсистема);
		ПараметрыПередачи.Вставить("Идентификатор",					ТекущиеДанные.Идентификатор);
		ПараметрыПередачи.Вставить("Ключ",							ТекущиеДанные.Идентификатор);
		ПоказатьСкрытьОшибкуПолученияДанных(ЛОЖЬ, "");
		ОткрытьФормуАвтоматическаяОперация(ПараметрыПередачи);	
	КонецЕсли;		
КонецПроцедуры	

&НаКлиенте
Процедура ПоказатьСкрытьОшибкуПолученияДанных(Показать, ТекстОшибки) 
	Если Показать Тогда  
		Сообщить(ТекстОшибки, СтатусСообщения.Внимание);
	КонецЕсли;	
КонецПроцедуры

#Область include_core_base_Helpers_FormGetters
#КонецОбласти

#Область include_core_base_Helpers_РаботаСоСвойствамиСтруктуры
#КонецОбласти

#Область include_core_base_ExtException
#КонецОбласти

#Область include_core_base_АвтоматическиеОперации_ВызовФорм
#КонецОбласти

#Область include_core_base_АвтоматическиеОперации_ВызовФорм_УдалениеУзлаОбмена
#КонецОбласти

#КонецОбласти
 
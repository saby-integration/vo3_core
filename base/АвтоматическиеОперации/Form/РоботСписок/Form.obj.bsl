
#Область ОписаниеПеременных

#КонецОбласти

#Область include_core_base_ФоновыеЗадания_МодульФоновогоЗаданияСерверСКлиента
#КонецОбласти

#Область include_core_base_ФоновыеЗадания_МодульФоновогоЗаданияКлиент
#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Заполнитьcontext_param();
	ЭтоВнешняяОбработка = ЭтоВнешняяОбработка();
	ИмяОбработки = ИмяОбработки();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если context_param = Неопределено Тогда  
		ОписаниеОповещенияПослеАвторизации = Новый ОписаниеОповещения("ПослеАвторизации",ЭтотОбъект);
		ОткрытьФормуОбработки("Вход",,,,ОписаниеОповещенияПослеАвторизации,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ПродолжитьОткрытие();
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ОбновитьАвтоматическиеОперации" Тогда
		ОбновитьТаблицуАвтоматическиеОперации();
	ИначеЕсли ИмяСобытия = "SabySignOut" Тогда
		Закрыть();	
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаПодключений

&НаКлиенте
Процедура ТаблицаПодключенийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = ИСТИНА;  
	ПараметрыПередачи = Новый Структура;
	ПараметрыПередачи.Вставить("context_param", context_param);	
	ПараметрыПередачи.Вставить("Ключ", Строка(Новый УникальныйИдентификатор));	
	ОткрытьФормуАвтоматическаяОперация(ПараметрыПередачи);	
КонецПроцедуры 

&НаКлиенте
Процедура ТаблицаПодключенийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = ЛОЖЬ;
	ОткрытиеЭлементаТаблицыПодключений();
КонецПроцедуры  

&НаКлиенте
Процедура ОбновитьОперации(Команда)
	ЭлемФормы = ПолучитьЭлементыФормы();
	ЭлемФормы.ТекстДлительнойОперации.Заголовок = "Обновляем список автоматических операций...";
	ОбновитьТаблицуАвтоматическиеОперации();	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьОперацию(Команда)
	ЭлемФормы = ПолучитьЭлементыФормы();
	ТекущиеДанные = ЭлемФормы.ТаблицаПодключений.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ОповещениеОбУдаленииОперации = Новый ОписаниеОповещения("УдалениеОперации", ЭтаФорма, ТекущиеДанные.Идентификатор); 
		ТекстВопроса = "Вы действительно хотите удалить операцию?";	
		ПоказатьВопрос(ОповещениеОбУдаленииОперации, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПодключенийПередНачаломИзменения(Элемент, Отказ)
	Отказ = ИСТИНА;
	ОткрытиеЭлементаТаблицыПодключений();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПодключенийПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	УдалитьОперацию(Неопределено);	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы
// Код процедур и функций
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УдалениеОперации(Ответ, ИдентификаторОперации) Экспорт  
	ЭлемФормы = ПолучитьЭлементыФормы();
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Результат = УдалитьОперациюНаСервере(ИдентификаторОперации);
		Если Результат = ИСТИНА Тогда
			ЭлемФормы.ТекстДлительнойОперации.Заголовок = "Удаляем автоматическую операцию...";
			ОбновитьТаблицуАвтоматическиеОперации();
		КонецЕсли; 
	КонецЕсли;	
КонецПроцедуры	


&НаКлиенте
Процедура ПослеАвторизации(Результат, ДополнительныеПараметры) Экспорт 
	Заполнитьcontext_param();
	ПродолжитьОткрытие();
КонецПроцедуры

&НаСервере
Процедура Заполнитьcontext_param()
	МодульОбъекта = МодульОбъекта(); 
	context_param = МодульОбъекта.ПроверитьНаличиеПараметровПодключения();	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьОткрытие()
	ЗаполнитьПутьОбработкиДляВыполненияФоновогоЗадания();
	ОбновитьТаблицуАвтоматическиеОперации(); 	
КонецПроцедуры

Процедура ЗаполнитьОперации(МассивОпераций)
	МодульОбъекта = МодульОбъекта();
	ЭлемФормы = ПолучитьЭлементыФормыНаСервере();
	Если ТипЗнч(МассивОпераций) = Тип("Массив") Тогда
		Для Каждого Запись ИЗ МассивОпераций Цикл	
			НоваяСтрока = ТаблицаПодключений.Добавить();
			НоваяСтрока.Название = get_prop(Запись,"Title","");
			НоваяСтрока.Проблема = ЛОЖЬ;
			НоваяСтрока.Активность = get_prop(Запись,"Sync",Ложь);
			НоваяСтрока.Идентификатор = get_prop(Запись,"Uuid","");
			НоваяСтрока.Сервис = get_prop(Запись,"Format","");
			НоваяСтрока.Подсистема = get_prop(Запись,"ConfigId","");
			НоваяСтрока.Версия = Формат(get_prop(Запись,"SubsystemVersion",""),"ЧГ=");
			NextRun = get_prop(Запись,"NextRun","");
			Если ЗначениеЗаполнено(NextRun) Тогда
				НоваяСтрока.СледующийЗапуск = МодульОбъекта.ПреобразоватьСтрокуВДатуСЧасовымПоясом(NextRun);
			КонецЕсли;
			LastRun = get_prop(Запись,"LastRun","");
			Если ЗначениеЗаполнено(LastRun) Тогда
				НоваяСтрока.ПоследнийЗапуск = МодульОбъекта.ПреобразоватьСтрокуВДатуСЧасовымПоясом(LastRun);
			КонецЕсли;
			Статус = get_prop(Запись,"StatusID",Неопределено);
			Если Статус <> Неопределено И Статус > 0 И Статус <> 100 Тогда 
				НоваяСтрока.Проблема = ИСТИНА;
			Иначе
				НоваяСтрока.Проблема = ЛОЖЬ;				
			КонецЕсли;	
		КонецЦикла;
//		ЭлемФормы.ОшибкаПолученияДанных.Видимость = ЛОЖЬ;
	ИначеЕсли ТипЗнч(МассивОпераций) = Тип("ИнформацияОбОшибке") Тогда
		ОшибкаПолученияДанных = ExtExceptionToMessage(ExtExceptionAnalyse(МассивОпераций));
		Сообщить(ОшибкаПолученияДанных,СтатусСообщения.Внимание);
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОперацииНаСервере() 
	ТаблицаПодключений.Очистить();
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	ЗаполнитьОперации(Результат);
	УдалитьИзВременногоХранилища(АдресРезультата);	
КонецПроцедуры

&НаСервере
Функция УдалитьОперациюНаСервере(Идентификатор)
	МодульОбъекта = МодульОбъекта();
	params = Новый Структура("id",Идентификатор); 
	res = МодульОбъекта.local_helper_delete_connection(context_param, params);
	Если res = Истина Тогда 
		УзелПланаОбмена = МодульОбъекта.ОпределитьУзелПланаОбменаПоИдентификатору(Идентификатор); 
		Если УзелПланаОбмена <> Неопределено Тогда 
			Попытка 
				ОбменДаннымиСервер.УдалитьНастройкуСинхронизации(УзелПланаОбмена);
			Исключение	 
				УдалениеУзлаОбмена(УзелПланаОбмена);
			КонецПопытки;	
		КонецЕсли;	
	КонецЕсли;	
	Возврат res;
КонецФункции

&НаКлиенте
Процедура ОтобразитьГруппуДлительныйПроцесс() 
	ЭлемФормы = ПолучитьЭлементыФормы();
	ЭлемФормы.ГруппаИнтерфейса.ТекущаяСтраница 			= ЭлемФормы.ГруппаИнтерфейса.ПодчиненныеЭлементы.ГруппаДлительныйПроцесс;
	ЭлемФормы.ТаблицаПодключенийДобавить.Видимость 		= ЛОЖЬ;
	ЭлемФормы.ТаблицаПодключенийОбновить.Видимость 		= ЛОЖЬ;
	ЭлемФормы.ТаблицаПодключенийРедактировать.Видимость = ЛОЖЬ;
	ЭлемФормы.ТаблицаПодключенийУдалить.Видимость 		= ЛОЖЬ;
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьОсновнуюГруппу()
	ЭлемФормы = ПолучитьЭлементыФормы();
	ЭлемФормы.ГруппаИнтерфейса.ТекущаяСтраница 			= ЭлемФормы.ГруппаИнтерфейса.ПодчиненныеЭлементы.ГруппаОсновная;	
	ЭлемФормы.ТаблицаПодключенийДобавить.Видимость 		= ИСТИНА;
	ЭлемФормы.ТаблицаПодключенийОбновить.Видимость 		= ИСТИНА;
	ЭлемФормы.ТаблицаПодключенийРедактировать.Видимость = ИСТИНА;
	ЭлемФормы.ТаблицаПодключенийУдалить.Видимость		= ИСТИНА;
КонецПроцедуры	

&НаСервереБезКонтекста
Функция СостояниеФоновогоЗаданияНаСервере(ИдентификаторЗадания)   
	Результат = Новый Структура;
	Результат.Вставить("Статус", "Выполняется");
	Результат.Вставить("КраткоеПредставлениеОшибки", Неопределено);
	Результат.Вставить("ПодробноеПредставлениеОшибки", Неопределено);
	Результат.Вставить("Прогресс", Неопределено);
	Результат.Вставить("Сообщения", Неопределено);
	Результат.Вставить("Наименование", Неопределено);
	
	Если ТипЗнч(ИдентификаторЗадания) = Тип("Строка") Тогда
		ИдентификаторЗадания = Новый УникальныйИдентификатор(ИдентификаторЗадания);
	КонецЕсли;
	
	Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	Если Задание.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно 
		Или Задание.Состояние = СостояниеФоновогоЗадания.Отменено Тогда
		Результат.Статус = "Ошибка";
	ИначеЕсли Задание.Состояние = СостояниеФоновогоЗадания.Завершено Тогда
		Результат.Статус = "Выполнено";		
	КонецЕсли; 
	Возврат Результат;	
КонецФункции

&НаКлиенте
Процедура ПроверкаВыполненияФоновогоЗадания()  
	Задание = СостояниеФоновогоЗаданияНаСервере(ИдентификаторЗадания);
	Если Задание = Неопределено
		ИЛИ Задание.Свойство("Статус") = ЛОЖЬ 
		ИЛИ Задание.Статус <> "Выполняется" Тогда
		ОтключитьОбработчикОжидания("ПроверкаВыполненияФоновогоЗадания");
		ОтобразитьОсновнуюГруппу();
		ОбновитьОперацииНаСервере();
	КонецЕсли; 	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуАвтоматическаяОперация(ПараметрыПередачи)
	Попытка
		ОткрытьФормуОбработки("РоботОперация",ПараметрыПередачи,ЭтаФорма,ПараметрыПередачи.Ключ);
		ПоказатьСкрытьОшибкуПолученияДанных(ЛОЖЬ, "");	
	Исключение  
		ИнфОбОшибке = ИнформацияОбОшибке();
		ОшибкаСтруктура = ExtExceptionAnalyse(ИнфОбОшибке);
		Если ОшибкаСтруктура <> Неопределено Тогда
			ТекстОшибки = ExtExceptionToMessage(ОшибкаСтруктура); 
			ПоказатьСкрытьОшибкуПолученияДанных(ИСТИНА, ТекстОшибки);
		КонецЕсли;
	КонецПопытки;	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытиеЭлементаТаблицыПодключений()
	ЭлемФормы = ПолучитьЭлементыФормы();
	ТекущиеДанные = ЭлемФормы.ТаблицаПодключений.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда	
		ПараметрыПередачи = Новый Структура;
		ПараметрыПередачи.Вставить("context_param", 				context_param);	
		ПараметрыПередачи.Вставить("Сервис",						ТекущиеДанные.Сервис); 
		ПараметрыПередачи.Вставить("Версия",						ТекущиеДанные.Версия);
		ПараметрыПередачи.Вставить("Подсистема",					ТекущиеДанные.Подсистема);
		ПараметрыПередачи.Вставить("Идентификатор",					ТекущиеДанные.Идентификатор);
		ПараметрыПередачи.Вставить("Ключ",							ТекущиеДанные.Идентификатор);
		ПоказатьСкрытьОшибкуПолученияДанных(ЛОЖЬ, "");
		ОткрытьФормуАвтоматическаяОперация(ПараметрыПередачи);	
	КонецЕсли;		
КонецПроцедуры	

&НаКлиенте
Процедура ПоказатьСкрытьОшибкуПолученияДанных(Показать, ТекстОшибки) 
	Если Показать Тогда  
		Сообщить(ТекстОшибки, СтатусСообщения.Внимание);
	КонецЕсли;	
КонецПроцедуры

#Область include_core_base_АвтоматическиеОперации_Form_РоботСписок_ОсобенностиПриложения
#КонецОбласти

#Область include_core_base_Helpers_FormGetters
#КонецОбласти

#Область include_core_base_АвтоматическиеОперации_ВызовФорм
#КонецОбласти

#Область include_core_base_АвтоматическиеОперации_ВызовФорм_УдалениеУзлаОбмена
#КонецОбласти

#Область include_core_base_Helpers_НастройкиПодключенияНаСервере
#КонецОбласти

#КонецОбласти


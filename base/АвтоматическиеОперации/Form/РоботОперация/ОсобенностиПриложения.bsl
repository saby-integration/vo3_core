
&НаКлиенте
Процедура ПодсказкаКопировать()
	ЭлемФормы = ПолучитьЭлементыФормы();
	ЭлемФормы.КопироватьРасширеннаяПодсказка.Заголовок = "Копировать в буфер обмена: "+ИдентификаторНовый;
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьГруппаВремяЗапуска(Видимость)
	ЭлемФормы = ПолучитьЭлементыФормы();
	ЭлемФормы.ГруппаВремяЗапуска.Видимость = Видимость;
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьГруппаБезОграничений(Видимость)
	ЭлемФормы = ПолучитьЭлементыФормы();
	ЭлемФормы.ГруппаБезОграничений.Видимость = Видимость;
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьГруппаРазВДень(Видимость)
	ЭлемФормы = ПолучитьЭлементыФормы();
	ЭлемФормы.ГруппаРазВДень.Видимость = Видимость;
КонецПроцедуры

Процедура ВидимостьГруппаРезультат(Видимость)
	ЭлемФормы = ПолучитьЭлементыФормыНаСервере();
	ЭлемФормы.ГруппаРезультат.Видимость = ИСТИНА;	
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьГруппаАвтоЗапускаВложенная(Видимость)
	ЭлемФормы = ПолучитьЭлементыФормы();
	ЭлемФормы.ГруппаАвтоЗапускаВложенная.Видимость = Видимость;	
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьГруппаДатаВремяСледующегоЗапуска(Видимость)
	ЭлемФормы = ПолучитьЭлементыФормы();
	ЭлемФормы.ГруппаДатаВремяСледующегоЗапуска.Видимость = Видимость;;	
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьГруппаОбъектыОбмена(Видимость)
	ЭлемФормы = ПолучитьЭлементыФормы();
	ЭлемФормы.ГруппаОбъектыОбмена.Видимость = Видимость;;	
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьГруппаИсторияОбмена(Видимость)
	ЭлемФормы = ПолучитьЭлементыФормы();
	ЭлемФормы.ГруппаИсторияОбмена.Видимость = Видимость;;	
КонецПроцедуры

&НаСервере
Процедура ВидимостьГруппаАвтоЗапускаДниНедели(Видимость)
	ЭлемФормы = ПолучитьЭлементыФормыНаСервере();
	ЭлемФормы.ГруппаАвтоЗапускаДниНедели.Видимость = Видимость;;	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьЦветКнопкиДняНедели(ИмяКоманды, ЗначениеПараметра) 
	ЭлемФормы = ПолучитьЭлементыФормы();
	Если ЗначениеПараметра = Ложь Тогда
		ЭлемФормы[ИмяКоманды].ЦветТекста = ШрифтНеактивногоЭлемента;
		ЭлемФормы[ИмяКоманды].Пометка = ЛОЖЬ;
	Иначе
		ЭлемФормы[ИмяКоманды].Пометка = ИСТИНА;
		ЭлемФормы[ИмяКоманды].ЦветТекста = ШрифтАктивногоЭлемента; 
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Функция ПолучитьДеревоНастроекПодключения() 
	Возврат РеквизитФормыВЗначение("ДеревоНастроекПодключения");	
КонецФункции

&НаСервере
Процедура ОтобразитьДеревоНастроекПодключения(ДеревоЗначений) 
	ЗначениеВРеквизитФормы(ДеревоЗначений,"ДеревоНастроекПодключения");
КонецПроцедуры

&НаСервере
Функция РеквизитИсторияОбмена()
	Возврат ИсторияОбменаТабличныйДокумент;
КонецФункции

&НаКлиенте
Процедура ДеревоНастроекПодключенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Имя = "ДеревоНастроекПодключенияНаправление" Тогда
		СтандартнаяОбработка = ЛОЖЬ; 
		ПослеВыбораЗначения = Новый ОписаниеОповещения("ПослеВыбораЗначения", ЭтаФорма);
		ЭлемФормы = ПолучитьЭлементыФормы();
		СписокВыбора = ЭлемФормы.ДеревоНастроекПодключения.ПодчиненныеЭлементы.ДеревоНастроекПодключенияНаправление.СписокВыбора;
		//ШрифтСтрокДерева = Элементы.ДеревоНастроекПодключения.ПодчиненныеЭлементы.ДеревоНастроекПодключенияНаправление.Шрифт;
		//Для Каждого Запись ИЗ СписокВыбора Цикл 
		//	Запись.Представление = Запись.Представление;	
		//КонецЦикла;	
		ТекущееЗначение = СписокВыбора.НайтиПоЗначению(Элемент.ТекущиеДанные.Направление);
		Если СписокВыбора.Количество() > 0 Тогда 
			ПоказатьВыборИзСписка(ПослеВыбораЗначения, СписокВыбора, Элемент, ТекущееЗначение);
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтроки(Элемент)
	Возврат Элемент.ПолучитьЭлементы();
КонецФункции

&НаКлиенте
Функция ПолучитьРодителя(Элемент)
	Возврат Элемент.ПолучитьРодителя();
КонецФункции

&НаСервере
Функция ПолучитьМакетНаСервере(ИмяМакета)  
	Обработка =  РеквизитФормыВЗначение("Объект");
	Макет = Обработка.ПолучитьМакет(ИмяМакета);
	Возврат Макет;
КонецФункции

&НаКлиенте
Процедура ЗапускАлгоритма() 
	ПараметрыВызова = ПараметрыЗапускаАлгоритма();
	ЗаполнитьПутьОбработкиДляВыполненияФоновогоЗадания();
	ПараметрыДлительныеОперации = Новый Структура;
	ПараметрыДлительныеОперации.Вставить("ДополнительнаяОбработкаСсылка",	Неопределено);
	Если ТипЗнч(ИмяОбработки) = Тип("Строка") Тогда
		ПараметрыДлительныеОперации.Вставить("ИмяОбработки",					ИмяОбработки); 
	Иначе     
		ПараметрыДлительныеОперации.Вставить("ДополнительнаяОбработкаСсылка",	ИмяОбработки); 	
	КонецЕсли;
	ПараметрыДлительныеОперации.Вставить("ИмяМетода",				"ЗапуститьАвтоматическуюОперацию");
	ПараметрыДлительныеОперации.Вставить("ПараметрыВыполнения",	ПараметрыВызова);
	ПараметрыДлительныеОперации.Вставить("ЭтоВнешняяОбработка",	ЭтоВнешняяОбработка);

	ВыполняемыйМетод = "ДлительныеОперации.ВыполнитьПроцедуруМодуляОбъектаОбработки";
	
	ПараметрыЗадания = Новый Массив();
	ПараметрыЗадания.Добавить(ПараметрыДлительныеОперации);   
	ПараметрыЗадания.Добавить("");   
	ЗаголовокФормы = "Выполнение алгоритма "+Алгоритм;
	ФормаВладелец = ЭтаФорма;
	//ОповещениеОЗакрытииФормыФоновогоЗадания = Новый ОписаниеОповещения("ПослеВыполненияАлгоритма", ЭтаФорма);
	ОповещениеОЗакрытииФормыФоновогоЗадания = "ПослеВыполненияАлгоритма";	
		
	ОткрытьФормуДлительнойОперации(ВыполняемыйМетод, ПараметрыЗадания, ЗаголовокФормы, ФормаВладелец, ОповещениеОЗакрытииФормыФоновогоЗадания); 
	ИдетПроцессВыполнения = ИСТИНА;
	ЭлемФормы = ПолучитьЭлементыФормы();
	ЭлемФормы.Запуск.Видимость = ЛОЖЬ;
	ЭлемФормы.ВПроцессе.Видимость = ИСТИНА;	
КонецПроцедуры

&НаКлиенте
Процедура ВыборИзСписка(СписокВыбора)
	ПослеВыбораВариантаУстановкиНаправления = Новый ОписаниеОповещения("ПослеВыбораВариантаУстановкиНаправления", ЭтаФорма);
	ЭлемФормы = ПолучитьЭлементыФормы();
	ЭлементУстановитьСнятьФлажки = ЭлемФормы.ДеревоНастроекПодключенияУстановитьНаправление;
	ПоказатьВыборИзСписка(ПослеВыбораВариантаУстановкиНаправления, СписокВыбора, ЭлементУстановитьСнятьФлажки);	
КонецПроцедуры

#Область include_core_base_Helpers_РаботаСоСвойствамиСтруктуры
#КонецОбласти

#Область include_core_base_locale_ЛокализацияНазваниеПродукта
#КонецОбласти

#Область include_core_base_ExtException
#КонецОбласти

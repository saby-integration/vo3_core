
#Область ОписаниеПеременных

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	МодульОбъекта = ПолучитьМодульОбъекта(); 
    ЗаполнитьПараметрыОкнаПоУмолчанию();
	Если Параметры <> Неопределено Тогда
		Сервис = ?(Параметры.Свойство("Сервис"),Параметры.Сервис,"Dom1C");	
		Версия = ?(Параметры.Свойство("Версия"),Параметры.Версия,МодульОбъекта.ПреобразоватьВерсию(Метаданные.Версия));	
		Подсистема = ?(Параметры.Свойство("Подсистема"),Параметры.Подсистема,"");	
		context_param = ?(Параметры.Свойство("context_param"),Параметры.context_param,Неопределено);	
		Идентификатор = ?(Параметры.Свойство("Идентификатор"),Параметры.Идентификатор,"");	
		ИдентификаторНовый = ?(Параметры.Свойство("Идентификатор"),Параметры.Идентификатор,"");	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Идентификатор) Тогда
		ЗаполнитьРеквизитыПоОперации();
	Иначе  
		ИдентификаторНовый = ?(Параметры.Свойство("Ключ"), Параметры.Ключ, Строка(Новый УникальныйИдентификатор));
		Идентификатор = get_prop(context_param, "ConnectionId", Неопределено);
		ЗаполнитьРеквизитыПоОперации();
		ЗаполнитьПараметрыОкнаПоУмолчанию();
	КонецЕсли; 
	ЗаполнитьИсториюОбмена();
	ШрифтНеактивногоЭлемента = ЦветаСтиля.ЦветТекстаКнопки;
	ШрифтАктивногоЭлемента = WebЦвета.Зеленый;
	ЭтоВнешняяОбработка = ЭтоВнешняяОбработка();
	Если ЭтоВнешняяОбработка Тогда
		ИмяОбработки = ИмяФайлаОбработки();
	Иначе
		ИмяОбработки = ИмяОбработки();
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбновитьАвтозапуск(); 
	ЗаполнитьФормуПоПараметрамАлгоритма();
	ЗаполнитьАвтоматическийЗапуск();  
	ОбновитьОтображениеОграничениеВремени();
	ЭтаФорма.Заголовок = ИмяФормы();
	ПодсказкаКопировать();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если Модифицированность = ИСТИНА Тогда
		СтандартнаяОбработка = ЛОЖЬ;
		Отказ = ИСТИНА;
		ОповещениеПослеВыбораОтветаПередЗакрытием = Новый ОписаниеОповещения("ПослеВыбораОтветаПередЗакрытием",ЭтаФорма);
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'");	
		ПоказатьВопрос(ОповещениеПослеВыбораОтветаПередЗакрытием, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "SabySignOut" Тогда
		Закрыть();	
	ИначеЕсли ИмяСобытия = "ПослеВыполненияАлгоритма" Тогда
		ПослеВыполненияАлгоритма(Неопределено,Неопределено);
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПериодичностьПриИзменении(Элемент)
	ЗаполнитьАвтоматическийЗапуск();
	ПересчитатьДатуСледующегоЗапуска();
	Модифицированность = ИСТИНА;
КонецПроцедуры

&НаКлиенте
Процедура ПериодичностьДняПриИзменении(Элемент)
	ОбновитьОтображениеОграничениеВремени();
	ПересчитатьДатуСледующегоЗапуска();
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияУбратьОграничениеВремениНажатие(Элемент)
	БезОграниченийВремени = ИСТИНА;
	ОбновитьОтображениеОграничениеВремени();
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПодключенияПриИзменении(Элемент)
	ЭтаФорма.Заголовок = ИмяФормы();
	Модифицированность = ИСТИНА;
КонецПроцедуры  

&НаКлиенте
Процедура Пн(Команда)
	ЭтаФорма[Команда.Имя] = НЕ ЭтаФорма[Команда.Имя];  
	ОтобразитьЦветКнопкиДняНедели(Команда.Имя, ЭтаФорма[Команда.Имя]);
	ПересчитатьДатуСледующегоЗапуска();
	Модифицированность = ИСТИНА;
КонецПроцедуры

&НаКлиенте
Процедура АлгоритмНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = ЛОЖЬ;   
	ПараметрыПередачи = Новый Структура("Идентификатор,Версия,context_param",Идентификатор,Версия,context_param);
	ОписаниеЗакрытиеОкна = Новый ОписаниеОповещения("ПослеВыбораАлгоритма",ЭтаФорма);
	Попытка   
		ОткрытьФормуОбработки("РоботВыборАлгоритма",ПараметрыПередачи, ЭтаФорма,,ОписаниеЗакрытиеОкна,);
	Исключение  
		ИнфОбОшибке = ИнформацияОбОшибке();
		ОшибкаСтруктура = ExtExceptionAnalyse(ИнфОбОшибке);
		Если ОшибкаСтруктура <> Неопределено Тогда
			ТекстОшибки = ExtExceptionToMessage(ОшибкаСтруктура); 
			ПоказатьСкрытьОшибкуПолученияДанных(ИСТИНА, ТекстОшибки);
		КонецЕсли;	
	КонецПопытки;	
КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)  
	Если НаименованиеПодключения = "" Тогда 
		СтрокаСообщения = НСтр("ru = 'Необходимо заполнить наименование подключения';");		
		СоощениеПользователю = Новый СообщениеПользователю;
		СоощениеПользователю.ПутьКДанным = "НаименованиеПодключения";
		СоощениеПользователю.Текст = СтрокаСообщения;
		СоощениеПользователю.Сообщить();
	КонецЕсли; 
	
	Если Алгоритм = "<выберите алгоритм>" Тогда 
		СтрокаСообщения = НСтр("ru = 'Необходимо заполнить алгоритм';");		
		СоощениеПользователю = Новый СообщениеПользователю;
		СоощениеПользователю.ПутьКДанным = "Алгоритм";
		СоощениеПользователю.Текст = СтрокаСообщения;
		СоощениеПользователю.Сообщить();
	КонецЕсли;

	Попытка
		СохранитьНаСервере();
		Модифицированность = ЛОЖЬ; 
		Оповестить("ОбновитьАвтоматическиеОперации");
		ПоказатьСкрытьОшибкуПолученияДанных(ЛОЖЬ, ""); 
		
		СтрокаСообщения = НСтр("ru = 'Автоматическая операция успешно сохранена';");		
		СоощениеПользователю = Новый СообщениеПользователю;
		СоощениеПользователю.Текст = СтрокаСообщения;
		СоощениеПользователю.Сообщить();
	Исключение  
		ИнфОбОшибке = ИнформацияОбОшибке();
		ОшибкаСтруктура = ExtExceptionAnalyse(ИнфОбОшибке);
		Если ОшибкаСтруктура <> Неопределено Тогда
			ТекстОшибки = ExtExceptionToMessage(ОшибкаСтруктура); 
			ПоказатьСкрытьОшибкуПолученияДанных(ИСТИНА, ТекстОшибки);
		КонецЕсли;	
	КонецПопытки;	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастроекПодключенияПриАктивизацииСтроки(Элемент)
	ТекущиеДанные = Элемент.ТекущиеДанные;
	ЭлемФормы = ПолучитьЭлементыФормы();
	Если ТекущиеДанные <> Неопределено Тогда
		ЭлемФормы.ДеревоНастроекПодключения.ПодчиненныеЭлементы.ДеревоНастроекПодключенияНаправление.СписокВыбора.Очистить();
		Если ТекущиеДанные.НаправленияВозможные = 0 Тогда
			ЭлемФормы.ДеревоНастроекПодключения.ПодчиненныеЭлементы.ДеревоНастроекПодключенияНаправление.ТолькоПросмотр = ИСТИНА;
		Иначе
			ШрифтСтрокДерева = ЭлемФормы.ДеревоНастроекПодключения.ПодчиненныеЭлементы.ДеревоНастроекПодключенияНаправление.Шрифт;
			ЭлемФормы.ДеревоНастроекПодключения.ПодчиненныеЭлементы.ДеревоНастроекПодключенияНаправление.ТолькоПросмотр = Ложь;
			Если ТекущиеДанные.НаправленияВозможные = 2 Тогда   
				СтрокаСостояния = "⇄  Синхронизировать в обе стороны";
				ЭлемФормы.ДеревоНастроекПодключения.ПодчиненныеЭлементы.ДеревоНастроекПодключенияНаправление.СписокВыбора.Добавить(2,СтрокаСостояния);	
			КонецЕсли;
			
			Если ТекущиеДанные.НаправленияВозможные = 3
				ИЛИ ТекущиеДанные.НаправленияВозможные = 2 Тогда
				СтрокаСостояния = "→ В СБИС";
				ЭлемФормы.ДеревоНастроекПодключения.ПодчиненныеЭлементы.ДеревоНастроекПодключенияНаправление.СписокВыбора.Добавить(3,СтрокаСостояния);	
			КонецЕсли;
			
			Если ТекущиеДанные.НаправленияВозможные = 4 
				ИЛИ ТекущиеДанные.НаправленияВозможные = 2 Тогда
				СтрокаСостояния = "← в ИС";
				ЭлемФормы.ДеревоНастроекПодключения.ПодчиненныеЭлементы.ДеревоНастроекПодключенияНаправление.СписокВыбора.Добавить(4,СтрокаСостояния);	
			КонецЕсли;	
			СтрокаСостояния = "x  Отключено";
			ЭлемФормы.ДеревоНастроекПодключения.ПодчиненныеЭлементы.ДеревоНастроекПодключенияНаправление.СписокВыбора.Добавить(1,СтрокаСостояния);
		
		КонецЕсли;		
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура Редактировать(Команда)
	Если Алгоритм <> "<выберите алгоритм>" Тогда   
		НазваниеАлгоритма = КодироватьСтрокуНаСервере(Алгоритм);
		ПараметрыФормы = Новый Структура;
		АдресСтраницы = context_param.api_url+"/blockly_editor_1c/page/?connection_id="+Идентификатор+"&connector=1C&command=1C&endpoint=&algorithm="+НазваниеАлгоритма;
		ПараметрыФормы.Вставить("Заголовок", "Редактор файлов настроек");
		ПараметрыФормы.Вставить("АдресСтраницы", АдресСтраницы);
		ОткрытьФормуОбработки("Browser",ПараметрыФормы,,,);
	Иначе
		СтрокаСообщения = НСтр("ru = 'Не указан алгоритм';");		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрокаСообщения;
		Сообщение.Поле = "Алгоритм";
		Сообщение.Сообщить();
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура Запуск(Команда)
	Если ИдетПроцессВыполнения = ИСТИНА Тогда
		Возврат;
	КонецЕсли;	
	
	Если Модифицированность = Истина Тогда  
		ПослеВыбораСохраненияАлгоритма = Новый ОписаниеОповещения("ПослеВыбораСохраненияАлгоритма", ЭтаФорма);
		ТекстВопроса = НСтр("ru = 'Перед выполнением алгоритма необходимо сохранить настройки';");
		ПоказатьВопрос(ПослеВыбораСохраненияАлгоритма, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена,,КодВозвратаДиалога.Да);
	Иначе
		ЗапускАлгоритма();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Копировать(Команда)    
	#Если НЕ ВебКлиент Тогда
		ОбъектКопирования = Новый COMОбъект("htmlfile"); 
		ОбъектКопирования.ParentWindow.ClipboardData.SetData("Text", ИдентификаторНовый);
		ПоказатьОповещениеПользователя(,,"Идентификатор операции помещен в буфер обмена",,СтатусОповещенияПользователя.Информация);
	#Иначе  
		ОписаниеПослеОтображенияID = Новый ОписаниеОповещения("ПослеВводаСтрокиБуфераОбмена",ЭтаФорма);
		ПоказатьВводСтроки(ОписаниеПослеОтображенияID, ИдентификаторНовый, "Идентификатор операции"); 
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаБезОграниченийВремениНажатие(Элемент)
	БезОграниченийВремени = ЛОЖЬ;
	ОбновитьОтображениеОграничениеВремени();
	ПересчитатьДатуСледующегоЗапуска();
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеФильтровНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = ЛОЖЬ;
	ПараметрыФормыФильтров = Новый Структура;
	ПараметрыФормыФильтров.Вставить("dataСтрокой", 				dataСтрокой);	
	//ПараметрыФормыФильтров.Вставить("ДеревоОбъектовСинхронизации", 	ДеревоОбъектовСинхронизации());	
	
	ОписаниеОЗакрытииОкна = Новый ОписаниеОповещения("ПослеНастройкиФильтров", ЭтаФорма);
	ОткрытьФормуОбработки("РоботПарамФильтрОбъектовСинх",ПараметрыФормыФильтров,,,ОписаниеОЗакрытииОкна,);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПротоколОбменаHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	СтандартнаяОбработка = ЛОЖЬ;
	Попытка 
		parentNode = ДанныеСобытия.Element.parentNode;
		Пока parentNode.localName <> "tr" Цикл
			parentNode = parentNode.parentNode;
		КонецЦикла;	
		АдресСсылки = parentNode.attributes["0"].textContent;
		Если ЗначениеЗаполнено(АдресСсылки) Тогда
			ПараметрыОткрытияОкнаБраузера = Новый Структура;
			ПараметрыОткрытияОкнаБраузера.Вставить("АдресСтраницы", АдресСсылки);
			ПараметрыОткрытияОкнаБраузера.Вставить("Заголовок", "Страница синхронизации"); 
			ОткрытьФормуОбработки("Browser",ПараметрыОткрытияОкнаБраузера,,,,);
		КонецЕсли;	
	Исключение
	КонецПопытки;	
КонецПроцедуры

&НаКлиенте
Процедура ВремяНачалаПриИзменении(Элемент)
	ПересчитатьДатуСледующегоЗапуска();
КонецПроцедуры

&НаКлиенте
Процедура ВремяОкончанияПриИзменении(Элемент)
	ПересчитатьДатуСледующегоЗапуска();
КонецПроцедуры

&НаКлиенте
Процедура ВремяНачала1ПриИзменении(Элемент)
	ПересчитатьДатуСледующегоЗапуска();
КонецПроцедуры

&НаКлиенте
Процедура ИсторияОбменаТабличныйДокументПриАктивизации(Элемент)
	ЭлемФормы = ПолучитьЭлементыФормы();
	ТекВерх = ЭлемФормы.ИсторияОбменаТабличныйДокумент.ТекущаяОбласть.Верх;
	ИсторияОбменаТабличныйДокумент = РеквизитИсторияОбмена();
	МассивОбластей = Новый Массив();
	Если ТекВерх = 1 Тогда 
		ЯчейкаСтрока =ИсторияОбменаТабличныйДокумент.Область(ТекВерх,1,ТекВерх,16);
	Иначе
		ПоправкаРасположенияНачалоОбласти = ТекВерх % 3;
		Если ПоправкаРасположенияНачалоОбласти = 2 Тогда
			НачалоОбласти = ТекВерх;
		ИначеЕсли ПоправкаРасположенияНачалоОбласти = 1 Тогда
			НачалоОбласти = ТекВерх-2;
		Иначе 
			НачалоОбласти = ТекВерх-1;
		КонецЕсли;
	    ЯчейкаСтрока =ИсторияОбменаТабличныйДокумент.Область(НачалоОбласти,1,НачалоОбласти+2,16);
	КонецЕсли; 
    МассивОбластей.Добавить(ЯчейкаСтрока);
  	ЭлемФормы.ИсторияОбменаТабличныйДокумент.УстановитьВыделенныеОбласти(МассивОбластей);
КонецПроцедуры

&НаКлиенте
Процедура ИсторияОбменаТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	СтандартнаяОбработка = ЛОЖЬ;
	АдресСсылки = Область.Расшифровка;
	Если ЗначениеЗаполнено(Область.Расшифровка) Тогда
		ПараметрыОткрытияОкнаБраузера = Новый Структура;
		ПараметрыОткрытияОкнаБраузера.Вставить("АдресСтраницы", АдресСсылки);
		ПараметрыОткрытияОкнаБраузера.Вставить("Заголовок", "Страница синхронизации"); 
		ОткрытьФормуОбработки("Browser",ПараметрыОткрытияОкнаБраузера,,ИСТИНА,,);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоНастроекПодключения

&НаКлиенте
Процедура ДеревоНастроекПодключенияНаправлениеПриИзменении(Элемент)
	Модифицированность = ИСТИНА;	
КонецПроцедуры



&НаКлиенте
Процедура Отметить(Команда) 
	УстановитьСнятьФлажки = НЕ УстановитьСнятьФлажки;
	УстановитьСнятьФлажки();
	
	//ПослеВыбораВариантаОтметки = Новый ОписаниеОповещения("ПослеВыбораВариантаОтметки", ЭтотОбъект);
	//СписокВыбора = Новый СписокЗначений;
	//СписокВыбора.Добавить("Все","Все");
	//СписокВыбора.Добавить("Снять","Снять");
	//СписокВыбора.Добавить("Инвертировать","Инвертировать");	
	//ЭлементУстановитьСнятьФлажки = Элементы.ДеревоНастроекПодключенияУстановитьСнятьФлажки;
	//ПоказатьВыборИзСписка(ПослеВыбораВариантаОтметки, СписокВыбора, ЭлементУстановитьСнятьФлажки);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы



#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ИмяФормы()
	Возврат "Автоматическая операция: "+НаименованиеПодключения;
КонецФункции

&НаСервере
Процедура ЗаполнитьПараметрыОкнаПоУмолчанию()
	Алгоритм = "<выберите алгоритм>"; 
	Периодичность = 1; 
	Автозапуск = ЛОЖЬ;
	ПериодичностьДня = "02:00";
	ВремяНачала = Дата(2023,01,01,09,00,00);
	ВремяОкончания = Дата(2023,01,01,18,00,00);
	ВидимостьГруппаРезультат(Истина);
	ПредставлениеФильтров = "Все объекты";	
КонецПроцедуры	

&НаСервере
Процедура СоздатьУзелПланаОбмена()
	ВидКонфигурации = Метаданные.Имя;
	УзелПланаОбмена = ПланыОбмена[НазваниеПланаОбмена].ПолучитьСсылку(Новый УникальныйИдентификатор(Идентификатор));
	Если НЕ ЗначениеЗаполнено(УзелПланаОбмена.Код) Тогда
		Константы.ИспользоватьСинхронизациюДанных.Установить(ИСТИНА);
		УзелСоздан = ЛОЖЬ;
		Для СЧ = 0 По 100 Цикл	
			Попытка 
				КодУзла = "S"+СЧ; 
				НовыйУзел = ПланыОбмена[НазваниеПланаОбмена].СоздатьУзел(); 
				НовыйУзел.УстановитьСсылкуНового(УзелПланаОбмена);	
				НовыйУзел.Код = КодУзла;
				НовыйУзел.Наименование = ЛокализацияНазваниеПродукта()+" "+НаименованиеПодключения;
				Попытка 
					НовыйУзел.РегистрироватьИзменения = ИСТИНА;
				Исключение
				КонецПопытки;
				НовыйУзел.Записать();
				УзелСоздан = ИСТИНА;
				Прервать;
			Исключение
			КонецПопытки;			
		КонецЦикла;	
		УзелПланаОбмена = ПланыОбмена[НазваниеПланаОбмена].ПолучитьСсылку(Новый УникальныйИдентификатор(Идентификатор));
	    Если УзелСоздан = ИСТИНА Тогда
   			Сообщить("Для настройки обмена создан узел "+УзелПланаОбмена.Наименование);
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораАлгоритма(Результат, ДополнительныеПараметры) Экспорт 
	Если Результат <> Неопределено И ТипЗнч(Результат) = Тип("Строка") Тогда
		Алгоритм = Результат; 
		ЗаполнитьФормуПоПараметрамАлгоритма(); 
		Модифицированность = ИСТИНА;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФормуПоПараметрамАлгоритма()
	context_param.Вставить("ConnectionID",Идентификатор);
	ПараметрыАлгоритма = ПолучитьПараметрыАлгоритма();
	Если ТипЗнч(ПараметрыАлгоритма) = Тип("Соответствие") Тогда
		ЭлемФормы = ПолучитьЭлементыФормы();
		Если ПараметрыАлгоритма.Получить("ЭтоСинхронизация") = Истина Тогда
			ВидимостьГруппаОбъектыОбмена(Истина);
			ЭтоСинхронизация = Истина;
			ЭлемФормы.ГруппаПараметрыФильтры.Видимость = Истина;
			ВидимостьГруппаИсторияОбмена(Истина);
			НазваниеПланаОбмена = ПараметрыАлгоритма.Получить("ПланОбмена");
			ЗаполнитьДеревоНастроек();
		Иначе
			ВидимостьГруппаОбъектыОбмена(Ложь);
			ЭтоСинхронизация = Ложь;
			ЭлемФормы.ГруппаПараметрыФильтры.Видимость = Ложь; 	
			ВидимостьГруппаИсторияОбмена(Ложь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыАлгоритма()
	МодульОбъекта = ПолучитьМодульОбъекта();
	ПараметрыВызова	= Новый Соответствие();  
	ПараметрыВызова.Вставить("params", context_param );
	ПараметрыВызова.Вставить("connection_uuid", context_param.ConnectionId );
	ПараметрыВызова.Вставить("commands_result",Новый Массив);
	ПараметрыВызова.Вставить("endpoint","info");
	ПараметрыВызова.Вставить("algorithm",Алгоритм);
	ПараметрыВызова.Вставить("object",Новый Структура());
	ПараметрыАлгоритма = МодульОбъекта.API_BLOCKLY_RUN(ПараметрыВызова);
	ИнтерфейсныеПараметры = Новый Соответствие;
	Записьsyncobj = МодульОбъекта.BlocklyGetInfoParams(ПараметрыАлгоритма.data, "type", "syncobj");
	ЗаписьПланОбмена = МодульОбъекта.BlocklyGetInfoParams(ПараметрыАлгоритма.data, "name", "ПланОбмена");
	Если Записьsyncobj <> Неопределено Тогда
		ИнтерфейсныеПараметры.Вставить("ЭтоСинхронизация", ИСТИНА);
		Если ЗаписьПланОбмена <> Неопределено Тогда 
			ИнтерфейсныеПараметры.Вставить("ПланОбмена", ЗаписьПланОбмена.Получить("default"));
		КонецЕсли;	
	Иначе
		ИнтерфейсныеПараметры.Вставить("ЭтоСинхронизация", ЛОЖЬ);
	КонецЕсли;	
		
	Возврат ИнтерфейсныеПараметры;
КонецФункции

&НаКлиенте
Процедура ОбновитьОтображениеОграничениеВремени() 
	ЭлемФормы = ПолучитьЭлементыФормы();
	ВидимостьГруппаВремяЗапуска(ЛОЖЬ);	
	ВидимостьГруппаБезОграничений(ЛОЖЬ);
	ВидимостьГруппаРазВДень(ЛОЖЬ);
	Если ПериодичностьДня = "24:00" Тогда
		ВидимостьГруппаРазВДень(ИСТИНА);
	Иначе	
		ВидимостьГруппаВремяЗапуска(НЕ БезОграниченийВремени);	
		ВидимостьГруппаБезОграничений(БезОграниченийВремени);
	КонецЕсли;		
КонецПроцедуры
	

&НаКлиенте
Процедура ЗаполнитьАвтоматическийЗапуск() 
	ЭлемФормы = ПолучитьЭлементыФормы();
	Если Периодичность = 1 Тогда
		ВидимостьГруппаАвтоЗапускаДниНедели(Ложь);
	Иначе
		ВидимостьГруппаАвтоЗапускаДниНедели(Истина)
	КонецЕсли;	
	ОтобразитьЦветКнопкиДняНедели("Пн", ЭтаФорма["Пн"]);
	ОтобразитьЦветКнопкиДняНедели("Вт", ЭтаФорма["Вт"]);
	ОтобразитьЦветКнопкиДняНедели("Ср", ЭтаФорма["Ср"]);
	ОтобразитьЦветКнопкиДняНедели("Чт", ЭтаФорма["Чт"]);
	ОтобразитьЦветКнопкиДняНедели("Пт", ЭтаФорма["Пт"]);
	ОтобразитьЦветКнопкиДняНедели("Сб", ЭтаФорма["Сб"]);
	ОтобразитьЦветКнопкиДняНедели("Вс", ЭтаФорма["Вс"]);
	ОбновитьАвтозапуск();	
КонецПроцедуры

&НаСервере
Функция МассивПоДнямНедели(ВсеДни = ЛОЖЬ) 
	Массив = Новый Массив(); 
	Если Пн ИЛИ ВсеДни Тогда Массив.Добавить("1"); КонецЕсли; 
	Если Вт ИЛИ ВсеДни Тогда Массив.Добавить("2"); КонецЕсли; 
	Если Ср ИЛИ ВсеДни Тогда Массив.Добавить("3"); КонецЕсли; 
	Если Чт ИЛИ ВсеДни Тогда Массив.Добавить("4"); КонецЕсли; 
	Если Пт ИЛИ ВсеДни Тогда Массив.Добавить("5"); КонецЕсли; 
	Если Сб ИЛИ ВсеДни Тогда Массив.Добавить("6"); КонецЕсли; 
	Если Вс ИЛИ ВсеДни Тогда Массив.Добавить("7"); КонецЕсли; 
	Возврат Массив;
КонецФункции	

&НаСервере
Функция СоответствиеData() 
	МодульОбъекта = ПолучитьМодульОбъекта(); 
	connectionParam = Новый Соответствие;
	connectionParam.Вставить("PeriodicityType", Периодичность);
	connectionParam.Вставить("RepeatTime", 		ПериодичностьДня);
	connectionParam.Вставить("DaysSelect", 		МассивПоДнямНедели(Периодичность = 1));
	connectionParam.Вставить("StartTime", 		Формат(ВремяНачала,"ДФ=ЧЧ:мм")); 
	Если ПериодичностьДня = "24:00" Тогда 
		connectionParam.Вставить("EndTime", 	"");
	Иначе
		connectionParam.Вставить("EndTime", 	Формат(ВремяОкончания,"ДФ=ЧЧ:мм"));
	КонецЕсли;
	Data = МодульОбъекта.local_helper_json_loads(dataСтрокой);
	Data.Вставить("connectionParam",	connectionParam);
	Data.Вставить("isRobot",	ИСТИНА);
	Если Алгоритм <> "<выберите алгоритм>" Тогда
		Data.Вставить("OperationType",	"Blockly");
		Data.Вставить("OperationId",	Алгоритм);
	Иначе 
		Data.Удалить("OperationId");
	КонецЕсли;               
	NDate = "";
	Если Автозапуск = ИСТИНА Тогда 
		NDate = ПересчитатьДатуСледующегоЗапуска();	
	КонецЕсли;	
	Data.Вставить("NDate",	NDate);
	dataСтрокой = МодульОбъекта.encode_xdto_json(Data);	
	Возврат Data;	
КонецФункции

&НаСервере
Функция InitConnection()
	МодульОбъекта = ПолучитьМодульОбъекта(); 	
	res = МодульОбъекта.ПолучитьПодключение(context_param);
	Возврат res;
КонецФункции

&НаСервере
Функция ЗаписатьПодключение() 
	
	МодульОбъекта = ПолучитьМодульОбъекта();
	МассивINI = Новый Массив;
	props = Новый Структура;
	props.Вставить("id"					,ИдентификаторНовый);
	props.Вставить("service"           	,"Dom1C");
	props.Вставить("subsystem"			,Подсистема);
	props.Вставить("version"			,Версия);
	props.Вставить("name_connection"	,НаименованиеПодключения);
	props.Вставить("for_all"			,ЛОЖЬ);			
	props.Вставить("auto_update"		,ЛОЖЬ);
	props.Вставить("update_date"		,ТекущаяДата());
	props.Вставить("Data"				,СоответствиеData());
	props.Вставить("sync"				,Автозапуск);
	props.Вставить("parent"				,parent);
	props.Вставить("SystemId"			,"");
	props.Вставить("Connector"			,"Robot1C");
	props.Вставить("NextRun"			,ПересчитатьДатуСледующегоЗапуска());
	props.Вставить("StatusID"			,100);

	МодульОбъекта.ЗаписатьСвойствоParent(,,parent);
		
	params = Новый Структура("props,ini", Props, МассивINI); 
	res = МодульОбъекта.local_helper_write_connection(context_param, params);
   	Идентификатор = ИдентификаторНовый;
	Возврат res;
КонецФункции

&НаСервере
Функция ИзменитьНаправленияСинхронизации()
	Если ЭтоСинхронизация Тогда 
		МодульОбъекта = ПолучитьМодульОбъекта();
		
		ТаблицаОбъектовНаправлений = Новый ТаблицаЗначений;
		ТаблицаОбъектовНаправлений.Колонки.Добавить("ИмяОбъекта");
		ТаблицаОбъектовНаправлений.Колонки.Добавить("Направление");
		ДеревоЗначений = ПолучитьДеревоНастроекПодключения();
		Для Каждого Ветка ИЗ ДеревоЗначений.Строки Цикл
			Для Каждого СтрокаВетки ИЗ Ветка.Строки Цикл
				НоваяСтрока = ТаблицаОбъектовНаправлений.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаВетки);
			КонецЦикла;	
		КонецЦикла;
		
		ТаблицаНаправлений = ТаблицаОбъектовНаправлений.Скопировать();
		ТаблицаНаправлений.Свернуть("Направление"); 
		Для Каждого ЗаписьНаправление ИЗ ТаблицаНаправлений Цикл	
			Если ЗаписьНаправление.Направление = 0 Тогда
				Продолжить;
			КонецЕсли;	
			ОтборТаблицы = Новый Структура("Направление", ЗаписьНаправление.Направление);
			ОтборПоНаправлениям = ТаблицаОбъектовНаправлений.НайтиСтроки(ОтборТаблицы);
			МассивДляЗаписи = Новый Массив;
			Для Каждого ЗаписьОтбора ИЗ ОтборПоНаправлениям Цикл
				МассивДляЗаписи.Добавить(ЗаписьОтбора.ИмяОбъекта);
			КонецЦикла;			                                  
			Если МассивДляЗаписи.Количество() > 0 Тогда  	
				params = Новый Структура;
				params.Вставить("ConnectionId", 	Идентификатор);
				params.Вставить("ListTypeObject", 	МассивДляЗаписи);
				params.Вставить("Direction", 		ЗаписьНаправление.Направление);
				res = МодульОбъекта.local_helper_api3_typesyncobjectmasssetdirection(context_param, params);
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;	
КонецФункции	

&НаСервере
Процедура ЗаполнитьДеревоНастроек()
	МодульОбъекта = ПолучитьМодульОбъекта();
		
	ДеревоЗначений = ПолучитьДеревоНастроекПодключения();
	ДеревоЗначений.Строки.Очистить();
	
	ТаблицаНастроек = МодульОбъекта.НаправленияСинхронизации(context_param, Идентификатор);
	
	СобиратьДерево = Истина;
	Если ТаблицаНастроек.Количество() > 0 Тогда
		Для Каждого Запись ИЗ ТаблицаНастроек Цикл
			Если get_prop(Запись,"Parent@",Неопределено) = Истина Тогда
				НоваяВетка = ДеревоЗначений.Строки.Добавить();
				НоваяВетка.Объект = get_prop(Запись,"ObjectName","");
			Иначе	
			    НоваяСтрокаВетки = НоваяВетка.Строки.Добавить();
				НоваяСтрокаВетки.Объект 				= get_prop(Запись,"ObjectName","");
				НоваяСтрокаВетки.Направление 			= get_prop(Запись,"SyncStatus","");
				НоваяСтрокаВетки.НаправленияВозможные 	= РазобратьНаправлениеПоУмолчанию(get_prop(Запись,"PossibleStatus",""));
				НоваяСтрокаВетки.ИмяОбъекта 			= get_prop(Запись,"ObjId","");
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;
	
	ОтобразитьДеревоНастроекПодключения(ДеревоЗначений);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьconnectionParam(Data)
	connectionParam = Data.Получить("connectionParam"); 
	Если ТипЗнч(connectionParam) = Тип("Соответствие") Тогда 
		Если connectionParam.Получить("PeriodicityType") <> Неопределено Тогда
			Периодичность = connectionParam["PeriodicityType"];
		КонецЕсли; 
		Если connectionParam.Получить("RepeatTime") <> Неопределено Тогда
			ПериодичностьДня = connectionParam["RepeatTime"];
		КонецЕсли;
       	Если connectionParam.Получить("StartTime") <> Неопределено Тогда
			ВремяНачала = "01.01.01 "+connectionParam["StartTime"]+":00";
		КонецЕсли;
		Если connectionParam.Получить("EndTime") <> Неопределено Тогда
			ВремяОкончания = "01.01.01 "+connectionParam["EndTime"]+":00";;
		КонецЕсли;
		МассивПоДнямНедели = connectionParam.Получить("DaysSelect");	
		Если ТипЗНч(МассивПоДнямНедели) = Тип("Массив") Тогда 
			Пн = ЛОЖЬ; Вт = ЛОЖЬ; Ср = ЛОЖЬ; Чт = ЛОЖЬ; Пт = ЛОЖЬ; Сб = ЛОЖЬ; Вс = ЛОЖЬ;
			Для Каждого Запись ИЗ МассивПоДнямНедели Цикл 
				Если Запись = "1" Тогда Пн = Истина 
				ИначеЕсли Запись = "2" Тогда Вт = Истина	
				ИначеЕсли Запись = "3" Тогда Ср = Истина	
				ИначеЕсли Запись = "4" Тогда Чт = Истина	
				ИначеЕсли Запись = "5" Тогда Пт = Истина	
				ИначеЕсли Запись = "6" Тогда Сб = Истина	
				ИначеЕсли Запись = "7" Тогда Вс = Истина
				КонецЕсли;	
			КонецЦикла;			
		КонецЕсли;
		Если Периодичность = 1 Тогда
			ВидимостьГруппаАвтоЗапускаДниНедели(Истина);
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкиData(Data)  
	ЗаполнитьconnectionParam(Data);	
	Если Data.Получить("OperationId") <> Неопределено Тогда
		Алгоритм = Data["OperationId"];
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьРеквизитыПоОперации()
	МодульОбъекта = ПолучитьМодульОбъекта();
	МассивИНИ = Неопределено;
	ПараметрыОперации = Новый Структура("id,Версия,INI",Идентификатор,Версия,МассивИНИ); 
    АвтоматическаяОперация = МодульОбъекта.local_helper_read_connection(context_param, ПараметрыОперации);
 	parent = АвтоматическаяОперация.Получить("parent");
	Автозапуск = АвтоматическаяОперация.Получить("sync");
	LastRun = АвтоматическаяОперация.Получить("LastRun"); 
	Подсистема = АвтоматическаяОперация.Получить("subsystem");
	Если ЗначениеЗаполнено(LastRun) Тогда
		ДатаВремяПоследнегоЗапуска = МодульОбъекта.ПреобразоватьСтрокуВДату("yyyy-MM-dd HH:mm:ss", LastRun);;
	КонецЕсли;
	NextRun = АвтоматическаяОперация.Получить("NextRun"); 
	Если ЗначениеЗаполнено(NextRun) Тогда
		ДатаВремяСледующегоЗапуска = МодульОбъекта.ПреобразоватьСтрокуВДату("yyyy-MM-dd HH:mm:ss", NextRun);
	КонецЕсли;
	Статус = АвтоматическаяОперация.Получить("StatusID");
	ЭлемФормы = ПолучитьЭлементыФормыНаСервере();
	Если Статус <> Неопределено И Статус > 0 И Статус <> 100 Тогда  
		ЭлемФормы.ДекорацияСтатусОшибка.Видимость = Истина;
		ЭлемФормы.ДекорацияСтатусВыполнено.Видимость = ЛОЖЬ;
	Иначе
		ЭлемФормы.ДекорацияСтатусВыполнено.Видимость = Истина;
		ЭлемФормы.ДекорацияСтатусОшибка.Видимость = ЛОЖЬ;
	КонецЕсли;
	Data = АвтоматическаяОперация["Data"]; 
	dataСтрокой = МодульОбъекта.encode_xdto_json(Data);
	ЗаполнитьНастройкиData(Data);
	НаименованиеПодключения = АвтоматическаяОперация.Получить("name_connection");                                         
	ЗаполнитьДеревоНастроек();
	ПредставлениеФильтров = ПолучитьПредставлениеФильтра();

	//ExtSysUid = АвтоматическаяОперация.Получить("SystemId");
КонецФункции

&НаСервере
Процедура СохранитьНаСервере() 
	МодульОбъекта = ПолучитьМодульОбъекта();
	ЭтоНовоеПодключение = (ИдентификаторНовый <> Идентификатор);
	ЗаписатьПодключение();
	Если ЭтоСинхронизация Тогда
		ИзменитьНаправленияСинхронизации();
		Если ЗначениеЗаполнено(НазваниеПланаОбмена) Тогда
			СоздатьУзелПланаОбмена();
		КонецЕсли;	
		Если ЭтоНовоеПодключение Тогда 
			ПараметрыВыполнения = ПараметрыЗапускаАлгоритма();  
			АдресРезультата = Новый УникальныйИдентификатор;
			МодульОбъекта.ЗапуститьАвтоматическуюОперацию(ПараметрыВыполнения, АдресРезультата);
		КонецЕсли;
	КонецЕсли;
	Если Автозапуск Тогда
		МодульОбъекта.АктивироватьРегламентноеЗаданиеАвтоматическихОпераций();
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция КодироватьСтрокуНаСервере(НазваниеАлгоритма) 
	Возврат КодироватьСтроку(НазваниеАлгоритма,СпособКодированияСтроки.КодировкаURL); 
КонецФункции

&НаКлиенте
Процедура АвтозапускПриИзменении(Элемент)
	ОбновитьАвтозапуск();
	Модифицированность = ИСТИНА;
КонецПроцедуры

&НаКлиенте
Процедура ПослеНастройкиФильтров(Результат, ДополнительныеПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		dataСтрокой = Результат;
		ПредставлениеФильтров = ПолучитьПредставлениеФильтра();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьАвтозапуск()
	Если Автозапуск = Истина Тогда
		ВидимостьГруппаАвтоЗапускаВложенная(Истина);
		ВидимостьГруппаДатаВремяСледующегоЗапуска(Истина);
	Иначе
		ВидимостьГруппаАвтоЗапускаВложенная(Ложь);
		ВидимостьГруппаДатаВремяСледующегоЗапуска(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыполненияАлгоритма(Результат, ДополнительныеПараметры) Экспорт
	ЭлемФормы = ПолучитьЭлементыФормы();
	ИдетПроцессВыполнения = ЛОЖЬ;
	ЭлемФормы.Запуск.Видимость = ИСТИНА;
	ЭлемФормы.ВПроцессе.Видимость = ЛОЖЬ;
	ЗаполнитьРеквизитыПоОперации();	
	Если ЭтоСинхронизация Тогда 
		ЗаполнитьИсториюОбмена(); 
	КонецЕсли;
	Оповестить("ОбновитьАвтоматическиеОперации");
КонецПроцедуры	

&НаКлиенте
Процедура ПослеВыбораОтветаПередЗакрытием(Результат, ДополнительныеПараметры) Экспорт  
	Если Результат = КодВозвратаДиалога.Нет Тогда
        Модифицированность = ЛОЖЬ;
		Закрыть();
	ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда
		Сохранить(ИСТИНА);
    КонецЕсли;		
КонецПроцедуры	

&НаСервере
Функция СтрокаСостоянияИсторииСинхронизации(СтрокаРаспределения, Цвет)
	ИтоговаяСтрока = "";
	Если СтрокаРаспределения <> Неопределено И СтрокаРаспределения.КоличествоКубов > 0 Тогда
		КоличествоБлоков = СтрокаРаспределения.КоличествоКубов;	
		Для Сч = 1 По КоличествоБлоков Цикл 
		//	ИтоговаяСтрока = ИтоговаяСтрока + "<div class = ""block "+Цвет+"block"">1</div>";
			ИтоговаяСтрока = Новый ФорматированнаяСтрока(ИтоговаяСтрока, Новый ФорматированнаяСтрока(Символ(9632),,Цвет));
		КонецЦикла;
	КонецЕсли;
	Возврат ИтоговаяСтрока;
КонецФункции

&НаСервере
Процедура ДобавитьСтрокуТаблицыРаспределения(ТаблицаРаспределения, ЗаписьИсторииОбмена, НазваниеЭтапа)
	НоваяСтрока = ТаблицаРаспределения.Добавить(); 
	НоваяСтрока.НазваниеЭтапа = НазваниеЭтапа;
	Попытка 
		НоваяСтрока.ПроцентыЭтапа = ЗаписьИсторииОбмена[НазваниеЭтапа];
	Исключение 
		НоваяСтрока.ПроцентыЭтапа = 0;
	КонецПопытки;
	НоваяСтрока.КоличествоКубов = 0;	
КонецПроцедуры	

&НаСервере
Функция РаспределениеКубовИсторииОбмена(ЗаписьИсторииОбмена, ВсегоКубов)
	ТаблицаРаспределения = Новый ТаблицаЗначений;
	ТаблицаРаспределения.Колонки.Добавить("НазваниеЭтапа");
	ТаблицаРаспределения.Колонки.Добавить("ПроцентыЭтапа");
	ТаблицаРаспределения.Колонки.Добавить("КоличествоКубов");
	
	ДобавитьСтрокуТаблицыРаспределения(ТаблицаРаспределения, ЗаписьИсторииОбмена, "DonePercent");
	ДобавитьСтрокуТаблицыРаспределения(ТаблицаРаспределения, ЗаписьИсторииОбмена, "WarningPercent");
	ДобавитьСтрокуТаблицыРаспределения(ТаблицаРаспределения, ЗаписьИсторииОбмена, "WritePercent");
	ДобавитьСтрокуТаблицыРаспределения(ТаблицаРаспределения, ЗаписьИсторииОбмена, "PreparePercent");
	ДобавитьСтрокуТаблицыРаспределения(ТаблицаРаспределения, ЗаписьИсторииОбмена, "ErrorPercent");
	ДобавитьСтрокуТаблицыРаспределения(ТаблицаРаспределения, ЗаписьИсторииОбмена, "IgnorePercent");
	ДобавитьСтрокуТаблицыРаспределения(ТаблицаРаспределения, ЗаписьИсторииОбмена, "WorkPercent");
	
	ТаблицаРаспределения.Сортировать("ПроцентыЭтапа");
	
	Для СчТаблицы = 0 По ТаблицаРаспределения.Количество()-1 Цикл  
		СтрокаТаблицы = ТаблицаРаспределения.Получить(СчТаблицы);
		Если СчТаблицы = ТаблицаРаспределения.Количество() - 1 Тогда
			СтрокаТаблицы.КоличествоКубов = ВсегоКубов - ТаблицаРаспределения.Итог("КоличествоКубов");
		ИначеЕсли СтрокаТаблицы.ПроцентыЭтапа > 0 Тогда
			СтрокаТаблицы.КоличествоКубов = Окр(СтрокаТаблицы.ПроцентыЭтапа/100 * ВсегоКубов, 0, РежимОкругления.Окр15как20);	
			Если СтрокаТаблицы.КоличествоКубов = 0 Тогда
				СтрокаТаблицы.КоличествоКубов = 1; 
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;	
	Возврат ТаблицаРаспределения;
КонецФункции	

&НаСервере
Процедура ВывестиБлокиВТабличныйДокумент(НазваниеБлока, ТаблицаБлоков, ТабличныйДокумент, ОбластьБлока) 
	СтрокаБлока = ТаблицаБлоков.Найти(НазваниеБлока);
	Если СтрокаБлока <> Неопределено Тогда
		Для Сч = 1 По СтрокаБлока.КоличествоКубов Цикл
			ТабличныйДокумент.Присоединить(ОбластьБлока);	
		КонецЦикла;	
	КонецЕсли;		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИсториюОбмена() 
	ИсторияОбменаТабличныйДокумент = РеквизитИсторияОбмена();  
	ИсторияОбменаТабличныйДокумент.Очистить();
	МодульОбъекта = ПолучитьМодульОбъекта();
	Фильтр = Новый Структура("ConnectionId", ИдентификаторНовый);
	СчетчикСтраниц = 0;
	МассивИсторииОбмена = Новый Массив;
	Пока ИСТИНА Цикл
		res = МодульОбъекта.local_helper_api3_extsyncdoc_list(context_param, Фильтр, Неопределено, Неопределено, СчетчикСтраниц);
		Result = res.Получить("Result");
		Если ТипЗнч(Result) = Тип("Массив") Тогда
			Для Каждого Запись ИЗ Result Цикл   
				МассивИсторииОбмена.Добавить(Запись);
			КонецЦикла;	
		КонецЕсли;
		Если res.Получить("Navigation") <> Неопределено
			И res["Navigation"].Получить("HasMore") = ИСТИНА Тогда
			СчетчикСтраниц = СчетчикСтраниц + 1;
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;	
	ТаблицаИсторииОбмена = МодульОбъекта.МассивВТаблицуЗначений(МассивИсторииОбмена);	
	ВсегоБлоков = 10;	
	ДатаПредыдущейЗаписи = Дата(1,1,1); 
	ТабличныйДокумент = Новый ТабличныйДокумент;
	МакетИсторияОбмена = ПолучитьМакетНаСервере("ИсторияОбмена");
	ОбластьШапка = МакетИсторияОбмена.ПолучитьОбласть("Шапка");
	ТабличныйДокумент.Вывести(ОбластьШапка);
	СтрокаТаблицыПерваяОсновная = МакетИсторияОбмена.ПолучитьОбласть("СтрокаТаблицыПервая|Основная");
	СтрокаТаблицыВтораяОсновная = МакетИсторияОбмена.ПолучитьОбласть("СтрокаТаблицыВторая|Основная");
	КолонкаКрасный = МакетИсторияОбмена.ПолучитьОбласть("СтрокаТаблицыПервая|Красный");
	КолонкаОранжевый = МакетИсторияОбмена.ПолучитьОбласть("СтрокаТаблицыПервая|Оранжевый");
	КолонкаСиний = МакетИсторияОбмена.ПолучитьОбласть("СтрокаТаблицыПервая|Синий");
	КолонкаЗеленый = МакетИсторияОбмена.ПолучитьОбласть("СтрокаТаблицыПервая|Зеленый");
	КолонкаФиолетовый = МакетИсторияОбмена.ПолучитьОбласть("СтрокаТаблицыПервая|Фиолетовый");
	КолонкаСерый = МакетИсторияОбмена.ПолучитьОбласть("СтрокаТаблицыПервая|Серый");
	КолонкаГолубой = МакетИсторияОбмена.ПолучитьОбласть("СтрокаТаблицыПервая|Голубой");
	ВремяПроцессаОбласть = МакетИсторияОбмена.ПолучитьОбласть("СтрокаТаблицыВторая|ВремяПроцессаВертикальное");
	Для Каждого Запись ИЗ ТаблицаИсторииОбмена Цикл  
		ТаблицаРаспределенияКубов = РаспределениеКубовИсторииОбмена(Запись, ВсегоБлоков);  
		СтрокаСинхронизации 	= context_param.api_url+"/ext-sync-doc/page?extSyncDocId="+Запись.ExtSyncDocID;//+"&selectedTab=objects";
		ДатаЗаписи 				= Дата(ПРАВ(Запись.Date,4),СРЕД(Запись.Date,4,2),ЛЕВ(Запись.Date,2));
		ВремяЗаписи 			= ЛЕВ(Запись.Time,5);
		
		Если ДатаПредыдущейЗаписи <> ДатаЗаписи Тогда
			СтрокаТаблицыПерваяОсновная.ТекущаяОбласть.ЦветТекста = ЦветаСтиля.ЦветТекстаПоля;
			СтрокаТаблицыПерваяОсновная.Параметры.ДатаЗаписи = Формат(ДатаЗаписи,"ДФ=dd.MM.yy")+"  ";
			СтрокаТаблицыВтораяОсновная.Параметры.ВремяЗаписи = ВремяЗаписи+"  ";
		Иначе  
			СтрокаТаблицыПерваяОсновная.ТекущаяОбласть.ЦветТекста = WebЦвета.ТусклоСерый;
			СтрокаТаблицыПерваяОсновная.Параметры.ДатаЗаписи = ВремяЗаписи+"  ";
			СтрокаТаблицыВтораяОсновная.Параметры.ВремяЗаписи = "";
		КонецЕсли;
		СтрокаТаблицыПерваяОсновная.Параметры.СтрокаСинхронизации = СтрокаСинхронизации;
	    СтрокаТаблицыПерваяОсновная.Параметры.Название = Запись.Title;	
  		СтрокаТаблицыПерваяОсновная.Параметры.КоличествоОбъектов = Запись.CountObjects;	
   		СтрокаТаблицыПерваяОсновная.Параметры.Проценты = Строка(Запись.TotalPercent) + "%";
		ТабличныйДокумент.Вывести(СтрокаТаблицыПерваяОсновная);
		
		ВывестиБлокиВТабличныйДокумент("DonePercent", 	ТаблицаРаспределенияКубов, ТабличныйДокумент, КолонкаЗеленый); 	
		ВывестиБлокиВТабличныйДокумент("WarningPercent", ТаблицаРаспределенияКубов, ТабличныйДокумент, КолонкаОранжевый); 	
		ВывестиБлокиВТабличныйДокумент("WritePercent", 	ТаблицаРаспределенияКубов, ТабличныйДокумент, КолонкаГолубой); 	
		ВывестиБлокиВТабличныйДокумент("PreparePercent", ТаблицаРаспределенияКубов, ТабличныйДокумент, КолонкаСиний); 	
		ВывестиБлокиВТабличныйДокумент("ErrorPercent", ТаблицаРаспределенияКубов, ТабличныйДокумент, КолонкаКрасный); 	
		ВывестиБлокиВТабличныйДокумент("IgnorePercent", ТаблицаРаспределенияКубов, ТабличныйДокумент, КолонкаФиолетовый); 	
		ВывестиБлокиВТабличныйДокумент("WorkPercent", ТаблицаРаспределенияКубов, ТабличныйДокумент, КолонкаСерый); 	
			
		ТабличныйДокумент.Вывести(СтрокаТаблицыВтораяОсновная);
		ВремяПроцессаОбласть.Параметры.ВремяПроцесса = СРЕД(Запись.ElapsedTime,12,8);
		ТабличныйДокумент.Присоединить(ВремяПроцессаОбласть);
       
		ДатаПредыдущейЗаписи 	= ДатаЗаписи;  															
	КонецЦикла;
	ТабличныйДокумент.ФиксацияСверху = 1;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ИсторияОбменаТабличныйДокумент.Вывести(ТабличныйДокумент);
	ИсторияОбменаТабличныйДокумент.ФиксацияСверху = 1;
КонецПроцедуры	


&НаСервере
Функция РазобратьНаправлениеПоУмолчанию(ВозможныеНаправления)
	Если ТипЗнч(ВозможныеНаправления) = Тип("Массив") Тогда
		Если ВозможныеНаправления.Количество() = 4 Тогда
			ЗначениеМассива = ВозможныеНаправления.Получить(3);
		ИначеЕсли ВозможныеНаправления.Количество() = 2 Тогда
			ЗначениеМассива = ВозможныеНаправления.Получить(1);
		Иначе
			Возврат 0;
		КонецЕсли; 
		Если ТипЗнч(ЗначениеМассива) = Тип("Соответствие") Тогда 
			Попытка 
				Возврат	Число(ЗначениеМассива.Получить("key"));
			Исключение
			КонецПопытки;	
		КонецЕсли;	
	КонецЕсли;	
	Возврат 0;
КонецФункции	

&НаСервере
Функция ПересчитатьДатуСледующегоЗапуска()
	МодульОбъекта = ПолучитьМодульОбъекта();
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("Периодичность", Периодичность);
	ПараметрыВыполнения.Вставить("ПериодичностьДня", ПериодичностьДня);	
	ПараметрыВыполнения.Вставить("ВремяНачала", Формат(ВремяНачала,"ДФ=ЧЧ:мм"));	
	ПараметрыВыполнения.Вставить("ВремяОкончания", Формат(ВремяОкончания,"ДФ=ЧЧ:мм"));	
	ПараметрыВыполнения.Вставить("МассивПоДнямНедели", МассивПоДнямНедели(ЛОЖЬ));
	ДатаВремяЗапуска = МодульОбъекта.ДатаСледующегоЗапускаАлгоритмаПоПараметрам(ПараметрыВыполнения);
	ДатаВремяСледующегоЗапуска = ДатаВремяЗапуска;
	ЭлемФормы = ПолучитьЭлементыФормыНаСервере();
	Если ДатаВремяЗапуска = "" Тогда 
		ЭлемФормы.ДатаВремяСледующегоЗапуска.Видимость = ЛОЖЬ; 
	Иначе
		ЭлемФормы.ДатаВремяСледующегоЗапуска.Видимость = ИСТИНА; 	
	КонецЕсли;	
	Возврат ДатаВремяЗапуска; 
КонецФункции	

&НаКлиенте
Функция ПослеВыбораСохраненияАлгоритма(Результат, ДополнительныеПараметры) Экспорт 
	Если Результат = КодВозвратаДиалога.Да Тогда
		СохранитьНаСервере();
		Модифицированность = ЛОЖЬ;
		ЗапускАлгоритма();
	КонецЕсли;	
КонецФункции	
	

&НаСервере
Функция ПараметрыЗапускаАлгоритма()
	СтруктураСоединения = Новый Структура;
	СтруктураСоединения.Вставить("connection_uuid", Идентификатор);
 	СтруктураСоединения.Вставить("operation_uuid",  Неопределено);
    context_param.Вставить("operation", СтруктураСоединения);

	ПараметрыОперации = Новый Соответствие();
	ПараметрыОперации.Вставить("Uuid", 					Идентификатор);
	ПараметрыОперации.Вставить("dataСтрокой",			dataСтрокой);
	ПараметрыОперации.Вставить("ИмяОбработки", 			ИмяОбработки);
	ПараметрыОперации.Вставить("ЭтоВнешняяОбработка", 	ЭтоВнешняяОбработка);
	ПараметрыОперации.Вставить("Uuid", 					Идентификатор);
	ПараметрыОперации.Вставить("Title", 				НаименованиеПодключения);
	
	ПараметрыВызова = Новый Массив;
	ПараметрыВызова.Добавить(ПараметрыОперации);
	ПараметрыВызова.Добавить(context_param);
	Возврат ПараметрыВызова;
КонецФункции



&НаКлиенте
Процедура ПослеВыбораЗначения(Результат, ДополнительныеПараметры) Экспорт
	Если ТипЗнч(Результат) = Тип("ЭлементСпискаЗначений")  Тогда
		ЭлемФормы = ПолучитьЭлементыФормы();
		ЭлемФормы.ДеревоНастроекПодключения.ТекущиеДанные.Направление = Результат.Значение;	
		Модифицированность = ИСТИНА;
 	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьРодителя(Родитель)
	Если Родитель <> Неопределено Тогда
		СтрокиРодителя = ПолучитьСтроки(Родитель);  
		Родитель.Отметка = ИСТИНА;
		Для Каждого СтрокаРодителя ИЗ СтрокиРодителя Цикл
			Если СтрокаРодителя.Отметка = ЛОЖЬ Тогда
				Родитель.Отметка = ЛОЖЬ;   
				Прервать;
			КонецЕсли;	
		КонецЦикла;		
	КонецЕсли;		
КонецПроцедуры	

&НаКлиенте
Процедура ДеревоНастроекПодключенияОтметкаПриИзменении(Элемент)
	ЭлемФормы = ПолучитьЭлементыФормы();
	ТекущиеДанные = ЭлемФормы.ДеревоНастроекПодключения.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда 
		СтрокиДерева = ПолучитьСтроки(ТекущиеДанные);;
		Для Каждого СтрокаДерева ИЗ СтрокиДерева Цикл
			СтрокаДерева.Отметка = ТекущиеДанные.Отметка;	
		КонецЦикла; 
		Родитель = ПолучитьРодителя(ТекущиеДанные);
		Модифицированность = ИСТИНА;
 		ПроверитьРодителя(Родитель);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНаправление(Команда)
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить("2","⇄  В обе стороны");
	СписокВыбора.Добавить("3","→ В СБИС");
	СписокВыбора.Добавить("4","← В ИС");
	СписокВыбора.Добавить("1","x  Отключить");
	ВыборИзСписка(СписокВыбора);
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораВариантаУстановкиНаправления(Результат, ДополнительныеПараметры) Экспорт
	Если Результат <> Неопределено Тогда 
		ЭлементыДерева = ДеревоНастроекПодключения.ПолучитьЭлементы();  
		Для Каждого ВеткаДерева ИЗ ЭлементыДерева Цикл   
			СтрокиДерева = ВеткаДерева.ПолучитьЭлементы();
			Для Каждого СтрокаДерева ИЗ СтрокиДерева Цикл
				Если СтрокаДерева.Отметка = ИСТИНА Тогда
					СтрокаДерева.Направление = Результат.Значение;  
					Модифицированность = ИСТИНА;
 					Если СтрокаДерева.НаправленияВозможные <> 2 Тогда
						Если СтрокаДерева.НаправленияВозможные = 1 Тогда
							СтрокаДерева.Направление = 1;
						ИначеЕсли СтрокаДерева.НаправленияВозможные <> СтрокаДерева.Направление Тогда
							Если СтрокаДерева.Направление = 2 Тогда
								СтрокаДерева.Направление = СтрокаДерева.НаправленияВозможные;
							Иначе
								СтрокаДерева.Направление = 1;
							КонецЕсли;
						КонецЕсли;	
					КонецЕсли;	
				КонецЕсли;	
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораВариантаОтметки(Результат, ДополнительныеПараметры) Экспорт
	Если Результат <> Неопределено Тогда  
		ЭлементыДерева = ДеревоНастроекПодключения.ПолучитьЭлементы();
		Для Каждого ВеткаДерева ИЗ ЭлементыДерева Цикл   
			СтрокиДерева = ВеткаДерева.ПолучитьЭлементы();
			Для Каждого СтрокаДерева ИЗ СтрокиДерева Цикл 
				Если Результат.Значение = "Все" Тогда
					СтрокаДерева.Отметка = ИСТИНА;
				ИначеЕсли Результат.Значение = "Снять" Тогда
					СтрокаДерева.Отметка = ЛОЖЬ;
				ИначеЕсли Результат.Значение = "Инвертировать" Тогда
					СтрокаДерева.Отметка = НЕ СтрокаДерева.Отметка; 	
				КонецЕсли;	
			КонецЦикла;
			Если Результат.Значение = "Все" Тогда
				ВеткаДерева.Отметка = ИСТИНА;
			ИначеЕсли Результат.Значение = "Снять" Тогда
				ВеткаДерева.Отметка = ЛОЖЬ;
			ИначеЕсли Результат.Значение = "Инвертировать" Тогда
				ВеткаДерева.Отметка = НЕ ВеткаДерева.Отметка; 	
			КонецЕсли;
			ПроверитьРодителя(ВеткаДерева);
		КонецЦикла;	
	КонецЕсли;	
КонецПроцедуры	

&НаКлиенте
Процедура УстановитьСнятьФлажки()  
	ЭлементыДерева = ПолучитьСтроки(ДеревоНастроекПодключения);
	Для Каждого ВеткаДерева ИЗ ЭлементыДерева Цикл   
		СтрокиДерева = ПолучитьСтроки(ВеткаДерева);
		Для Каждого СтрокаДерева ИЗ СтрокиДерева Цикл 
			СтрокаДерева.Отметка = УстановитьСнятьФлажки;
		КонецЦикла;
		ВеткаДерева.Отметка = УстановитьСнятьФлажки;
		ПроверитьРодителя(ВеткаДерева);
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьОшибкуПолученияДанных(Показать, ТекстОшибки) 
	Если Показать Тогда
		Сообщить(ТекстОшибки, СтатусСообщения.Внимание);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаСтрокиБуфераОбмена(Результат, ДополнительныеПараметры) Экспорт 
	Возврат;
КонецПроцедуры	

&НаСервере
Функция ПолучитьПредставлениеФильтра()
	ПредставлениеФильтра = "Все объекты";
	
	МодульОбъекта = ПолучитьМодульОбъекта();
	Data = МодульОбъекта.local_helper_json_loads(dataСтрокой);
	Фильтры = Data.Получить("Filter"); 
	Если Фильтры <> Неопределено Тогда
		ЗначениеПредставлениеФильтра = Фильтры.Получить("description");
		Если ЗначениеЗаполнено(ЗначениеПредставлениеФильтра) Тогда  
			ПредставлениеФильтра = ЗначениеПредставлениеФильтра;	
		КонецЕсли;	
	КонецЕсли;	
		
	Возврат ПредставлениеФильтра;	
КонецФункции

&НаКлиенте
Процедура ДеревоНастроекПодключенияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Если ДанныеСтроки.Направление = 1 Тогда
		ОформлениеСтроки.Ячейки.НаправлениеОтображение.Значение = "x";
	ИначеЕсли ДанныеСтроки.Направление = 2 Тогда
		ОформлениеСтроки.Ячейки.НаправлениеОтображение.Значение = "⇄"; 
	ИначеЕсли ДанныеСтроки.Направление = 3 Тогда
		ОформлениеСтроки.Ячейки.НаправлениеОтображение.Значение = "→"; 
	ИначеЕсли ДанныеСтроки.Направление = 4 Тогда	
		ОформлениеСтроки.Ячейки.НаправлениеОтображение.Значение = "←"; 
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастроекПодключенияПриИзмененииФлажка(Элемент, Колонка)
	Если Колонка.Имя = "Отметка" Тогда  
		ДеревоНастроекПодключенияОтметкаПриИзменении(Неопределено);
	КонецЕсли;	
КонецПроцедуры

#Область include_core_base_АвтоматическиеОперации_Form_РоботОперация_ОсобенностиПриложения
#КонецОбласти


#Область include_core_base_Helpers_FormGetters
#КонецОбласти

#Область include_core_base_АвтоматическиеОперации_ВызовФорм
#КонецОбласти

#Область include_core_base_Helpers_НастройкиПодключенияНаСервере
#КонецОбласти

#КонецОбласти


#Область include_core_base_ФоновыеЗадания_МодульФоновогоЗаданияКлиент
#КонецОбласти

#Область include_core_base_ФоновыеЗадания_МодульФоновогоЗаданияСерверСКлиента
#КонецОбласти

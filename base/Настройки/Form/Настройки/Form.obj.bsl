
&НаКлиенте
Перем ФормаОткрыта;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ИзмененаДатаОбновленияСтатусов = Ложь;
	ЭлементыФормочки = ПолучитьЭлементыФормыНаСервере();
	ДобавитьИнформациюОВерсии(ЭлементыФормочки.ВерсияПродукта);
	
	#Область include_core_base_Настройки_Form_Настройки_ВариантыДоставкиПриглашения
	#КонецОбласти
	
	ЭлементыФормочки.send_type.СписокВыбора.Очистить();
	ЭлементыФормочки.send_type.СписокВыбора.Добавить("Email", "Email");
	ЭлементыФормочки.send_type.СписокВыбора.Добавить("SMS", "SMS");
	//ЭлементыФормочки.send_type.СписокВыбора.Добавить("WhatsApp", "WhatsApp");
	//ЭлементыФормочки.send_type.СписокВыбора.Добавить("Telegram", "Telegram");
	
	МодульОбъекта	= ПолучитьМодульОбъекта();
	ОбщиеНастройки	= МодульОбъекта.ОбщиеНастройкиПрочитать();
	ПубличныеОбщиеНастройки	= get_prop(ОбщиеНастройки, "public");
	
	download_attachments_on_complete = get_prop(ПубличныеОбщиеНастройки, "download_attachments_on_complete", Ложь);
	download_attachments_on_update   = get_prop(ПубличныеОбщиеНастройки, "download_attachments_on_update",   Ложь);
	refresh_statuses                 = get_prop(ПубличныеОбщиеНастройки, "refresh_statuses",                 Ложь);
	send_invitations                 = get_prop(ПубличныеОбщиеНастройки, "send_invitations",                 Ложь);
	send_type                        = get_prop(ПубличныеОбщиеНастройки, "send_type",                        "Email");
	run_docflow                      = get_prop(ПубличныеОбщиеНастройки, "run_docflow",                      Истина);
	kedo_mark                        = get_prop(ПубличныеОбщиеНастройки, "kedo_mark",                        Ложь);
	send_completed_documents         = get_prop(ПубличныеОбщиеНастройки, "send_completed_documents",         Истина);
	web_interface	                 = get_prop(ПубличныеОбщиеНастройки, "web_interface",                    "1CBrowser");
	
	pdf_attachments	= get_prop(ПубличныеОбщиеНастройки, "pdf_attachments", Ложь);
  	exchange_method	= get_prop(ПубличныеОбщиеНастройки, "exchange_method", "API");
	auto_update = get_prop(ПубличныеОбщиеНастройки, "auto_update", Ложь);

	context_param	= МодульОбъекта.НастройкиПодключенияПрочитать();
	Тема			= get_prop(context_param, "Тема");
	advanced_log	= get_prop(context_param, "advanced_log", Ложь);
	ЗаполнитьДатуСобытияОбновленияСтатусов(context_param);
	
	ПрочитатьНастройкиПодсистемы("ЭПД");
	ПрочитатьНастройкиПодсистемы("КЭДО");
	ПрочитатьНастройкиПодсистемы("ЭЛН");
	
	ВидимостьЭлементовКЭДО = Ложь; 
	Если Метаданные.ФункциональныеОпции.Найти("Saby_ИспользоватьКЭДО") <> Неопределено Тогда
        ВидимостьЭлементовКЭДО = ПолучитьФункциональнуюОпцию("Saby_ИспользоватьКЭДО");
	КонецЕсли;
	ЭлементыФормочки.грПриглашение.Видимость			= ВидимостьЭлементовКЭДО; 
	ЭлементыФормочки.run_docflow.Видимость				= ВидимостьЭлементовКЭДО;
	ЭлементыФормочки.kedo_mark.Видимость				= ВидимостьЭлементовКЭДО;
	ЭлементыФормочки.Вложения.Видимость					= ВидимостьЭлементовКЭДО; 
	ЭлементыФормочки.ОткрытьКадровыеДокументы.Видимость	= ВидимостьЭлементовКЭДО; 
	ЭлементыФормочки.ДекорацияЗадачиНативные.Видимость	= ВидимостьЭлементовКЭДО; 
	ЭлементыФормочки.ОткрытьЗадачи.Видимость			= ВидимостьЭлементовКЭДО; 
	ЭлементыФормочки.ОткрытьИсториюОбмена.Видимость		= ВидимостьЭлементовКЭДО; 
	
	ЭлементыФормочки.ДействиеСРегламентнымЗаданием.Заголовок = "Поиск регламентного задания";
	ЭтаФорма.Заголовок  = "Настройки "+ЛокализацияНазваниеПродукта();
	ЭлементыФормочки.download_attachments_on_update.Заголовок = "При загрузке документа из "+ЛокализацияНазваниеПродукта();
	ЭлементыФормочки.СтраницыSABY.Заголовок = "Cтраницы "+ЛокализацияНазваниеПродукта();
	ЭлементыФормочки.СтраницыSABY.Подсказка = "Cтраницы "+ЛокализацияНазваниеПродукта();
	ЭлементыФормочки.АдресСервера.Подсказка = "Адрес сервера "+ЛокализацияНазваниеПродукта();
	
	ПоказатьГруппуТранспорт();
	
	ЛокализацияДействиеПриОткрытии()
КонецПроцедуры

&НаСервере
Функция ПолучитьКоличествоФункциональныхОпций()
	МодульОбъекта = ПолучитьМодульОбъекта();
	МетаданныеРасширения = МодульОбъекта.ПолучитьМетаданныеРасширения();
	КоличествоФО = 0;
	Если МетаданныеРасширения <> Неопределено Тогда 
		КоличествоФО = МетаданныеРасширения.ФункциональныеОпции.Количество();
	КонецЕсли;
	Возврат КоличествоФО;
КонецФункции

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ФормаОткрыта = Истина;
	ПолучитьАктуальностьВерсии();
	
	СтатусВерсии = ПолучитьСтатусВерсииНаФорме(Истина);
	ДанныеОшибки = get_prop(СтатусВерсии, "ДанныеОшибки");
	ОписаниеОшибки = get_prop(ДанныеОшибки, "detail");
	ТребуетсяОткрытьФормуАвторизации = НеобходимоВвестиКодПодтверждения(ОписаниеОшибки);
	Если ТребуетсяОткрытьФормуАвторизации Тогда
		//В фонме настроек мы просто разлогинимся
		ВыйтиНаСервере();
	КонецЕсли;
	
	УстановитьЗаголовокПодсказкуКнопкиВыйти();
	УстановитьДоступностьПоляТипОтправкиПриглашения();
	КоличестовПопытокПолученияРЗ = 3;
	ЭлементыФормочки = ПолучитьЭлементыФормы();
	ЭлементыФормочки.ДействиеСРегламентнымЗаданием.Заголовок = "Поиск регламентного задания...";
	ПослеОткрытия();
КонецПроцедуры  


&НаКлиенте
Процедура send_invitationsПриИзменении(Элемент)
	УстановитьДоступностьПоляТипОтправкиПриглашения();	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	ФормаОткрыта = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	АвторизацияВыполнена = Неопределено;
	Если ТипЗнч(context_param) = Тип("Структура") Тогда
		context_param.Свойство("session", АвторизацияВыполнена);
	КонецЕсли;
	АвторизацияВыполнена =	АвторизацияВыполнена <> Неопределено;
	Если НЕ АвторизацияВыполнена Тогда
		Оповестить("Saby_ЗакрытиеФормыАвторизации",
			Новый Структура("АвторизацияУспешна, ДальнейшееДействие", Ложь, ""));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыйтиНажатие(Элемент)
	ЭлементыФормочки = ПолучитьЭлементыФормы();
	Если ЭлементыФормочки.Выйти.Заголовок = "Войти" Тогда
		ПроверкаВведенныхДанныхАутентификации = Новый ОписаниеОповещения("ОбработкаРезультатаЗакрытияФормыАвторизации",
																			ЭтаФорма);
		ОткрытьФормуОбработки("Вход",, ЭтаФорма,, ПроверкаВведенныхДанныхАутентификации);
	Иначе
		ВыйтиНаСервере();
		ПолучитьАктуальностьВерсии();
		УстановитьЗаголовокПодсказкуКнопкиВыйти();
		Сообщить("Сессия и пароль сброшены");
		Оповестить("SabySignOut");
		context_param = ПолучитьСБИСПараметры();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СменитьАккаунтНажатие(Элемент)
	ЭлементыФормочки = ПолучитьЭлементыФормы();
	СменитьАккаунтВВыпадающемСписке(ЭлементыФормочки.ПереключитьАккаунт);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСопоставленияНажатие(Элемент)
	//Saby_КомандыОбменаДляФормыКлиент.ЗапуститьОповещениеПриНаличииСессии(Saby_КомандыОбменаДляФормыКлиент, "ЗагрузитьСопоставленияНа", Новый Структура());
	ЗапуститьОповещениеПриНаличииСессии("ЗагрузитьСопоставления", ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСопоставления(Результат = Неопределено, ДопПараметры = Неопределено) Экспорт
	connection_info = Неопределено;
	ТекстСообщения = "Загружены сопоставления по умолчанию.";
	Картинка = КартинкаУспешно();
	Попытка
		ЗагрузитьСопоставленияНаСервере(connection_info);
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		СтруктураОшибки = ExtExceptionAnalyse(ИнфоОбОшибке);
		Картинка = КартинкаОшибка();
		ТекстСообщения = СтруктураОшибки.message;
	КонецПопытки;
	ПоказатьОповещениеПользователя("Сопоставление завершено",,
		ТекстСообщения,
		Картинка,
		СтатусОповещенияПользователя.Важное,
		Новый УникальныйИдентификатор);
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСопоставленияНаСервере(connection_info)
	//Дополнительная первоначальная ручная инициализация элементов справочника
	НачальнаяИнициализацияСправочников();

	Модуль = ПолучитьМодульОбъекта();
	context_param = Модуль.НастройкиПодключенияПрочитать();
	system_info = Модуль.API_ADDON_READSYSTEMINFO(Неопределено);
	system_info.Вставить("ConnectionStateEvents", Новый Массив);
	system_info["ConnectionStateEvents"].Добавить("NewSystem");
	connection_info = Модуль.local_helper_init_connection(context_param, system_info);
	Модуль.ПриСозданииНовогоПодключения(connection_info);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРезультатаЗакрытияФормыАвторизации(Результат, Параметры) Экспорт
	Если Результат = Неопределено Тогда Возврат; КонецЕсли;
	ПолучитьАктуальностьВерсии();
	УстановитьЗаголовокПодсказкуКнопкиВыйти();
	//А вот тут бы проверить куда мы дальше хотим идти, если есть такие указания в - Параметры
	//Это для команд открытия формы браузера.
	Если ТипЗнч(Параметры) = Тип("Структура") Тогда
		ОповещениеМодуль = get_prop(Параметры,"Модуль");
		ОповещениеМетод = get_prop(Параметры,"Метод");
		Если ОповещениеМодуль = Неопределено ИЛИ ОповещениеМетод = Неопределено Тогда
			Возврат;
		КонецЕсли;
		МетодЗавершенияАвторизации = Новый ОписаниеОповещения(ОповещениеМетод, ОповещениеМодуль);
		ВыполнитьОбработкуОповещения(МетодЗавершенияАвторизации);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗаголовокПодсказкуКнопкиВыйти()
	ЭлементыФормочки = ПолучитьЭлементыФормы();
	saby_param = ПолучитьСБИСПараметры();
	АвторизацияВыполнена = get_prop(saby_param, "session") <> Неопределено;
	Если АвторизацияВыполнена Тогда
		ЭлементыФормочки.Выйти.Заголовок = "Выйти";
		ЭлементыФормочки.Выйти.Подсказка = "Закрыть сессию в "+ЛокализацияНазваниеПродукта();
	Иначе
		ЭлементыФормочки.Выйти.Заголовок = "Войти";
		ЭлементыФормочки.Выйти.Подсказка = "Открыть сессию в "+ЛокализацияНазваниеПродукта();
	КонецЕсли;

	ЭлементыФормочки.ЛогинПользователя.Видимость	= АвторизацияВыполнена;
	ЭлементыФормочки.АдресСервера.Видимость			= АвторизацияВыполнена;
	
	ЭлементыФормочки.ЛогинПользователя.Заголовок	= get_prop(saby_param, "user_fio");
	ЭлементыФормочки.АдресСервера.Заголовок			= get_prop(saby_param, "api_url");
	ЭлементыФормочки.ПереключитьАккаунт.Доступность = (ЭлементыФормочки.Выйти.Заголовок = "Выйти");
	ОбновитьДанныеНаФорме(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьПоляТипОтправкиПриглашения()
	ЭлементыФормочки = ПолучитьЭлементыФормы();
	Если send_invitations = Ложь Тогда
		ЭлементыФормочки.send_type.Видимость = Ложь;
		send_type	 = "Email";
	Иначе
		ЭлементыФормочки.send_type.Видимость = Истина;
	КонецЕсли; 	
КонецПроцедуры	
	
&НаСервере
Функция ПолучитьСБИСПараметры()
	МодульОбъекта = ПолучитьМодульОбъекта();
	saby_param = МодульОбъекта.НастройкиПодключенияПрочитать();
	Возврат saby_param;
КонецФункции
	
&НаКлиенте
Процедура ОткрытьРедакторФайловНастроекНажатие(Элемент)
	context_param = ПолучитьСБИСПараметры();
	Если get_prop(context_param, "session") <> Неопределено Тогда
		АдресСтраницы = context_param.api_url+"/blockly_editor_1c/page/?connection_id="+context_param.ConnectionId+"&connector=1C&command=1C";
	ИначеЕсли get_prop(context_param, "api_url") <> Неопределено Тогда
		АдресСтраницы = context_param.api_url+"/auth/";
	Иначе
		АдресСтраницы = "https://ie-1c.saby.ru/auth/";	
	КонецЕсли;
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Заголовок", "Редактор файлов настроек");
	ПараметрыФормы.Вставить("АдресСтраницы", АдресСтраницы);
	ОткрытьФормуОбработки("Browser", ПараметрыФормы,,"Редактор файлов настроек");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЖурналДокументовНажатие(Элемент)
	context_param = ПолучитьСБИСПараметры();
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Заголовок", "Задачи");
	ПараметрыФормы.Вставить("context_param", context_param);
	ОткрытьФормуОбработки("ДокументыКЭДО", ПараметрыФормы,,"ДокументыКЭДО");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗадачиНажатие(Команда, ПараметрКоманды) Экспорт
	context_param = ПолучитьСБИСПараметры();
	Если get_prop(context_param, "session") <> Неопределено Тогда
		АдресСтраницы = context_param.api_url+"/page/tasks-in-work"; //integration-tasks?connector=1C
	ИначеЕсли get_prop(context_param, "api_url") <> Неопределено Тогда
		АдресСтраницы = context_param.api_url+"/auth/";
	Иначе
		АдресСтраницы = "https://ie-1c.saby.ru/auth/";	
	КонецЕсли;	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Заголовок", "Задачи");
	ПараметрыФормы.Вставить("АдресСтраницы", АдресСтраницы);
	ПараметрыФормы.Вставить("context_param", context_param);
	ОткрытьФормуОбработки("Browser", ПараметрыФормы,,"Задачи");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКадровыеДокументыНажатие(Команда, ПараметрКоманды) Экспорт 
	context_param = ПолучитьСБИСПараметры();
	Если get_prop(context_param, "session") <> Неопределено Тогда
		АдресСтраницы = context_param.api_url+"/page/cadres?";
	ИначеЕсли get_prop(context_param, "api_url") <> Неопределено Тогда
		АдресСтраницы = context_param.api_url+"/auth/";
	Иначе
		АдресСтраницы = "https://ie-1c.saby.ru/auth/";	
	КонецЕсли;
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Заголовок", "Кадровые документы");
	ПараметрыФормы.Вставить("АдресСтраницы", АдресСтраницы);
	ПараметрыФормы.Вставить("context_param", context_param);
	ОткрытьФормуОбработки("Browser", ПараметрыФормы,,"Кадровые документы")
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИсториюОбменаНажатие(Элемент)
	context_param = ПолучитьСБИСПараметры();
	Если get_prop(context_param, "session") <> Неопределено Тогда
		АдресСтраницы = context_param.api_url+"/integration_config/ext-sync-doc-list/page/?connectionId="+context_param.ConnectionId;
	ИначеЕсли get_prop(context_param, "api_url") <> Неопределено Тогда
		АдресСтраницы = context_param.api_url+"/auth/";
	Иначе
		АдресСтраницы = "https://ie-1c.saby.ru/auth/";	
	КонецЕсли;
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Заголовок", "История обмена");
	ПараметрыФормы.Вставить("АдресСтраницы", АдресСтраницы);
	ПараметрыФормы.Вставить("context_param", context_param);
	ОткрытьФормуОбработки("Browser", ПараметрыФормы,,"История обмена");
КонецПроцедуры

&НаКлиенте
Процедура СброситьКэшНажатие(Элемент)
	СброситьКэшНаСервере();
	Сообщить("Общие настройки ини очищены");
КонецПроцедуры

&НаСервере
Процедура ЗаписатьОбщиеПараметрыНаСервере()
	МодульОбъекта = ПолучитьМодульОбъекта();
	ОбщиеНастройки	= МодульОбъекта.ОбщиеНастройкиПрочитать();
	ПубличныеОбщиеНастройки	= get_prop(ОбщиеНастройки, "public", Новый Структура);
	
	ПубличныеОбщиеНастройки.Вставить("download_attachments_on_complete",	download_attachments_on_complete);
	ПубличныеОбщиеНастройки.Вставить("download_attachments_on_update",		download_attachments_on_update);
	ПубличныеОбщиеНастройки.Вставить("refresh_statuses",					refresh_statuses);
	ПубличныеОбщиеНастройки.Вставить("run_docflow",							run_docflow);
	ПубличныеОбщиеНастройки.Вставить("kedo_mark",							kedo_mark);
	ПубличныеОбщиеНастройки.Вставить("send_invitations",					send_invitations);
	ПубличныеОбщиеНастройки.Вставить("send_type",							send_type);
	ПубличныеОбщиеНастройки.Вставить("send_completed_documents",			send_completed_documents);
	ПубличныеОбщиеНастройки.Вставить("pdf_attachments",						pdf_attachments);
	ПубличныеОбщиеНастройки.Вставить("exchange_method",						exchange_method);
	ПубличныеОбщиеНастройки.Вставить("auto_update",							auto_update);
	ПубличныеОбщиеНастройки.Вставить("web_interface",						web_interface);
	
	ОбщиеНастройки.Вставить("public", ПубличныеОбщиеНастройки);
	МодульОбъекта.ОбщиеНастройкиЗаписать(ОбщиеНастройки);  
	
	ЗаписатьНастройкиПодсистемы("ЭПД");
	ЗаписатьНастройкиПодсистемы("КЭДО");
	ЗаписатьНастройкиПодсистемы("ЭЛН");
	ПоказатьГруппуТранспорт();
КонецПроцедуры

&НаСервере
Процедура ЗаписатьПараметрыПользователя();
	МодульОбъекта = ПолучитьМодульОбъекта();
	context_param = МодульОбъекта.НастройкиПодключенияПрочитать();
	Если context_param <> Неопределено Тогда 
		context_param.Вставить("advanced_log", advanced_log);
		context_param.Вставить("Тема", Тема);
		Если ИзмененаДатаОбновленияСтатусов Тогда 
			УстановитьДатуСобытияОбновленияСтатусов(context_param);
		КонецЕсли;
	КонецЕСли;
	МодульОбъекта.НастройкиПодключенияЗаписать(context_param);
КонецПроцедуры

&НаКлиенте
Процедура ДатаВремяУказателяСтатусаПриИзменении(Элемент)
	ИзмененаДатаОбновленияСтатусов = Истина;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДатуСобытияОбновленияСтатусов(context_param)
	ПоследнееСобытие = get_prop(context_param, "last_event");
	ДатаСобытияСтрокой =  get_prop(ПоследнееСобытие, "date", "01.01.0001 00.00.00");
	Если Не ПустаяСтрока(ДатаСобытияСтрокой) Тогда
		МодульОбъекта = ПолучитьМодульОбъекта();
		ЭлементыДатыСобытия = МодульОбъекта.СтрРазделить82(СтрЗаменить(ДатаСобытияСтрокой, " ", "."), ".");
		//В ином случае нам тут делать нечего, скорее всего будет произвольный набор данных
		//на коротый мы не расчитывали
		Если ЭлементыДатыСобытия.Количество() = 6 Тогда
			Попытка
				ДатаВремяУказателяСтатуса = Дата(
					ЭлементыДатыСобытия[2],
					ЭлементыДатыСобытия[1],
					ЭлементыДатыСобытия[0],
					ЭлементыДатыСобытия[3],
					ЭлементыДатыСобытия[4],
					ЭлементыДатыСобытия[5]);
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьДатуСобытияОбновленияСтатусов(context_param)
	УказателиНаСобытие = Новый Структура();
	Если ДатаВремяУказателяСтатуса <> Дата(1,1,1) Тогда
		УказателиНаСобытие = Новый Структура("date", Формат(ДатаВремяУказателяСтатуса, "ДФ='dd.MM.yyyy HH.mm.ss'"));
	КонецЕсли;
	context_param.Вставить("last_event", УказателиНаСобытие);
КонецПроцедуры

&НаСервере
Процедура ПрочитатьНастройкиПодсистемы(ИмяПодсистемы, ОтображатьФО = Истина)
	
	ЭлементыФормочки = ПолучитьЭлементыФормыНаСервере();
	
	ИмяФО = "Saby_Использовать" + ИмяПодсистемы;
	Если Метаданные.ФункциональныеОпции.Найти(ИмяФО) = Неопределено Тогда
		ЭлементыФормочки[ИмяФО].Видимость = Ложь;
	Иначе
		ЭтаФорма[ИмяФО] = Константы[ИмяФО].Получить();
	КонецЕсли;
	ЭлементыФормочки[ИмяФО].Видимость = ЭлементыФормочки[ИмяФО].Видимость И ОтображатьФО;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНастройкиПодсистемы(ИмяПодсистемы)
	
	ИмяФО = "Saby_Использовать" + ИмяПодсистемы;
	Если Метаданные.ФункциональныеОпции.Найти(ИмяФО) <> Неопределено Тогда
		Константы[ИмяФО].Установить(ЭтаФорма[ИмяФО]);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ТребуетсяВывестиСообщениеОНеобходимостиАвторизации()
	ОбработкаSABY = ПолучитьМодульОбъекта();
	Возврат ОбработкаSABY.ПроверитьНаличиеПараметровПодключения() = Неопределено;
КонецФункции

&НаКлиенте
Процедура ЗаписатьОбщиеПараметры()
	ЗаписатьПараметрыПользователя();
	ЗаписатьОбщиеПараметрыНаСервере();
	Оповестить("Saby_НастройкиИзменены");
	ОбновитьИнтерфейс(); //Обновление интерфейса после вкл/выкл функциональных опций
	Картинка = КартинкаОшибка();
	Если ТребуетсяВывестиСообщениеОНеобходимостиАвторизации() Тогда
		ПоказатьОповещениеПользователя(
			"Функционал "+ЛокализацияНазваниеПродукта()+" недоступен.",
			Неопределено,
			"Для работы необходимо авторизоваться.",
			Картинка,
			СтатусОповещенияПользователя.Важное);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда) 
	ЗаписатьОбщиеПараметры();
	Закрыть(Истина);
КонецПроцедуры 

&НаКлиенте
Процедура Записать(Команда)
	ЗаписатьОбщиеПараметры();
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЗадачиНативныеНажатие(Элемент)
	ОткрытьФормуОбработки("Задачи",, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура РоботОперацииНажатие(Элемент)
	ОткрытьФормуОбработки("РоботСписок",, ЭтаФорма);
КонецПроцедуры

&НаСервере
Функция ПроверкаНаличияКомпонентыSabyHttpsClient()
	Ответ = ИСТИНА;
	Попытка
		МодульОбъекта = ПолучитьМодульОбъекта();  
		Компонента = МодульОбъекта.ПодключитьКомпонентуSabyHttpsClient(Неопределено);
	Исключение 
		Ответ = ЛОЖЬ; 
		ИнфОбОшибке = ИнформацияОбОшибке();
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = ИнфОбОшибке.Описание;
		СообщениеПользователю.Сообщить();
	КонецПопытки;
	Возврат Ответ;
КонецФункции

&НаКлиенте
Процедура СпособОбменаПриИзменении(Элемент)
	Если exchange_method = "SabyHttpsClient" Тогда
		ЕстьКомпонентаSabyHttpsClient = ПроверкаНаличияКомпонентыSabyHttpsClient();
		Если НЕ ЕстьКомпонентаSabyHttpsClient Тогда
			exchange_method = "API";
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметры, Источник)
	Если ИмяСобытия = "Saby_ЗакрытиеФормыАвторизации" Тогда
		//Параметры не важны
		//АвторизацияУспешна = get_prop(Параметры, "АвторизацияУспешна", Ложь);
		//ДальнейшееДействие = get_prop(Параметры, "ДальнейшееДействие", "");
		//Важно перерисовать форму
		ПолучитьАктуальностьВерсии(ФормаОткрыта);
		УстановитьЗаголовокПодсказкуКнопкиВыйти();
		context_param = ПолучитьСБИСПараметры();
	КонецЕсли;
КонецПроцедуры

#Область include_core_base_Helpers_Картинки
#КонецОбласти

#Область include_core_base_Авторизация_СменаАккаунта
#КонецОбласти

#Область include_core_base_Авторизация_Выход
#КонецОбласти

#Область include_base_ОткрытьСтраницуИсторииИзменения
#КонецОбласти

#Область include_core_base_ПроверкаВерсии_НаФорме
#КонецОбласти

#Область include_core_base_Авторизация_Form_Вход_НеобходимоВвестиКодПодтверждения
#КонецОбласти

#Область include_core_base_Транспорт_МодульФормы 
#КонецОбласти

#Область include_core_base_Helpers_FormGetters
#КонецОбласти

#Область include_core_base_ОсобенностиПлатформы_РаботаСЭлементамиФормы
#КонецОбласти

#Область include_core_base_locale_ЛокализацияДействиеПриОткрытии
#КонецОбласти

#Область include_core_base_Настройки_Form_Настройки_ОсобенностиПриложения
#КонецОбласти

#Область include_core_base_Настройки_Form_Настройки_ОсобенностиПродукта
#КонецОбласти


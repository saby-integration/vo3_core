
Функция СформироватьУРЛСТикетом(УрлРесурса, Тикет)
	
	ПосОРГ3 = Найти(УрлРесурса, "&org=3");
	Если ПосОРГ3 > 0 Тогда
		УрлРесурса	= Сред(УрлРесурса, 1, ПосОРГ3 - 1);
	КонецЕсли;				
	
	УрлРесурса = УрлРесурса + ?(ЗначениеЗаполнено(Тикет), "&ticket=" + Тикет, "");
	
	Возврат УрлРесурса;
	
КонецФункции

// Возвращает префикс названия записи в плане видов характеристик, где хранятся названия дополнительных свойств
//
// Параметры:
//  context_params - Структура - Контекст.
//
// Возвращаемое значение:
//  Строка - префикс = имя сервиса
//
Функция СтатусыДокументовСервис(context_params = Неопределено)
	
	Если context_params = Неопределено Тогда
		context_params = НастройкиПодключенияПрочитать();
	КонецЕсли;
	
	// значения из СписокСерверовSaby()
	ИмяСервераСтр = get_prop(context_params, "api_url", "");
	Если Найти(ИмяСервераСтр, "pre-test-") > 0 Тогда
		Возврат "pre-test";
	ИначеЕсли Найти(ИмяСервераСтр, "test-") > 0 Тогда
		Возврат "test";
	ИначеЕсли Найти(ИмяСервераСтр, "fix-") > 0 Тогда
		Возврат "fix";
	//ИначеЕсли Найти(ИмяСервераСтр, "ie-1c.saby.ru") > 0 Тогда
	//	Возврат ""; // онлайн
	//ИначеЕсли Найти(ИмяСервераСтр, "ieg-1c.sbis.ru") > 0 Тогда
	//	Возврат ""; // онлайн
	//Иначе
	//	Возврат "undefine";
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

Функция ПроисходилЛиОбменДокументов( МассивСсылокНаДокументы, ДопПараметры=Неопределено) Экспорт 
	
	РезультатЗапроса = СтатусыДокументовОтобратьПоСпискуОбъектов(МассивСсылокНаДокументы);
	Результат	= Новый Структура("БылОбмен,ОбменаНебыло", Новый Массив, Новый Массив);
	УдаленныеВОтдельныйМассив = get_prop(ДопПараметры, "УдаленныеВОтдельныйМассив", Ложь);
	Если УдаленныеВОтдельныйМассив = Истина Тогда
		Результат.Вставить("Удаленные", Новый Массив);
	КонецЕсли;
	Для Каждого СтрокаЗПР Из РезультатЗапроса Цикл
		
		Если СтрокаЗПР.Объект = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если УдаленныеВОтдельныйМассив = Истина 
			И СтрокаЗПР.Объект.ПометкаУдаления = Истина Тогда
			Результат.Удаленные.Добавить(СтрокаЗПР.Объект);
			Продолжить;
		КонецЕсли;
		
		ЗаписьОбъекта = Новый Структура("Ссылка, UID, ТипМетаданных, Сервис, Аккаунт, Состояние, СостояниеИдСБИС, UID, SbisId, ТипОбъекта, ИмяИни");
		ЗаполнитьЗначенияСвойств(ЗаписьОбъекта, СтрокаЗПР);
		ЗаписьОбъекта.Ссылка = СтрокаЗПР.Объект; 
		
		Если ЗначениеЗаполнено(ДопПараметры) Тогда
			ЗаписьОбъекта.ИмяИни = ДопПараметры.ИмяИни;
		КонецЕсли;
		
		Если СтрокаЗПР.ОбменСоСбис Тогда
			Результат.БылОбмен.Добавить(ЗаписьОбъекта);
		Иначе
			Результат.ОбменаНебыло.Добавить(ЗаписьОбъекта);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат; 
	
КонецФункции 

// Получаем сообщение об ошибке чтения документа
//
// Параметры:
//  ИнфоОбОшибке - Структура - ИнформацияОбОшибке().
//  result - Структура - структура для получения сообшения.
//	ДокументИсточник - Ссылка - читаемый документ
//
// Возвращаемое значение:
//  Строка - Сообшение об ошибке
//
//DynamicDirective
Функция ОбработатьОшибкуЧтенияДокумента(ИнфоОбОшибке, result, ДокументИсточник) 
	СтруктураОшибки = ExtExceptionAnalyse(ИнфоОбОшибке);
	Детали              = get_prop(СтруктураОшибки,	"detail", Неопределено);
	ДеталиОшибка		=  get_prop(Детали, 			"error", Неопределено);
	ДеталиОшибкаДетали	=  get_prop(ДеталиОшибка,		"details", "");
	СообщениеОбОшибке = "";
	Если СтруктураОшибки.type = "NotFound" Тогда
		СообщениеОбОшибке	= result["error"]["details"];	
	ИначеЕсли Найти(СтруктураОшибки.message + ДеталиОшибкаДетали, "Не найден документ с идентификатором") > 0 Тогда
		//Из задач и из журнала описание ошибки приходит из разных полей структуры
		ДокументаUID	= ДокументИсточник.UID;
		Если НЕ ПустаяСтрока(ДокументаUID) ТОгда
			СтатусыДокументовУдалитьПоUID(ДокументаUID);
		Иначе 
			СтатусыДокументовУдалить(ДокументИсточник.Ссылка);
		КонецЕсли;
		СообщениеОбОшибке	= "Документ был удалён в "+ЛокализацияНазваниеПродукта();
	Иначе
		ВызватьИсключение NewExtExceptionСтрока(ИнфоОбОшибке);
	КонецЕсли;
	Возврат СообщениеОбОшибке;
КонецФункции

// Читает документы в интеграции
// возвращает 2 массива обработки успешно и ошибок
//
// Параметры:
//  МассивИсточникДанных - Массив - источник данных.
//  ПолучитьТикет - Булево - признак.
//
// Возвращаемое значение:
//  Структура - 2 массива = "ОбработаноУспешно, ОбработаноСОшибкой"
//
//DynamicDirective
Функция ПолучитьССылкиНаДокументыВИнтеграции(МассивИсточникДанных, ПолучитьТикет = Ложь ) Экспорт
	
	context_params= НастройкиПодключенияПрочитать();
	
	Результат = Новый Структура("ОбработаноУспешно, ОбработаноСОшибкой", Новый Массив(), Новый Массив());
	МассивУспехов = Новый Массив;
	НаименованиеДействия = "OpenInSaby";
	НоваяЗапись = Новый Структура("Ссылка, UID, Сообщение",,,"Ошибка получения URL");
 	//Пока, что дергаем каждый документ в отдельности
	Для Каждого ДокументИсточник Из МассивИсточникДанных Цикл
		
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ДокументИсточник, "Ссылка, UID");
		
		Попытка
			result = ТранспортИнтеграции.local_helper_read_document(context_params, Новый Структура("Идентификатор",ДокументИсточник.UID));
		Исключение
			ИнфоОбОшибке = ИнформацияОбОшибке();
			СообщениеОбОшибке = ОбработатьОшибкуЧтенияДокумента(ИнфоОбОшибке, result, ДокументИсточник);
			НоваяЗапись.Сообщение = СообщениеОбОшибке;
			Результат.ОбработаноСОшибкой.Добавить(НоваяЗапись);
		КонецПопытки; 
		
		Если result <> Неопределено И ТипЗнч(result["СсылкаДляНашаОрганизация"]) = Тип("Строка") Тогда
			Тикет = "";
			Если ПолучитьТикет = Истина Тогда
	 			Тикет = ТранспортИнтеграции.ПолучитьТикетТекущейСессии(context_params);
			КонецЕсли;
			АдресHTML = СформироватьУРЛСТикетом(result["СсылкаДляНашаОрганизация"], Тикет);
			НоваяЗапись.Вставить("Заголовок",СокрЛП(ДокументИсточник.Ссылка));
			НоваяЗапись.Вставить("АдресСтраницы",АдресHTML);
			Результат.ОбработаноУспешно.Добавить(НоваяЗапись);
			ТипСБИС	= get_prop(result, "Тип", "");
			ЭлементСтатистики	= ТранспортИнтеграции.local_helper_element_action(НаименованиеДействия, ТипСБИС, Новый Структура(), 1);
 			МассивУспехов.Добавить(ЭлементСтатистики);
		Иначе
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивУспехов.Количество() > 0 Тогда
		ТранспортИнтеграции.local_helper_register_actions(context_params, МассивУспехов);
	КонецЕсли;

	Возврат Результат;
	
КонецФункции


#Область include_core_base_СтатусыДокументов_ОсобенностиПродукта
#КонецОбласти


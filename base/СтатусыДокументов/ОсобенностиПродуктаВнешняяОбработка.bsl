
Процедура СтатусыДокументовИнициализация(context_params = Неопределено) Экспорт
	
	Перем Сервис, ТекущийСервис;

	Если context_params = Неопределено Тогда
		context_params = НастройкиПодключенияПрочитать();
	КонецЕсли;
	
	Если ИнтеграцияСтатусыДокументов = Неопределено Тогда
		ИнтеграцияСтатусыДокументов = Новый Структура;
		ИнтеграцияСтатусыДокументов.Вставить("ИмяРегистраСвойствОбъектов", СтатусыДокументовИмяРегистраСвойствОбъектов());
		ИнтеграцияСтатусыДокументов.Вставить("ИмяПланаВидовХарактеристикСвойствОбъектов",
			СтатусыДокументовИмяПланаВидовХарактеристикСвойствОбъектов());
		ИнтеграцияСтатусыДокументов.Вставить("СправочникСвойствОбъектов", СтатусыДокументовИмяСправочникаСвойствОбъектов());
		
		СвойстваВРазрезеКодаСервиса = Новый СписокЗначений;
		СвойстваВРазрезеКодаСервиса.Добавить("документсбис_ид",				"ДокументСБИС_Ид");
		СвойстваВРазрезеКодаСервиса.Добавить("документсбис_статус",			"ДокументСБИС_Статус");
		СвойстваВРазрезеКодаСервиса.Добавить("документсбис_текущийэтап",	"ДокументСБИС_ТекущийЭтап");
		ИнтеграцияСтатусыДокументов.Вставить("СвойстваВРазрезеКодаСервиса", СвойстваВРазрезеКодаСервиса);
		
		ИнтеграцияСтатусыДокументов.Вставить("КэшСвойствОбъектов", Новый Соответствие);
		
		ИнтеграцияСтатусыДокументов.Вставить("Сервис", "---undefine---"); // Обновится при 1-ом запуске
		ИнтеграцияСтатусыДокументов.Вставить("Аккаунт", "");
		
		context_params.Вставить("ИмяРегистраСтатусов", ИнтеграцияСтатусыДокументов.ИмяРегистраСвойствОбъектов);
		НастройкиПодключенияЗаписать(context_params);
	КонецЕсли;
	
	// Сервис может меняться, если перелогиниться
	Сервис = СтатусыДокументовСервис(context_params);
	ИнтеграцияСтатусыДокументов.Свойство("Сервис", ТекущийСервис);
	Если Сервис <> ТекущийСервис Тогда
		ИнтеграцияСтатусыДокументов.Вставить("Сервис", Сервис);
		// При первом запуске надо создать записи в ПВХ для хранения статусов и идентификаторов в регистрах сведений
		Если ЗначениеЗаполнено(ИнтеграцияСтатусыДокументов.ИмяПланаВидовХарактеристикСвойствОбъектов) Тогда
			СтатусыДокументовДобавитьЗаписиВПланВидовХарактеристик();
		КонецЕсли;
		ИнтеграцияСтатусыДокументов.Вставить("Аккаунт", get_prop(context_params, "account", "") );
	КонецЕсли;
	
КонецПроцедуры

// Возвращает имя справочника, где хранятся свойства для статусов и идентификаторов СБИС
Функция СтатусыДокументовИмяСправочникаСвойствОбъектов()
	Если Метаданные.РегистрыСведений.Найти("Saby_Состояние") <> Неопределено Тогда
		Возврат "Saby_СостоянияОбъектов";
	ИначеЕсли Метаданные.Справочники.Найти("ЗначенияСвойствОбъектов") <> Неопределено Тогда
		Возврат "ЗначенияСвойствОбъектов";
	Иначе
		ВызватьИсключение("Не найден справочник для хранения статусов и идентификаторов СБИС");
	КонецЕсли;
КонецФункции

// Возвращает имя регистра, где хранятся статусы и идентификаторы СБИС
Функция СтатусыДокументовИмяРегистраСвойствОбъектов()
	Если Метаданные.РегистрыСведений.Найти("Saby_Состояние") <> Неопределено Тогда
		Возврат "Saby_Состояние";
	ИначеЕсли Метаданные.РегистрыСведений.Найти("ДополнительныеСведения") <> Неопределено Тогда
		Возврат "ДополнительныеСведения";
	ИначеЕсли Метаданные.РегистрыСведений.Найти("ЗначенияСвойствОбъектов") <> Неопределено Тогда
		Возврат "ЗначенияСвойствОбъектов";
	Иначе
		ВызватьИсключение("Не найден регистр для хранения статусов и идентификаторов СБИС");
	КонецЕсли;
КонецФункции

// Возвращает имя плана видов характеристик, где хранятся названия дополнительных свойств
Функция СтатусыДокументовИмяПланаВидовХарактеристикСвойствОбъектов()
	Если Метаданные.РегистрыСведений.Найти("Saby_Состояние") <> Неопределено Тогда
		Возврат "";
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Найти("ДополнительныеРеквизитыИСведения") <> Неопределено Тогда
		Возврат "ДополнительныеРеквизитыИСведения";
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Найти("СвойстваОбъектов") <> Неопределено Тогда
		Возврат "СвойстваОбъектов";
	Иначе
		ВызватьИсключение("Не найден план дополнительных свойств для настройки "
			+ "хранения статусов и идентификаторов СБИС");
	КонецЕсли;
КонецФункции

// Функция добавляет записи в план видов характеристик, необходимые для хранения статусов и идентификаторов в регистрах сведений
Процедура СтатусыДокументовДобавитьЗаписиВПланВидовХарактеристик()
	ИмяПланаВидовХарактеристикСвойствОбъектов 	= ИнтеграцияСтатусыДокументов.ИмяПланаВидовХарактеристикСвойствОбъектов;
	СправочникСвойствОбъектов 					= ИнтеграцияСтатусыДокументов.СправочникСвойствОбъектов; 
	Если Метаданные.ПланыВидовХарактеристик.Найти(ИмяПланаВидовХарактеристикСвойствОбъектов) = Неопределено Тогда
		ВызватьИсключение("В конфигурации отсутствует план видов характеристик "
			+ ИмяПланаВидовХарактеристикСвойствОбъектов + ".");
	КонецЕсли;  
	СтатусыДокументовДобавитьЗаписьВПланВидовХарактеристик(Новый Структура("Имя", ИнтеграцияСтатусыДокументов.Сервис
		+ "ДокументСБИС_Ид"));
	СтатусыДокументовДобавитьЗаписьВПланВидовХарактеристик(Новый Структура("Имя", ИнтеграцияСтатусыДокументов.Сервис
		+ "ДокументСБИС_Статус"));
	СтатусыДокументовДобавитьЗаписьВПланВидовХарактеристик(Новый Структура("Имя", ИнтеграцияСтатусыДокументов.Сервис
		+ "ДокументСБИС_ТекущийЭтап"));
КонецПроцедуры

// Функция добавляет запись в план видов характеристик
Функция СтатусыДокументовДобавитьЗаписьВПланВидовХарактеристик(ОписаниеСвойства)
	Перем НазначениеСвойства;
	КлючСвойства = СтатусыДокументовПолучитьКлючСвойстваДокумента(ОписаниеСвойства);
	ОписаниеСвойства.Свойство("Назначение", НазначениеСвойства);
	ИмяПланаВидовХарактеристикСвойствОбъектов = ИнтеграцияСтатусыДокументов.ИмяПланаВидовХарактеристикСвойствОбъектов;
	
	НайденнаяЗапись = СтатусыДокументовПолучитьСвойствоОбъекта(ОписаниеСвойства);
	Если НЕ НайденнаяЗапись.Пустая() Тогда
		Возврат НайденнаяЗапись;
	КонецЕсли;
	
	Попытка
		СвойствоОбъект = ПланыВидовХарактеристик[ИмяПланаВидовХарактеристикСвойствОбъектов].СоздатьЭлемент();
		СвойствоОбъект.Наименование = КлючСвойства;
		Если НЕ СвойствоОбъект.Метаданные().Реквизиты.Найти("Имя") = Неопределено Тогда
			СвойствоОбъект.Имя = КлючСвойства;
		КонецЕсли;
		СвойствоОбъект.ТипЗначения = Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки());
		Попытка
			СвойствоОбъект.Заголовок = КлючСвойства;
		Исключение
		КонецПопытки;
		Попытка
			Если ЗначениеЗаполнено(НазначениеСвойства) Тогда
				СвойствоОбъект.НазначениеСвойства = НазначениеСвойства;
			Иначе
				СвойствоОбъект.НазначениеСвойства = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документы;
			КонецЕсли;
		Исключение
		КонецПопытки;
		СвойствоОбъект.УстановитьНовыйКод();
		СвойствоОбъект.Записать();
		Возврат СвойствоОбъект.Ссылка;
	Исключение
		ВызватьИсключение("Не удалось создать дополнительное свойство " + КлючСвойства + ". Детально: "
			+ ОписаниеОшибки());
	КонецПопытки;
КонецФункции

//Функция возвращает ключ свойства с учетом регамлента и установленного кода сервиса на сервере
Функция СтатусыДокументовПолучитьКлючСвойстваДокумента(ОписаниеСвойства)
	Перем СбисРегламент;
	КлючСвойства = ОписаниеСвойства.Имя;
	Если Не ИнтеграцияСтатусыДокументов.СвойстваВРазрезеКодаСервиса.НайтиПоЗначению(НРег(КлючСвойства))
			= Неопределено Тогда
		КлючСвойства = ИнтеграцияСтатусыДокументов.Сервис + КлючСвойства;
	КонецЕсли;
	Если ОписаниеСвойства.Свойство("Регламент", СбисРегламент)
		И	ЗначениеЗаполнено(СбисРегламент) Тогда
		КлючСвойства = СбисРегламент + "_" + КлючСвойства;
	КонецЕсли;
	Возврат КлючСвойства;
КонецФункции

//Функция получает свойство объекта с учетом кода сервиса и статуса.
Функция СтатусыДокументовПолучитьСвойствоОбъекта(ОписаниеСвойства)
	КлючСвойства = СтатусыДокументовПолучитьКлючСвойстваДокумента(ОписаниеСвойства);
	СсылкаНаСвойство = ИнтеграцияСтатусыДокументов.КэшСвойствОбъектов.Получить(КлючСвойства);
	Если СсылкаНаСвойство = Неопределено Тогда
		СсылкаНаСвойство = СтатусыДокументовИзвлечьСвойствоПоОписанию(КлючСвойства);
	КонецЕсли;
	Возврат СсылкаНаСвойство;
КонецФункции

//Функция получает свойство объекта с учетом кода сервиса и статуса.
Функция СтатусыДокументовИзвлечьСвойствоПоОписанию(КлючСвойства)
	СсылкаНаСвойство = ПланыВидовХарактеристик[ИнтеграцияСтатусыДокументов.ИмяПланаВидовХарактеристикСвойствОбъектов]
							.НайтиПоНаименованию(КлючСвойства, Истина).Ссылка;
	ИнтеграцияСтатусыДокументов.КэшСвойствОбъектов.Вставить(КлючСвойства, СсылкаНаСвойство);
	Возврат СсылкаНаСвойство;
КонецФункции


// Заглушки интерфейса регистра Saby_Состояние

Функция СтатусыДокументовПолучитьСостоянияОбъектов(tUID) Экспорт
	
	Перем Сервис, Аккаунт;
	Если ИнтеграцияСтатусыДокументов = Неопределено Тогда
		СтатусыДокументовИнициализация()
	КонецЕсли;
	Сервис  = ИнтеграцияСтатусыДокументов.Сервис;
	Аккаунт = ИнтеграцияСтатусыДокументов.Аккаунт;
	
	Если ИнтеграцияСтатусыДокументов.ИмяРегистраСвойствОбъектов = "Saby_Состояние" Тогда
		Возврат РегистрыСведений["Saby_Состояние"].ПолучитьСостоянияОбъектов(tUID, Сервис, Аккаунт);
	Иначе
		Возврат СтатусыДокументовПоДопСведениямПолучитьСостоянияОбъектов(tUID, Сервис, Аккаунт);
	КонецЕсли;
	
КонецФункции

Функция СтатусыДокументовОтобратьПоСпискуОбъектов(мОбъекты) Экспорт
	
	Перем Сервис, Аккаунт;
	Если ИнтеграцияСтатусыДокументов = Неопределено Тогда
		СтатусыДокументовИнициализация()
	КонецЕсли;
	Сервис  = ИнтеграцияСтатусыДокументов.Сервис;
	Аккаунт = ИнтеграцияСтатусыДокументов.Аккаунт;
	
	Если ИнтеграцияСтатусыДокументов.ИмяРегистраСвойствОбъектов = "Saby_Состояние" Тогда
		Возврат РегистрыСведений["Saby_Состояние"].ОтобратьПоСпискуОбъектов(мОбъекты, Сервис, Аккаунт);
	Иначе
		Возврат СтатусыДокументовПоДопСведениямОтобратьПоСпискуОбъектов(мОбъекты, Сервис, Аккаунт);
	КонецЕсли;
	
КонецФункции

Функция СтатусыДокументовПрочитатьПоОбъекту(ОбъектИС) Экспорт
	
	Перем Сервис, Аккаунт;
	Если ИнтеграцияСтатусыДокументов = Неопределено Тогда
		СтатусыДокументовИнициализация()
	КонецЕсли;
	Сервис  = ИнтеграцияСтатусыДокументов.Сервис;
	Аккаунт = ИнтеграцияСтатусыДокументов.Аккаунт;
	
	Если ИнтеграцияСтатусыДокументов.ИмяРегистраСвойствОбъектов = "Saby_Состояние" Тогда
		Возврат РегистрыСведений["Saby_Состояние"].ПрочитатьПоОбъекту(ОбъектИС, Сервис, Аккаунт);
	Иначе
		Возврат СтатусыДокументовПоДопСведениямПрочитатьПоОбъекту(ОбъектИС, Сервис, Аккаунт);
	КонецЕсли;
	
КонецФункции

Функция СтатусыДокументовУдалить(Объект) Экспорт
	
	Перем Сервис, Аккаунт;
	Если ИнтеграцияСтатусыДокументов = Неопределено Тогда
		СтатусыДокументовИнициализация()
	КонецЕсли;
	Сервис  = ИнтеграцияСтатусыДокументов.Сервис;
	Аккаунт = ИнтеграцияСтатусыДокументов.Аккаунт;
	
	Если ИнтеграцияСтатусыДокументов.ИмяРегистраСвойствОбъектов = "Saby_Состояние" Тогда
		Возврат РегистрыСведений["Saby_Состояние"].Удалить(Объект, Сервис, Аккаунт);
	Иначе
		Возврат СтатусыДокументовПоДопСведениямУдалить(Объект, Сервис, Аккаунт);
	КонецЕсли;
	
КонецФункции

Процедура СтатусыДокументовУдалитьПоUID(UID, АктивныйЭтап = "", Состояние = Неопределено,
		Объект = Неопределено, ИмяИС = Неопределено, ИдИС = Неопределено) Экспорт
	
	Перем Сервис, Аккаунт;
	Если ИнтеграцияСтатусыДокументов = Неопределено Тогда
		СтатусыДокументовИнициализация()
	КонецЕсли;
	Сервис  = ИнтеграцияСтатусыДокументов.Сервис;
	Аккаунт = ИнтеграцияСтатусыДокументов.Аккаунт;
	
	Если ИнтеграцияСтатусыДокументов.ИмяРегистраСвойствОбъектов = "Saby_Состояние" Тогда
		РегистрыСведений["Saby_Состояние"].УдалитьПоUID(UID, Сервис, Аккаунт, АктивныйЭтап, Состояние,
			Объект, ИмяИС, ИдИС);
	Иначе
		СтатусыДокументовПоДопСведениямУдалитьПоUID(UID, Сервис, Аккаунт, АктивныйЭтап, Состояние,
			Объект, ИмяИС, ИдИС);
	КонецЕсли;
	
КонецПроцедуры

Функция СтатусыДокументовПрочитатьПоUID(UID) Экспорт
	
	Перем Сервис, Аккаунт;
	Если ИнтеграцияСтатусыДокументов = Неопределено Тогда
		СтатусыДокументовИнициализация()
	КонецЕсли;
	Сервис  = ИнтеграцияСтатусыДокументов.Сервис;
	Аккаунт = ИнтеграцияСтатусыДокументов.Аккаунт;
	
	Если ИнтеграцияСтатусыДокументов.ИмяРегистраСвойствОбъектов = "Saby_Состояние" Тогда
		Возврат РегистрыСведений["Saby_Состояние"].ПрочитатьПоUID(UID, Сервис, Аккаунт);
	Иначе
		Возврат СтатусыДокументовПоДопСведениямПрочитатьПоUID(UID, Сервис, Аккаунт);
	КонецЕсли;
	
КонецФункции

Процедура СтатусыДокументовОбновитьПоUID(UID, АктивныйЭтап = "", Состояние = Неопределено,
		Объект = Неопределено, ИмяИС = Неопределено, ИдИС = Неопределено, СбисИд = Неопределено) Экспорт
		
	Перем Сервис, Аккаунт;
	Если ИнтеграцияСтатусыДокументов = Неопределено Тогда
		СтатусыДокументовИнициализация()
	КонецЕсли;
	Сервис  = ИнтеграцияСтатусыДокументов.Сервис;
	Аккаунт = ИнтеграцияСтатусыДокументов.Аккаунт;
	
	Если ИнтеграцияСтатусыДокументов.ИмяРегистраСвойствОбъектов = "Saby_Состояние" Тогда
		РегистрыСведений["Saby_Состояние"].ОбновитьПоUID(UID, Сервис, Аккаунт, АктивныйЭтап, Состояние, Объект,
			ИмяИС, ИдИС, СбисИд);
	Иначе
		СтатусыДокументовПоДопСведениямОбновитьПоUID(UID, Сервис, Аккаунт, АктивныйЭтап, Состояние, Объект,
			ИмяИС, ИдИС, СбисИд);
	КонецЕсли;
	
КонецПроцедуры

Процедура СтатусыДокументовОбновить(UID, АктивныйЭтап = "", Состояние = Неопределено,
		Объект, СбисИд) Экспорт
	
	Перем Сервис, Аккаунт;
	Если ИнтеграцияСтатусыДокументов = Неопределено Тогда
		СтатусыДокументовИнициализация()
	КонецЕсли;
	Сервис  = ИнтеграцияСтатусыДокументов.Сервис;
	Аккаунт = ИнтеграцияСтатусыДокументов.Аккаунт;
	
	Если ИнтеграцияСтатусыДокументов.ИмяРегистраСвойствОбъектов = "Saby_Состояние" Тогда
		РегистрыСведений["Saby_Состояние"].Обновить(UID, Сервис, Аккаунт, АктивныйЭтап, Состояние, Объект, СбисИд);
	Иначе
		СтатусыДокументовПоДопСведениямОбновить(UID, Сервис, Аккаунт, АктивныйЭтап, Состояние, Объект, СбисИд);
	КонецЕсли;
	
КонецПроцедуры


// Интерфейс регистра Saby_Состояние в регистре доп.сведений конфигурации

Функция СтатусыДокументовПоДопСведениямОтобратьПоСпискуОбъектов(мОбъекты, Сервис = "", Аккаунт = "") Экспорт
	
	тОбъекты = Новый ТаблицаЗначений;
	тОбъекты.Колонки.Добавить("Объект");
	тОбъекты.Колонки.Добавить("ОбменСоСбис", Новый ОписаниеТипов("Булево"));
	тОбъекты.Колонки.Добавить("UID", Новый ОписаниеТипов("Строка"));
	Для Каждого ДокументСсылка Из мОбъекты Цикл
		НовСтрока = тОбъекты.Добавить();
		НовСтрока.Объект = ДокументСсылка;
		НовСтрока.ОбменСоСбис = Ложь;
	КонецЦикла;
	тОбъекты.Индексы.Добавить("Объект");
	
	УстановитьПривилегированныйРежим (Истина);
	
	// Ищем документы по свойству ДокументСБИС_Ид
	ИмяПВХ = ИнтеграцияСтатусыДокументов.ИмяПланаВидовХарактеристикСвойствОбъектов;
	СсылкаНаСвойствоИд = ПланыВидовХарактеристик[ИмяПВХ].НайтиПоНаименованию(СокрЛП(Сервис)
		+ "ДокументСБИС_Ид", Истина).Ссылка;
	
	// Находим все документы
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
        |	ЗначенияСвойствОбъектов.Объект КАК Объект,
        |	ЗначенияСвойствОбъектов.Значение КАК UID_Аккаунт
        |ИЗ
        |	РегистрСведений." + ИнтеграцияСтатусыДокументов.ИмяРегистраСвойствОбъектов + " КАК ЗначенияСвойствОбъектов
        |ГДЕ
        |	ЗначенияСвойствОбъектов.Объект В (&Объекты)
        |	И ЗначенияСвойствОбъектов.Свойство = &СсылкаНаСвойство
        |;
		|";
	Запрос.УстановитьПараметр("Объекты", тОбъекты.ВыгрузитьКолонку("Объект"));
	Запрос.УстановитьПараметр("СсылкаНаСвойство", СсылкаНаСвойствоИд);
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтрUID = СтрЗаменить(ВыборкаДетальныеЗаписи.UID_Аккаунт, "_", Символы.ПС);
		UID = СтрПолучитьСтроку(СтрUID, 1);
		
		ПараметрыОтбора = Новый Структура("Объект", ВыборкаДетальныеЗаписи.Объект);
		НашлиСтроки = тОбъекты.НайтиСтроки(ПараметрыОтбора);
		Для Каждого НашлиСтр Из НашлиСтроки Цикл
			НашлиСтр.ОбменСоСбис = Истина;
			НашлиСтр.UID = UID;
		КонецЦикла;
	КонецЦикла;
	
	//На недалёкое будущее
	//РезультатЗапроса.Колонки.Добавить("ТипМетаданных", Новый ОписаниеТипов("Строка") );
	//РезультатЗапроса.Колонки.Добавить("ТипОбъекта", Новый ОписаниеТипов("Строка") );
	//Для Каждого СтрокаРЗ ИЗ РезультатЗапроса Цикл
	//	СтрокаРЗ.ТипМетаданных	= ОпределитьТипМетаданных(СтрокаРЗ.Объект) ;
	//	СтрокаРЗ.ТипОбъекта		= СтрокаРЗ.Объект.Метаданные().Имя;
	//КонецЦикла;
	
	Возврат тОбъекты;
	
КонецФункции	

Функция СтатусыДокументовПоДопСведениямПолучитьСостоянияОбъектов(tUID, Сервис = "", Аккаунт = "") Экспорт
	
	// Входящие параметры - таблица значений ИдСБИС
	УстановитьПривилегированныйРежим(Истина);
	
	// Собираем все ИД + с заполненным аккаунтом
	МассивИД = Новый Массив;
	Если ЗначениеЗаполнено(Аккаунт) Тогда
		Для Каждого Стр Из tUID Цикл
			МассивИД.Добавить(Стр.UID + "_" + СокрЛП(Аккаунт));
		КонецЦикла;
	Иначе
		МассивИД = tUID.ВыгрузитьКолонку("UID");
	КонецЕсли;
	// Ищем документы по свойству ДокументСБИС_Ид
	ИмяПВХ = ИнтеграцияСтатусыДокументов.ИмяПланаВидовХарактеристикСвойствОбъектов;
	СсылкаНаСвойствоИд = ПланыВидовХарактеристик[ИмяПВХ].НайтиПоНаименованию(СокрЛП(Сервис)
		+ "ДокументСБИС_Ид", Истина).Ссылка;
	
	// Находим все документы с ИД + Аккаунт
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
        |	ЗначенияСвойствОбъектов.Объект КАК Объект,
        |	ЗначенияСвойствОбъектов.Значение КАК UID_Аккаунт
        |ИЗ
        |	РегистрСведений." + ИнтеграцияСтатусыДокументов.ИмяРегистраСвойствОбъектов + " КАК ЗначенияСвойствОбъектов
        |ГДЕ
        |	ЗначенияСвойствОбъектов.Значение В (&МассивИД)
        |	И ЗначенияСвойствОбъектов.Свойство = &СсылкаНаСвойство
		|";
	Запрос.УстановитьПараметр("МассивИД",			МассивИД);
	Запрос.УстановитьПараметр("СсылкаНаСвойство",	СсылкаНаСвойствоИд);
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	
	Результат =  Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("UID", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("LINK");
	Результат.Колонки.Добавить("APPROVED", Новый ОписаниеТипов("Булево, Null"));
	Результат.Колонки.Добавить("ИдСБИС", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Сервис", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Аккаунт", Новый ОписаниеТипов("Строка"));
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НовСтрока = Результат.Добавить();
		
		СтрUID = СтрЗаменить(ВыборкаДетальныеЗаписи.UID_Аккаунт, "_", Символы.ПС);
		UID = СтрПолучитьСтроку(СтрUID, 1);
		НовСтрока.UID = UID;
		
		Если ВыборкаДетальныеЗаписи.Объект = Неопределено
			Или Не ОбщегоНазначения.ЭтоДокумент(ВыборкаДетальныеЗаписи.Объект.Метаданные()) Тогда 
			
			НовСтрока.APPROVED = Null;
		Иначе 
			НовСтрока.APPROVED = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыборкаДетальныеЗаписи.Объект, "Проведен");
		КонецЕсли;
		НовСтрока.LINK = ВыборкаДетальныеЗаписи.Объект;
		НовСтрока.ИдСБИС = UID;
		НовСтрока.Сервис = Сервис;
		НовСтрока.Аккаунт = Аккаунт;
	КонецЦикла;

	Возврат Результат;
	
КонецФункции

Функция СтатусыДокументовПоДопСведениямПрочитатьПоОбъекту(ОбъектИС, Сервис = "", Аккаунт = "") Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Объект", ОбъектИС);
	Результат.Вставить("Сервис", Сервис);
	Результат.Вставить("АктивныйЭтап", "");
	Результат.Вставить("Состояние", Неопределено);
	Результат.Вставить("UID", "");
	Результат.Вставить("SbisId", "");
	Результат.Вставить("Аккаунт", Аккаунт);
	
	УстановитьПривилегированныйРежим (Истина);
	
	// Ищем свойства по документу
	ИмяПВХ = ИнтеграцияСтатусыДокументов.ИмяПланаВидовХарактеристикСвойствОбъектов;
	МассивСвойств = Новый Массив;
	МассивСвойств.Добавить(ПланыВидовХарактеристик[ИмяПВХ].НайтиПоНаименованию(СокрЛП(Сервис)
		+ "ДокументСБИС_Ид", Истина).Ссылка);
	МассивСвойств.Добавить(ПланыВидовХарактеристик[ИмяПВХ].НайтиПоНаименованию(СокрЛП(Сервис)
		+ "ДокументСБИС_Статус", Истина).Ссылка);
	МассивСвойств.Добавить(ПланыВидовХарактеристик[ИмяПВХ].НайтиПоНаименованию(СокрЛП(Сервис) 
		+ "ДокументСБИС_ТекущийЭтап", Истина).Ссылка);
	
	// Находим все свойства
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
        |	ЗначенияСвойствОбъектов.Объект КАК Объект,
        |	ЗначенияСвойствОбъектов.Свойство КАК Свойство,
        |	ЗначенияСвойствОбъектов.Свойство.Наименование КАК Наименование,
        |	ЗначенияСвойствОбъектов.Значение КАК Значение
        |ИЗ
        |	РегистрСведений." + ИнтеграцияСтатусыДокументов.ИмяРегистраСвойствОбъектов + " КАК ЗначенияСвойствОбъектов
        |ГДЕ
        |	ЗначенияСвойствОбъектов.Объект = &Объект
        |	И ЗначенияСвойствОбъектов.Свойство В (&МассивСвойств)
        |;
		|";
	Запрос.УстановитьПараметр("Объект", ОбъектИС);
	Запрос.УстановитьПараметр("МассивСвойств", МассивСвойств);
	РезультатЗапросаТЗ = Запрос.Выполнить().Выгрузить();
	Если РезультатЗапросаТЗ.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для Каждого ВыборкаДетальныеЗаписи Из РезультатЗапросаТЗ Цикл
		Если ВыборкаДетальныеЗаписи.Наименование = СокрЛП(Сервис) + "ДокументСБИС_Ид" Тогда
			СтрUID = СтрЗаменить(ВыборкаДетальныеЗаписи.Значение, "_", Символы.ПС);
			UID = СтрПолучитьСтроку(СтрUID, 1);
			Результат.Вставить("UID", UID);
			Результат.Вставить("SbisId", UID);
		ИначеЕсли ВыборкаДетальныеЗаписи.Наименование = СокрЛП(Сервис) + "ДокументСБИС_Статус" Тогда
			Результат.Вставить("Состояние", ВыборкаДетальныеЗаписи.Значение);
		ИначеЕсли ВыборкаДетальныеЗаписи.Наименование = СокрЛП(Сервис) + "ДокументСБИС_ТекущийЭтап" Тогда
			Результат.Вставить("АктивныйЭтап", ВыборкаДетальныеЗаписи.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СтатусыДокументовПоДопСведениямУдалить(Объект, Сервис = "", Аккаунт = "") Экспорт
	СтатусыДокументовПоДопСведениямУдалитьСвойствоОбъекта(СокрЛП(Сервис) + "ДокументСБИС_Ид", Объект);
	СтатусыДокументовПоДопСведениямУдалитьСвойствоОбъекта(СокрЛП(Сервис) + "ДокументСБИС_Статус", Объект);
	СтатусыДокументовПоДопСведениямУдалитьСвойствоОбъекта(СокрЛП(Сервис) + "ДокументСБИС_ТекущийЭтап", Объект);
КонецФункции

Процедура СтатусыДокументовПоДопСведениямУдалитьПоUID(UID, Сервис = "", Аккаунт = "", АктивныйЭтап = "",
		Состояние = Неопределено, Объект = Неопределено, ИмяИС = Неопределено, ИдИС = Неопределено) Экспорт
		
	Если Объект = Неопределено Тогда
		Если ИмяИС <> Неопределено И ИдИС <> Неопределено Тогда
			Объект = ПолучитьСсылкуПоИдИС(ИмяИС, ИдИС);
			СтатусыДокументовПоДопСведениямУдалить(Объект, Сервис, Аккаунт);
		Иначе
			//Обновление нескольких Объектов с одинаковым - UID
			Выборка = СтатусыДокументовПоДопСведениямПрочитатьПоUID(UID, Сервис, Аккаунт);
			Пока Выборка.Следующий() Цикл
				СтатусыДокументовПоДопСведениямУдалить(Выборка.Объект, Сервис, Аккаунт);
			КонецЦикла;
		КонецЕсли;
	Иначе 	
		СтатусыДокументовПоДопСведениямУдалить(Объект, Сервис, Аккаунт);
	КонецЕсли;
	
КонецПроцедуры

Функция СтатусыДокументовПоДопСведениямПрочитатьПоUID(UID, Сервис = "", Аккаунт = "") Экспорт
	
	tUID = Новый ТаблицаЗначений;
	tUID.Колонки.Добавить("UID");
	НоваяСтрока = tUID.Добавить();
	НоваяСтрока.UID = UID;
	
	// Получим объекты по ИД
	ОбъектыТЗ = СтатусыДокументовПоДопСведениямПолучитьСостоянияОбъектов(tUID, Сервис, Аккаунт);
	
	МассивТипов = Новый Массив;
	Для Каждого Стр Из ОбъектыТЗ Цикл
		МассивТипов.Добавить(ТипЗнч(Стр.LINK));
	КонецЦикла;
	ОписаниеТиповОбъекта = Новый ОписаниеТипов(МассивТипов);	
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Объект", ОписаниеТиповОбъекта);
	Результат.Колонки.Добавить("Сервис", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("АктивныйЭтап", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Состояние", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("UID", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("SbisId", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Аккаунт", Новый ОписаниеТипов("Строка"));
	
	Результат.Индексы.Добавить("Объект");
	Для Каждого Стр Из ОбъектыТЗ Цикл
		НоваяСтрока = Результат.Добавить();
		НоваяСтрока.Объект = Стр.LINK;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим (Истина);
	
	// Ищем свойства по документу
	ИмяПВХ = ИнтеграцияСтатусыДокументов.ИмяПланаВидовХарактеристикСвойствОбъектов;
	МассивСвойств = Новый Массив;
	МассивСвойств.Добавить(ПланыВидовХарактеристик[ИмяПВХ].НайтиПоНаименованию(СокрЛП(Сервис)
		+ "ДокументСБИС_Ид", Истина).Ссылка);
	МассивСвойств.Добавить(ПланыВидовХарактеристик[ИмяПВХ].НайтиПоНаименованию(СокрЛП(Сервис)
		+ "ДокументСБИС_Статус", Истина).Ссылка);
	МассивСвойств.Добавить(ПланыВидовХарактеристик[ИмяПВХ].НайтиПоНаименованию(СокрЛП(Сервис) 
		+ "ДокументСБИС_ТекущийЭтап", Истина).Ссылка);
	
	// Находим все свойства
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
        |	ЗначенияСвойствОбъектов.Объект КАК Объект,
        |	ЗначенияСвойствОбъектов.Свойство КАК Свойство,
        |	ЗначенияСвойствОбъектов.Свойство.Наименование КАК Наименование,
        |	ЗначенияСвойствОбъектов.Значение КАК Значение
        |ИЗ
        |	РегистрСведений." + ИнтеграцияСтатусыДокументов.ИмяРегистраСвойствОбъектов + " КАК ЗначенияСвойствОбъектов
        |ГДЕ
        |	ЗначенияСвойствОбъектов.Объект В (&Объекты)
        |	И ЗначенияСвойствОбъектов.Свойство В (&МассивСвойств)
        |;
		|";
	Запрос.УстановитьПараметр("Объекты", ОбъектыТЗ.ВыгрузитьКолонку("LINK"));
	Запрос.УстановитьПараметр("МассивСвойств", МассивСвойств);
	РезультатЗапросаТЗ = Запрос.Выполнить().Выгрузить();
	Для Каждого ВыборкаДетальныеЗаписи Из РезультатЗапросаТЗ Цикл
		ПараметрыОтбора = Новый Структура("Объект", ВыборкаДетальныеЗаписи.Объект);
		НашлиСтроки = Результат.НайтиСтроки(ПараметрыОтбора);
		Для Каждого НашлиСтр Из НашлиСтроки Цикл
			Если ВыборкаДетальныеЗаписи.Наименование = СокрЛП(Сервис) + "ДокументСБИС_Ид" Тогда
				СтрUID = СтрЗаменить(ВыборкаДетальныеЗаписи.Значение, "_", Символы.ПС);
				UID = СтрПолучитьСтроку(СтрUID, 1);
				НашлиСтр.UID = UID;
				НашлиСтр.SbisId = UID;
			ИначеЕсли ВыборкаДетальныеЗаписи.Наименование = СокрЛП(Сервис) + "ДокументСБИС_Статус" Тогда
				НашлиСтр.Состояние = ВыборкаДетальныеЗаписи.Значение;
			ИначеЕсли ВыборкаДетальныеЗаписи.Наименование = СокрЛП(Сервис) + "ДокументСБИС_ТекущийЭтап" Тогда
				НашлиСтр.АктивныйЭтап = ВыборкаДетальныеЗаписи.Значение;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Сделаем возврат выборки, как в оригинале
	Попытка
		Запрос = Новый Запрос;
		Запрос.Текст = "
			|ВЫБРАТЬ
			|	ТЗДок.*
			|ПОМЕСТИТЬ тВрем
			|ИЗ
			|	&тОбъекты КАК ТЗДок
			|;
			|
			|ВЫБРАТЬ
			|	тВрем.*
			|ИЗ
			|	тВрем КАК тВрем
			|;
			|";
		Запрос.УстановитьПараметр("тОбъекты", Результат);
		Результат = Запрос.Выполнить().Выбрать();
	Исключение
		// Сделаем пустую выборку, если типы не определить и будет исключение!
		//   такое случается когда нет данных
		Запрос = Новый Запрос;
		Запрос.Текст = "
			|ВЫБРАТЬ
			|	ИСТИНА
			|ГДЕ
			|	ЛОЖЬ
			|;
			|";
		Запрос.УстановитьПараметр("тОбъекты", Результат);
		Результат = Запрос.Выполнить().Выбрать();
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Процедура СтатусыДокументовПоДопСведениямОбновитьПоUID(UID, Сервис = "", Аккаунт = "", АктивныйЭтап = "",
		Состояние = Неопределено, Объект = Неопределено, ИмяИС = Неопределено, ИдИС = Неопределено,
		СбисИд = Неопределено) Экспорт
	
	Если Объект = Неопределено Тогда
		Если ИмяИС <> Неопределено и ИдИС <> Неопределено Тогда
			Объект = ПолучитьСсылкуПоИдИС(ИмяИС, ИдИС);
			СтатусыДокументовПоДопСведениямОбновить(UID, Сервис, Аккаунт, АктивныйЭтап, Состояние, Объект, СбисИд);
		Иначе
			Выборка = СтатусыДокументовПоДопСведениямПрочитатьПоUID(UID, Сервис, Аккаунт);
			Пока Выборка.Следующий() Цикл
				СтатусыДокументовПоДопСведениямОбновить(UID, Сервис, Аккаунт, АктивныйЭтап, Состояние,
					Выборка.Объект, СбисИд);
			КонецЦикла;
		КонецЕсли;
	Иначе 	
		СтатусыДокументовПоДопСведениямОбновить(UID, Сервис, Аккаунт, АктивныйЭтап, Состояние, Объект, СбисИд);
	КонецЕсли;
	
КонецПроцедуры

Процедура СтатусыДокументовПоДопСведениямОбновить(UID, Сервис = "", Аккаунт = "", АктивныйЭтап = "",
		Состояние = Неопределено, Объект, СбисИд) Экспорт
	
	лUID = UID;
	Если ЗначениеЗаполнено(Аккаунт) И ЗначениеЗаполнено(лUID) Тогда
		лUID = лUID + "_" + СокрЛП(Аккаунт);
	КонецЕсли;
	СтатусыДокументовПоДопСведениямДобавитьСвойствоОбъекта(СокрЛП(Сервис)
		+ "ДокументСБИС_Ид", лUID, Объект);
	лСостояние = ?(Состояние = Неопределено, "", Состояние);
	СтатусыДокументовПоДопСведениямДобавитьСвойствоОбъекта(СокрЛП(Сервис)
		+ "ДокументСБИС_Статус", СокрЛП(лСостояние), Объект);
	СтатусыДокументовПоДопСведениямДобавитьСвойствоОбъекта(СокрЛП(Сервис)
		+ "ДокументСБИС_ТекущийЭтап", АктивныйЭтап, Объект);
	
КонецПроцедуры


// Удалени/добавление/обновление свойств в регистре доп.сведений конфигурации

// Удаление свойства из рег.сведений, где хранятся статусы и идентификаторы СБИС
Функция СтатусыДокументовПоДопСведениямУдалитьСвойствоОбъекта(ИмяСвойства, ДокументСсылка) Экспорт
	ИмяПВХ = ИнтеграцияСтатусыДокументов.ИмяПланаВидовХарактеристикСвойствОбъектов;
	ЗначениеСвойства = ПланыВидовХарактеристик[ИмяПВХ].НайтиПоНаименованию(ИмяСвойства, Истина).Ссылка;
	
	// удаляет значение параметра из регистра сведений	
	ИмяРегистраСвойствОбъектов = ИнтеграцияСтатусыДокументов.ИмяРегистраСвойствОбъектов;
	НаборЗаписей = РегистрыСведений[ИмяРегистраСвойствОбъектов].СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(ДокументСсылка);
	НаборЗаписей.Отбор.Свойство.Установить(ЗначениеСвойства);
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() > 0 Тогда	
		Попытка
			НаборЗаписей.Очистить(); 
			НаборЗаписей.Записать();
		Исключение
			ИнфОбОшибке = ИнформацияОбОшибке();
			ВызватьИсключение NewExtExceptionСтрока(ИнфОбОшибке,,, "Удаление статуса");
		КонецПопытки;
	КонецЕсли;
КонецФункции

// Запись свойства в рег.сведений, где хранятся статусы и идентификаторы СБИС
Функция СтатусыДокументовПоДопСведениямДобавитьСвойствоОбъекта(ИмяСвойства, ЗначениеСвойства, ДокументСсылка) Экспорт
	
	ИмяПВХ = ИнтеграцияСтатусыДокументов.ИмяПланаВидовХарактеристикСвойствОбъектов;
	СвойствоСсылка = ПланыВидовХарактеристик[ИмяПВХ].НайтиПоНаименованию(ИмяСвойства, Истина).Ссылка;
	
	// устанавливает значение параметра в регистре сведений	
	ОбновлятьЗначение = Истина;
	ИмяРегистраСвойствОбъектов = ИнтеграцияСтатусыДокументов.ИмяРегистраСвойствОбъектов;
	НаборЗаписей = РегистрыСведений[ИмяРегистраСвойствОбъектов].СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(ДокументСсылка);
	НаборЗаписей.Отбор.Свойство.Установить(СвойствоСсылка);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		НоваяЗаписьНабора = НаборЗаписей.Добавить();
		НоваяЗаписьНабора.Объект = ДокументСсылка;
		НоваяЗаписьНабора.Свойство = СвойствоСсылка;
	Иначе
		НоваяЗаписьНабора = НаборЗаписей.Получить(0);	
	КонецЕсли;
	Если ОбновлятьЗначение Тогда
		Попытка
			НоваяЗаписьНабора.Значение = ЗначениеСвойства;
			НаборЗаписей.Записать();
		Исключение
			ИнфОбОшибке = ИнформацияОбОшибке();
			ВызватьИсключение NewExtExceptionСтрока(ИнфОбОшибке,,, "Обновление статуса");
		КонецПопытки;
	КонецЕсли;
	
	Возврат ОбновлятьЗначение;
	
КонецФункции


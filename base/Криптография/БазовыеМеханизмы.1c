Функция сбисПрограммыКриптографии() Экспорт
	
    Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ 
					|		Программы.ИмяПрограммы, 
					|		Программы.ТипПрограммы, 
					|		ЕстьNULL(Пути.ПутьКПрограмме,"""") КАК ПутьКПрограмме
					|	Из Справочник.ПрограммыЭлектроннойПодписиИШифрования КАК Программы
					|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПутиКПрограммамЭлектроннойПодписиИШифрованияНаСерверахLinux КАК Пути ПО Программы.Ссылка = Пути.Программа
					|		ГДЕ НЕ ПометкаУдаления
					|";
	ОписанияПрограмм = Новый Массив; 
	Попытка
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СвойстваПрограммы = Новый Структура("ИмяПрограммы,ПутьКПрограмме,ТипПрограммы", Выборка.ИмяПрограммы,Выборка.ПутьКПрограмме,Выборка.ТипПрограммы);
			ОписанияПрограмм.Добавить(СвойстваПрограммы);
		КонецЦикла;
	Исключение
	КонецПопытки;
	Возврат ОписанияПрограмм;
КонецФункции

Функция сбисОпределитьДанныеДляПодписания(context, doc, action) Экспорт
	ДанныеДляПодписания = Новый Структура();
	Если get_prop(action, "ТребуетПодписания")="Да" Тогда
		СертификатыДействия = get_prop(action, "Сертификат");
		Если СертификатыДействия <> Неопределено и СертификатыДействия.Количество() Тогда
			ЛокальныеСертификатыНаКлиенте = ХранилищеОбщихНастроек.Загрузить("Saby", "КэшЛокальныхСертификатов");
			ЛокальныеСертификатыНаСервере = сбисСписокЛокальныхСертификатовНаСервере();		
			ДанныеДляПодписания = сбисВыбратьПодходящийСертификат(СертификатыДействия, ЛокальныеСертификатыНаСервере, ЛокальныеСертификатыНаКлиенте);
		КонецЕсли;
	КонецЕсли;
	Возврат ДанныеДляПодписания;
КонецФункции

Функция сбисВыбратьПодходящийСертификат(СертификатыДок, ЛокальныеСертификатыНаСервере, ЛокальныеСертификатыНаКлиенте) Экспорт               
	Результат = Новый Структура();
	Для Каждого СертДок Из СертификатыДок Цикл
		Если СертДок["Ключ"]["Тип"] = "Отложенный" или СертДок["Ключ"]["Тип"] = "ОтложенныйСПодтверждением" или СертДок["Ключ"]["Тип"] = "Серверный" Тогда
			Результат.Вставить("СертификатДляПодписания", Неопределено);
			Результат.Вставить("СертификатДок", СертДок); 
			Результат.Вставить("Тип", "Отложенное");
			Возврат Результат;
		ИначеЕсли СертДок["Ключ"]["Тип"] = "Клиентский" Тогда
			Для Каждого Серт из ЛокальныеСертификатыНаСервере.Отпечатки Цикл
				СертОтпечаток = СтрЗаменить(Строка(Серт), " ", "");
				Если СертОтпечаток = СертДок["Отпечаток"] Тогда
			        НаборАлгоритмов = сбисВыбратьНаборАлгоритмовДляСозданияПодписи(СертДок["Алгоритм"]);
					Для Каждого Алгоритм Из ЛокальныеСертификатыНаСервере.Алгоритмы Цикл
						Если НаборАлгоритмов.Найти(Алгоритм.Ключ) <> Неопределено Тогда
							Результат.Вставить("СертификатДляПодписания", Новый Структура("Отпечаток, Алгоритм", Серт, Алгоритм.Ключ));    
							Результат.Вставить("СертификатДок", СертДок);
							Результат.Вставить("Тип", "ЛокальноеНаСервере");
							Возврат Результат;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла; 
			Если ЛокальныеСертификатыНаКлиенте <> Неопределено Тогда
				Для Каждого Серт из ЛокальныеСертификатыНаКлиенте.Отпечатки Цикл
					СертОтпечаток = СтрЗаменить(Строка(Серт), " ", "");
					Если СертОтпечаток = СертДок["Отпечаток"] Тогда
	                    НаборАлгоритмов = сбисВыбратьНаборАлгоритмовДляСозданияПодписи(СертДок["Алгоритм"]);
						Для Каждого Алгоритм Из ЛокальныеСертификатыНаКлиенте.Алгоритмы Цикл
							Если НаборАлгоритмов.Найти(Алгоритм.Ключ) <> Неопределено Тогда
								Результат.Вставить("СертификатДляПодписания", Новый Структура("Отпечаток, Алгоритм", Серт, Алгоритм.Ключ));    
								Результат.Вставить("СертификатДок", СертДок);
								Результат.Вставить("Тип", "ЛокальноеНаКлиенте");
								Возврат Результат;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		ИначеЕсли СертДок["Ключ"]["Тип"] = "Дистанционный" Тогда
			Результат.Вставить("СертификатДляПодписания", Новый Структура("Отпечаток", СертДок["Отпечаток"]));
			Результат.Вставить("СертификатДок", СертДок);
			Результат.Вставить("Тип", "Дистанционное");
			Возврат Результат;
		ИначеЕсли СертДок["Ключ"]["Тип"] = "ПростаяПодпись" Тогда
			Результат.Вставить("Тип", "Простое");
			Результат.Вставить("СертификатДляПодписания", Истина);
			Результат.Вставить("СертификатДок", Новый Структура("ФИО,ИНН", СертДок["ФИО"], СертДок["ИНН"]));
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;

КонецФункции

Функция get_signatures(context, doc, ДанныеДляПодписания, block_context)
	Если ДанныеДляПодписания["Тип"] = "Дистанционное" Тогда
		ПодписатьДистанционно(context, doc["Этап"]["Вложение"], ДанныеДляПодписания["СертификатДляПодписания"]);
	ИначеЕсли ДанныеДляПодписания["Тип"] = "ЛокальноеНаСервере" Тогда
		ПодписатьНаСервере(context, doc["Этап"]["Вложение"], ДанныеДляПодписания["СертификатДляПодписания"]);	
	ИначеЕсли ДанныеДляПодписания["Тип"] = "ЛокальноеНаКлиенте" Тогда
		ПодписатьНаКлиенте(context, doc["Этап"]["Вложение"], ДанныеДляПодписания, block_context);
	ИначеЕсли ДанныеДляПодписания["Тип"] = "Простое" Тогда
		doc["Этап"].Удалить("Вложение");
		Возврат Неопределено;
	КонецЕсли;
	
	// Чистим вложения от лишней информации
	Вложения = Новый Массив;	
	Для каждого _Вложение из doc["Этап"]["Вложение"] Цикл
		Вложения.Добавить(Новый Структура("Идентификатор, Подпись", _Вложение["Идентификатор"], _Вложение["Подпись"]));		
	КонецЦикла;
	doc["Этап"]["Вложение"] = Вложения;
КонецФункции

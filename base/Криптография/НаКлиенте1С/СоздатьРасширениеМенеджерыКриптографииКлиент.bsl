
&НаКлиенте
Процедура СоздатьМенеджерыКриптографии(ОбработчикРезультата, Алгоритм = Неопределено)
	
	// Получаем асинхронно
	Контекст = Новый Структура;
	Контекст.Вставить("Алгоритм", Алгоритм);
	Контекст.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	
	// Инициализируем параметры перед началом работы
	ПрограммыКриптографии = Saby_ФоновыеЗаданияСервер.ПрограммыКриптографии();
	Контекст.Вставить("ПрограммыКриптографии", ПрограммыКриптографии);
	Контекст.Вставить("КоличествоПрограммКриптографии", ПрограммыКриптографии.Количество());
	Контекст.Вставить("ТекущийИндексПрограммыКриптографии", -1);
	Контекст.Вставить("Менеджеры", Новый Массив);
	Контекст.Вставить("Менеджер", Неопределено);
	Контекст.Вставить("МенеджерКриптографии", Неопределено);
	РасширениеМенеджерыКриптографии = Неопределено; // Глобальная переменная этого модуля!!!
	
	ОбработчикСледующегоШага = Новый ОписаниеОповещения(
		"СоздатьМенеджерыКриптографииНачатьСоздание", МодульФункции(), Контекст);
	
	#Если ВебКлиент Тогда
		ПодключитьРасширениеРаботыСКриптографиейНаВебКлиенте(ОбработчикСледующегоШага);
	#Иначе
		ВыполнитьОбработкуОповещения(ОбработчикСледующегоШага, Истина);
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьМенеджерыКриптографииНачатьСоздание(УдалосьПодключитьРасширениеРаботыСКриптографией,
		Контекст) Экспорт
	
	Если НЕ УдалосьПодключитьРасширениеРаботыСКриптографией Тогда // Если не удалось подключить расширение (для веб-клиента, для остальных всегда должно быть Истина) -> заканчиваем
		ВыполнитьОбработкуОповещения(Контекст.ОбработчикРезультата, Неопределено); // Ошибка
		Возврат;
	КонецЕсли;
	
	СоздатьМенеджерыКриптографииЦиклНачало(Контекст);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьМенеджерыКриптографииЦиклНачало(Контекст)
	
	Контекст.ТекущийИндексПрограммыКриптографии = Контекст.ТекущийИндексПрограммыКриптографии + 1;
	Если Контекст.ТекущийИндексПрограммыКриптографии < Контекст.КоличествоПрограммКриптографии Тогда
		
		СвойстваПрограммы = Контекст.ПрограммыКриптографии[Контекст.ТекущийИндексПрограммыКриптографии];
		СредстваКриптографии.НачатьПолучениеИнформацииМодуляКриптографии(
			Новый ОписаниеОповещения(
				"СоздатьМенеджерыКриптографииПослеПолученияИнформацииМодуляКриптографии", МодульФункции(), Контекст,
				"СоздатьМенеджерыКриптографииПослеОшибкиПолученияИнформацииМодуляКриптографии", МодульФункции()),
			СвойстваПрограммы.ИмяПрограммы, СвойстваПрограммы.ПутьКПрограмме, СвойстваПрограммы.ТипПрограммы);
		
	Иначе
		СоздатьМенеджерыКриптографииЗавершение(Контекст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьМенеджерыКриптографииПослеОшибкиПолученияИнформацииМодуляКриптографии(ИнформацияОбОшибке,
		СтандартнаяОбработка, Контекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	СоздатьМенеджерыКриптографииЦиклНачало(Контекст);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьМенеджерыКриптографииПослеПолученияИнформацииМодуляКриптографии(ИнформацияМодуля,
		Контекст) Экспорт
	
	Если ИнформацияМодуля <> Неопределено Тогда
		СоздатьМенеджерыКриптографииНачатьИнициализацию(Контекст);
	Иначе
		СоздатьМенеджерыКриптографииЦиклНачало(Контекст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьМенеджерыКриптографииНачатьИнициализацию(Контекст)
	
	СвойстваПрограммы = Контекст.ПрограммыКриптографии[Контекст.ТекущийИндексПрограммыКриптографии];
	
    Криптография = Новый МенеджерКриптографии;
    Криптография.НачатьИнициализацию(
        Новый ОписаниеОповещения(
            "СоздатьМенеджерыКриптографииПослеИнициализацииМенеджераКриптографии", МодульФункции(), Контекст,
            "СоздатьМенеджерыКриптографииПослеОшибкиИнициализацииМенеджераКриптографии", МодульФункции()),
		СвойстваПрограммы.ИмяПрограммы, СвойстваПрограммы.ПутьКПрограмме, СвойстваПрограммы.ТипПрограммы,
		ИспользованиеИнтерактивногоРежимаКриптографии.НеИспользовать);
		
КонецПроцедуры

&НаКлиенте
Процедура СоздатьМенеджерыКриптографииПослеОшибкиИнициализацииМенеджераКриптографии(ИнформацияОбОшибке,
		СтандартнаяОбработка, Контекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	СоздатьМенеджерыКриптографииЦиклНачало(Контекст);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьМенеджерыКриптографииПослеИнициализацииМенеджераКриптографии(МенеджерКриптографии,
		Контекст) Экспорт
	
	ВсеХорошо = Истина;
	Контекст.Менеджер = МенеджерКриптографии;
	
	Если Контекст.Алгоритм <> Неопределено Тогда
		Если Контекст.Менеджер.АлгоритмПодписи <> Контекст.Алгоритм Тогда
			ВсеХорошо = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ВсеХорошо Тогда
    	Контекст.Менеджеры.Добавить(Контекст.Менеджер);
	КонецЕсли;
	
	СоздатьМенеджерыКриптографииЦиклНачало(Контекст);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьМенеджерыКриптографииЗавершение(Контекст)
	
	ВыполнитьОбработкуОповещения(Контекст.ОбработчикРезультата, Контекст.Менеджеры);
	
КонецПроцедуры


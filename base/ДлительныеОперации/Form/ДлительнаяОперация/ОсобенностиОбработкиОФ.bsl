Процедура ПриОткрытии()
	ПодключитьОбработчикОжидания("ПослеОткрытия", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьOperationUuid(Источник) 
	OperationUuid = get_prop(Источник,"operation_uuid", Неопределено);
	Если OperationUuid <> Неопределено Тогда
		Команда.Вставить("operation_uuid",OperationUuid); 
		Возврат;
	КонецЕсли; 
	OperationUuid = block_obj_get_path_value(Источник, "result.Uuid",Неопределено);
	Если block_obj_get_path_value(Источник, "result.Uuid",Неопределено) <> Неопределено Тогда
		Команда.Вставить("operation_uuid",OperationUuid); 
		Возврат;	
	КонецЕсли;	
КонецПроцедуры


&НаКлиенте
Процедура ПослеОткрытия()
	ТекстСообщенияПоУмолчанию = "Операция выполняется";
	ТекстСообщения = "Операция выполняется";
	ПараметрыКоманды = Команда;
	ПараметрыКоманды.Вставить("ДлительнаяОперация", Новый Структура);
	
	ПараметрыКоманды["ДлительнаяОперация"].Вставить("form", ЭтаФорма);
    Результат = МодульОбъекта().API_BLOCKLY_RUN_CLIENT(ПараметрыКоманды);
	
	КартинкаОповещения = КартинкаОшибка();
	Если Результат.Свойство("status") И Результат.status = "complete" Тогда
		КартинкаОповещения = КартинкаУспешно();
		Результатdata = Результат.data; 
		ЗаполнитьOperationUuid(Результатdata);
		CountErrors = get_prop(Результатdata,"CountErrors",0);
		Если CountErrors > 0 Тогда
			КартинкаОповещения = КартинкаОшибка();
		КонецЕсли;
		ОшибкаAddon = get_prop(Результатdata,"result",Неопределено);
		ОшибкаAddon = get_prop(ОшибкаAddon,"CountErrors",0);
;
		Если ОшибкаAddon > 0 Тогда
			КартинкаОповещения = КартинкаОшибка();
		КонецЕсли;			
		Если ТекстСообщения = ТекстСообщенияПоУмолчанию Тогда
			ТекстОповещения = "Операция выполнена";
		Иначе
			ТекстОповещения = ТекстСообщения; 
		КонецЕсли;
	ИначеЕсли Результат.Свойство("status") И Результат.status = "error" Тогда
		РезультатData = get_prop(Результат, "data");
		ТекстОповещения	= get_prop(РезультатData, "message") +" "+ get_prop(РезультатData, "detail");
	Иначе
		ТекстОповещения	= "Неизвестная ошибка выполнения";	
	КонецЕсли;
	ТекстСообщения = ТекстОповещения;
	
	ЭлементыФормы.КартинкаСостояния.Картинка = КартинкаОповещения;
//	НавигационнаяСсылкаОповещения = Новый ОписаниеОповещения("ОткрытьФормуОтчетаОЗагрузке", ЭтаФорма, ПараметрыКоманды);  
	//НавигационнаяСсылкаОповещения = "e1cib/list/РегистрСведений.МойРегистрСведений";
//	ПоказатьОповещениеПользователя(ТекстОповещения,НавигационнаяСсылкаОповещения,,КартинкаОповещения);
	Оповестить("Saby_ЗавершениеДлительнойОперации", Результат);
	МассивОперацийОЗагрузке = Новый Массив;
	МассивОперацийОЗагрузке.Добавить("Отправка в "+ЛокализацияНазваниеПродукта()); //команда - "Отправка в СБИС"
	МассивОперацийОЗагрузке.Добавить("Выгрузка в 1С");
	МассивОперацийОЗагрузке.Добавить("");
	НазваниеОперации = get_prop(ПараметрыКоманды,"НазваниеОперации","");
	
	Если МассивОперацийОЗагрузке.Найти(НазваниеОперации) <> Неопределено Тогда
		ЭлементыФормы.ТекстСообщения.Гиперссылка = ИСТИНА;
		ЭлементыФормы.ТекстСообщения.УстановитьДействие("Нажатие", Новый Действие("ОткрытьФормуОтчетаОЗагрузке"));
	КонецЕсли;
	
	//Попытка
	//	ЭтаФорма.Закрыть(); // Закрываем, если в ПослеВыполненияДействия() вызвывающей формы нет закрытия
	//Исключение
	//КонецПопытки;
КонецПроцедуры



Процедура ОткрытьФормуОтчетаОЗагрузке(Элемент) Экспорт
	context_param = НастройкиПодключенияПрочитать();
	URL = get_prop(context_param,"api_url","");
	АдресСтраницы = ПолучитьАдресСтраницыОтчетОЗагрузке(URL, Команда["operation_uuid"]); 
	ПараметрыФормы = Новый Структура( "Заголовок, АдресСтраницы", АдресСтраницы, АдресСтраницы);
	ОткрытьФормуОбработки("Browser", ПараметрыФормы);
КонецПроцедуры


#Область include_core_base_Helpers_Картинки
#КонецОбласти


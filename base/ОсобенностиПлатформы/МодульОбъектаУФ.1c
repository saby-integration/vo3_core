
Функция ПолучитьСписокПрикреплёныхФайлов(ВладелецФайлов)
	
	ВладелецФайла = ВладелецФайлов;
	
	ЕстьСотрудники = Метаданные.Справочники.Найти("Сотрудники") <> Неопределено;
	Если ЕстьСотрудники И ТипЗнч(ВладелецФайла) = Тип("СправочникСсылка.Сотрудники") Тогда
		ВладелецФайла = ПолучитьФизЛицоСотрудника(ВладелецФайла);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	//Взято из формы "Присоединенные файлы" - обработки - РаботаСФайлами	
	ТипВладельца				  = ТипЗнч(ВладелецФайла);
	ИмяСправочникаХранилищаФайлов = РаботаСФайламиСлужебный.ИмяСправочникаХраненияФайлов(ВладелецФайла,"",,);
	
	Если Не ЗначениеЗаполнено(ИмяСправочникаХранилищаФайлов) Тогда
		//Может приддти вид объекта не использующий подсистему прикреплёных файлов, от чего отправка ПФ может упасть с ошибкой
		//Например клиенты используют свой-новый вид документов.
		Возврат Новый Массив;
	КонецЕсли;
	
	ТипСправочникаСФайлами           = Тип("СправочникСсылка." + ИмяСправочникаХранилищаФайлов);
	МетаданныеСправочникаСФайлами    = Метаданные.НайтиПоТипу(ТипСправочникаСФайлами);
	ВозможностьСоздаватьГруппыФайлов = МетаданныеСправочникаСФайлами.Иерархический;

	ЕстьРеквизитСлужебный            = Ложь;
	ВозможностьСоздаватьГруппыФайлов = Ложь;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Файлы.Ссылка КАК Ссылка,
	|	Файлы.ПометкаУдаления,
	|	ВЫБОР
	|		КОГДА Файлы.ПометкаУдаления = ИСТИНА
	|			ТОГДА ЕСТЬNULL(Файлы.ИндексКартинки, 2) + 1
	|		ИНАЧЕ ЕСТЬNULL(Файлы.ИндексКартинки, 2)
	|	КОНЕЦ КАК ИндексКартинки,
	|	Файлы.Наименование КАК Наименование,
	|	ВЫРАЗИТЬ(Файлы.Описание КАК СТРОКА(500)) КАК Описание,
	|	Файлы.Автор,
	|	Файлы.ДатаСоздания,
	|	Файлы.Изменил КАК Отредактировал,
	|	ДОБАВИТЬКДАТЕ(Файлы.ДатаМодификацииУниверсальная, СЕКУНДА, &СекундДоМестногоВремени) КАК ДатаИзменения,
	|	ВЫРАЗИТЬ(Файлы.Размер / 1024 КАК ЧИСЛО(10, 0)) КАК Размер,
	|	Файлы.ПодписанЭП,
	|	Файлы.Зашифрован,
	|	ВЫБОР
	|		КОГДА Файлы.ПодписанЭП
	|				И Файлы.Зашифрован
	|			ТОГДА 2
	|		КОГДА Файлы.Зашифрован
	|			ТОГДА 1
	|		КОГДА Файлы.ПодписанЭП
	|			ТОГДА 0
	|		ИНАЧЕ -1
	|	КОНЕЦ КАК НомерКартинкиПодписанЗашифрован,
	|	ВЫБОР
	|		КОГДА НЕ Файлы.Редактирует В (&ПустыеПользователи)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ФайлРедактируется,
	|	ВЫБОР
	|		КОГДА Файлы.Редактирует = &ТекущийПользователь
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ФайлРедактируетТекущийПользователь,
	|	ВЫБОР
	|		КОГДА НЕ Файлы.Редактирует В (&ПустыеПользователи)
	|				И Файлы.Редактирует <> &ТекущийПользователь
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ФайлРедактируетДругойПользователь,
	|	Файлы.Расширение КАК Расширение,
	|	ВЫБОР
	|		КОГДА СтатусыСинхронизацииФайловСОблачнымСервисом.УчетнаяЗапись <> НЕОПРЕДЕЛЕНО
	|				И Файлы.Редактирует = НЕОПРЕДЕЛЕНО
	|			ТОГДА СтатусыСинхронизацииФайловСОблачнымСервисом.УчетнаяЗапись
	|		ИНАЧЕ Файлы.Редактирует
	|	КОНЕЦ КАК Редактирует,
	|	Файлы.Редактирует КАК РедактируетПользователь,
	|	&ЭтоГруппа КАК ЭтоГруппа,
	|	&Служебный КАК Служебный,
	|	Файлы.ВладелецФайла КАК ВладелецФайла,
	|	Файлы.ХранитьВерсии КАК ХранитьВерсии
	|ИЗ
	|	&ИмяСправочника КАК Файлы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыСинхронизацииФайловСОблачнымСервисом КАК СтатусыСинхронизацииФайловСОблачнымСервисом
	|		ПО Файлы.Ссылка = СтатусыСинхронизацииФайловСОблачнымСервисом.Файл
	|ГДЕ
	|	Файлы.ВладелецФайла = &ВладелецФайлов";
	
	ПолноеИмяСправочника = "Справочник." + ИмяСправочникаХранилищаФайлов;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяСправочника", ПолноеИмяСправочника);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Служебный", ?(ЕстьРеквизитСлужебный, "Файлы.Служебный", "ЛОЖЬ"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЭтоГруппа",
		?(ВозможностьСоздаватьГруппыФайлов, "Файлы.ЭтоГруппа", "ЛОЖЬ"));
		
		
	ПустыеПользователи = Новый Массив;
	ПустыеПользователи.Добавить(Неопределено);
	ПустыеПользователи.Добавить(Справочники.Пользователи.ПустаяСсылка());
	ПустыеПользователи.Добавить(Справочники.ВнешниеПользователи.ПустаяСсылка());
	ПустыеПользователи.Добавить(Справочники.УчетныеЗаписиСинхронизацииФайлов.ПустаяСсылка());
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("ВладелецФайлов",      ВладелецФайла);
	Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.АвторизованныйПользователь());
	Запрос.УстановитьПараметр("ПустыеПользователи",  ПустыеПользователи);
	
	ДатаУниверсальная = ТекущаяДатаСеанса();
	Запрос.УстановитьПараметр("СекундДоМестногоВремени",
		МестноеВремя(ДатаУниверсальная, ЧасовойПоясСеанса()) - ДатаУниверсальная);
		
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

Функция ПолучитьПечатныеФормы(Знач СсылкаНаОбъект, Вложения = Неопределено)
	Если ТипЗнч(Вложения) <> Тип("Массив") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если СсылкаНаОбъект = Неопределено Тогда
		Возврат Вложения;
	Иначе
		ВидМетаданных = СсылкаНаОбъект.Метаданные();
	КонецЕсли;
		
	Попытка
		КомандыПечатиФормы	= УправлениеПечатью.КомандыПечатиОбъекта(ВидМетаданных);
	Исключение
		//У объекта в менеджере объекта отсутствует процедура - ДобавитьКомандыПечати  
		Возврат Вложения;
	КонецПопытки;
	
	//Прикреплённые файлы
	//ТаблицаПрикреплённыхФайловОбъекта = РаботаСФайламиСлужебный.ВсеПодчиненныеФайлы(СсылкаНаОбъект);
	//ТаблицаПрикреплённыхФайловОбъекта = РаботаСФайламиСлужебный.ПолучитьВсеПодчиненныеФайлы(СсылкаНаОбъект);
	//^--- Дают пустой массив, поэтому укрдем функцию из обработки - РаботаСФайлами
	ТаблицаПрикреплённыхФайловОбъекта = ПолучитьСписокПрикреплёныхФайлов(СсылкаНаОбъект);
	//Прикреплённые файлы
	
	Отбор = Новый Структура("Отключена, СкрытаФункциональнымиОпциями", Ложь, Ложь);
	КомандыПФ = КомандыПечатиФормы.НайтиСтроки(Отбор);
	ИндексВложения = -1;
	Для Каждого Вложение Из Вложения Цикл
		ИндексВложения = ИндексВложения + 1;
		Если	(Вложение["Файл"] = Неопределено ИЛИ get_prop(Вложение["Файл"], "ПечатнаяФормаДокумента") = Неопределено)
				И
				(get_prop(Вложение["Файл"], "ПрисоединенныйФайл") <> Истина) Тогда
			Продолжить;
		КонецЕсли;
		
		Если get_prop(Вложение["Файл"], "ПрисоединенныйФайл", Ложь) = Истина Тогда
		 	//Прикреплённый файл
			Для Каждого ПрикрепненныйФайл Из ТаблицаПрикреплённыхФайловОбъекта Цикл
				Если ПрикрепненныйФайл.ПометкаУдаления Тогда Продолжить; КонецЕсли;
				Если ПрикрепненныйФайл.Наименование = Вложение["Название"] Тогда
					ДанныеФайла	= РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайла(ПрикрепненныйФайл.Ссылка,,Истина);
					ИмяФайла	= ДанныеФайла.ИмяФайла;
					ТипКонтента	= ПолучитьКонтентТипВложения(ИмяФайла);
					ФайлДД		= ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
					ФайлBase64	= Base64Строка(ФайлДД);
					
					Вложение["Файл"].Удалить("ПрисоединенныйФайл");
                    ВставитьСвойствоЕслиНет(Вложение["Файл"], "Имя", ИмяФайла);
                    ВставитьСвойствоЕслиНет(Вложение["Файл"], "ДвоичныеДанные", ФайлBase64);
                    ВставитьСвойствоЕслиНет(Вложение["Файл"], "ContentType", ТипКонтента);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		 	//Прикреплённый файл
		Иначе
			
			//Печатная форма
			ДобавленныеПФ = Новый Соответствие();
			мКомандыПечатиФормы = КомандыПечатиФормы.НайтиСтроки( Новый Структура("Представление", Вложение["Название"]) );
			Для Каждого Команда Из мКомандыПечатиФормы Цикл
				Если Найти(Команда.Обработчик, "КадровыйЭДОКлиент") > 0 Тогда Продолжить; КонецЕсли;
				Если ДобавленныеПФ[Команда.Представление] <> Неопределено Тогда Продолжить; КонецЕсли;
				ДобавленныеПФ.Вставить(Команда.Представление, Истина);
				КомандаПечати = Новый Структура("Обработчик, МенеджерПечати, Идентификатор, Представление, ПроверкаПроведенияПередПечатью, ПроверкаПроведенияПередПечатью, ФункциональныеОпции, ИсточникДанных",);
				ЗаполнитьЗначенияСвойств(КомандаПечати, Команда);
				КомандаПечати.Вставить("ИсточникДанных", СсылкаНаОбъект); 
				
				ПараметрыПечати = Новый Структура("ДополнитьКомплектВнешнимиПечатнымиФормами", Ложь);
				ОбъектыПечати = Новый Массив;
				ОбъектыПечати.Добавить(КомандаПечати.ИсточникДанных);
				
				ПечатныеФормы = Новый Массив();
				// Формирование табличных документов.
				Если Найти(КомандаПечати.Менеджерпечати, "ДополнительныеОтчетыИОбработки") > 0 Тогда
					СсылкаНаПечатнуюФорму	= Команда.ДополнительныеПараметры.Ссылка;
					Если СсылкаНаПечатнуюФорму.Пустая() Тогда ВызватьИсключение("Отсутствует внешняя печатная форма.") КонецЕсли;
					ПараметрыВызова	= Новый Структура("ИдентификаторКоманды, ОбъектыНазначения", КомандаПечати.Идентификатор, ОбъектыПечати);
					ПечатныеФормы	= Неопределено;
					ОбъектыПечати	= Новый СписокЗначений;
					ПараметрыВывода	= Неопределено;
					Попытка
						УправлениеПечатью.ПечатьПоВнешнемуИсточнику(
							СсылкаНаПечатнуюФорму,
							ПараметрыВызова,
							ПечатныеФормы,
							ОбъектыПечати,
							ПараметрыВывода
						);
					Исключение
						ИнфОбОшибке = ИнформацияОбОшибке();
						ВызватьИсключение NewExtExceptionСтрока(ИнфОбОшибке,"Ошибка при формировании печатной формы", Команда.Представление+" ("+ИнфОбОшибке.Описание+")");
					КонецПопытки;
				Иначе
					Попытка
						ПечатныеФормы = УправлениеПечатью.СформироватьПечатныеФормы(КомандаПечати.МенеджерПечати, КомандаПечати.Идентификатор,
						ОбъектыПечати, ПараметрыПечати);
					Исключение
						ИнфОбОшибке = ИнформацияОбОшибке();
						ВызватьИсключение NewExtExceptionСтрока(ИнфОбОшибке,"Ошибка при формировании печатной формы", Команда.Представление+" ("+ИнфОбОшибке.Описание+")");
					КонецПопытки;
					Если ТипЗнч(ПечатныеФормы) = Тип("Структура") Тогда
						Если ПечатныеФормы.Свойство("КоллекцияПечатныхФорм") ТОгда
							ПечатныеФормы = ПечатныеФормы.КоллекцияПечатныхФорм;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				ТабличныйДокумент = Новый ТабличныйДокумент;
				Для Каждого ПечатнаяФорма Из ПечатныеФормы Цикл
					Попытка
						НазваниеПФ = Команда.Представление;
						Вложение["Название"] = ПривестиСтрокуКВалидномуИмениФайла(НазваниеПФ);
						Вложение["Файл"].Удалить("ПечатнаяФормаДокумента");
						
						ПотокВПамяти = Новый ПотокВПамяти;
						ПечатнаяФорма.ТабличныйДокумент.Записать(ПотокВПамяти, ТипФайлаТабличногоДокумента.PDF);
						ФайлBase64 = Base64Строка(ПотокВПамяти.ЗакрытьИПолучитьДвоичныеДанные());
						
						ВставитьСвойствоЕслиНет(Вложение["Файл"], "Имя", НазваниеПФ+".pdf");
						ВставитьСвойствоЕслиНет(Вложение["Файл"], "ДвоичныеДанные", ФайлBase64);
						ВставитьСвойствоЕслиНет(Вложение["Файл"], "ContentType", "application/pdf");;
					Исключение
						ИнфОбОшибке = ИнформацияОбОшибке();
						ВызватьИсключение NewExtExceptionСтрока(ИнфОбОшибке,"Ошибка при формировании печатной формы", Команда.Представление+" ("+ИнфОбОшибке.Описание+")");
					КонецПопытки;
					Прервать;
				КонецЦикла;
			КонецЦикла;
			
		КонецЕсли; //Обычна печатная форма
	КонецЦикла;
	Возврат Вложения;		
КонецФункции

Функция ПолучитьФизЛицоСотрудника(Сотрудник)
	Возврат	Сотрудник.ФизическоеЛицо;
КонецФункции

Процедура ЗагрузитьВложение(ДокументССылка, Файл, Название)
	
	НазваниеВМассив       = СтрРазделить82(Название, ".", Ложь);
	ДвоичныеДанные        = Base64Значение(Файл);
	ВременноеХранилище    = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	Тип                   = НазваниеВМассив[НазваниеВМассив.Количество() - 1];
	НазваниеБезРасширения = Лев(Название,          СтрДлина(Название) - СтрДлина(Тип) - 1);
	
	ИмяМодуля    = "";
	ИмяПроцедуры = "";
		
	МодульЭДКО           = ОбщегоНазначения.ОбщийМодуль("ОбщегоНазначенияЭДКО");
	МодульРаботаСФайлами = ОбщегоНазначения.ОбщийМодуль("РаботаСФайламиСлужебный");
	
	ВладелецФайлов = ДокументССылка;	
	Если ТипЗнч(ВладелецФайлов) = Тип("СправочникСсылка.Сотрудники") Тогда
		ВладелецФайлов = ПолучитьФизЛицоСотрудника(ВладелецФайлов);
	КонецЕсли;
	
	Если ТипЗнч(МодульЭДКО) = Тип("ОбщийМодуль") Тогда
		
		//После ЗУП 3.1.22.77;
		МассивВсеВложений  = МодульЭДКО.ПрикрепленныеФайлыКОбъектуИзСправочника(ВладелецФайлов);
			
	ИначеЕсли ТипЗнч(МодульРаботаСФайлами) = Тип("ОбщийМодуль") Тогда 
		
		Если Метаданные.Синоним = "Управление торговлей, редакция 11" Тогда			
			МассивВсеВложений = РаботаСФайлами.ПолучитьВсеПодчиненныеФайлы(ВладелецФайлов);
		Иначе
			//До версии ЗУП 3.1.22.77
			МассивВсеВложений = РаботаСФайлами.ВсеПодчиненныеФайлы(ВладелецФайлов);
		КонецЕсли;
		
	Иначе		
		ВызватьИсключение("Нет общего модуля для получения списка подчиненных файлов!");		
	КонецЕсли; 
		
	ВложениеНайдено = Ложь;
	Для Каждого ПрисоединенныйФайл Из МассивВсеВложений Цикл
		Если НЕ Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ПрисоединенныйФайл)) Тогда
			//Справочник из расширения (ЕТРН), БСП не умеет с ним работать, упадёт
			Возврат;
		КонецЕсли;
		Если ПрисоединенныйФайл.Наименование	= НазваниеБезРасширения Тогда
			ПрисоединенныйФайлО = Неопределено;
			Если ПрисоединенныйФайл.ПометкаУдаления ТОгда
				ПрисоединенныйФайлО	= ПрисоединенныйФайл.ПолучитьОбъект();
				ПрисоединенныйФайлО.УстановитьПометкуУдаления(Ложь);
			КонецЕсли;
			Если ПрисоединенныйФайл.Расширение	<> Тип ТОгда
				//Со сменой данных, мог и поменяться Тип вложения
				Если ПрисоединенныйФайлО = Неопределено ТОгда
					ПрисоединенныйФайлО	= ПрисоединенныйФайл.ПолучитьОбъект();
				КонецЕсли;
				ПрисоединенныйФайлО.Расширение	= Тип;
				ПрисоединенныйФайлО.Записать();
			КонецЕсли;
			ВложениеНайдено = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ВложениеНайдено Тогда
		ПараметрыФайла = РаботаСФайлами.ПараметрыДобавленияФайла();
		ПараметрыФайла.Автор = Пользователи.ТекущийПользователь();
		ПараметрыФайла.ВладелецФайлов = ВладелецФайлов;
		ПараметрыФайла.ИмяБезРасширения = НазваниеБезРасширения;
		ПараметрыФайла.РасширениеБезТочки = Тип;
		РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, ВременноеХранилище);
	Иначе
	    ИнформацияОФайле = Новый Структура;
	    ИнформацияОФайле.Вставить("АдресФайлаВоВременномХранилище", ВременноеХранилище);
	    ИнформацияОФайле.Вставить("АдресВременногоХранилищаТекста", "");
	    РаботаСФайлами.ОбновитьФайл(ПрисоединенныйФайл, ИнформацияОФайле);
	КонецЕсли;

КонецПроцедуры	

Функция ПолучитьДанныеПрисоединенногоФайла(ПечатнаяФормаДокументаКомандаСсылка)
	Возврат РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайла(ПечатнаяФормаДокументаКомандаСсылка,,Истина);
КонецФункции

Процедура ИнициализацияНедостающихКонстант()
КонецПроцедуры

#Область include_core_base_ОсобенностиПлатформы_РаботаСоСтроками
#КонецОбласти


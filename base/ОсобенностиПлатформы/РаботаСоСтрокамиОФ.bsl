
// Аналог функции СтрРазделить(), доступной с версии 8.3.6.
// Разделяет строку на части по указанным символам-разделителям.
//
// Параметры:
//   ИсходнаяСтрока - Строка - Разделяемая строка.
//   Разделитель    - Строка - Строка символов, каждый из которых является индивидуальным разделителем.
//   ВключатьПустые - Булево - Указывает необходимость включать в результат пустые строки,
//                             которые могут образоваться в результате разделения исходной строки.
//
// Возвращаемое значение:
//   Массив - Массив со строками, которые получились в результате разделения исходной строки.
//
//DynamicDirective
Функция СтрРазделить82(Знач ИсходнаяСтрока, Разделитель, ВключатьПустые = Истина) Экспорт
	Подстроки = Новый Массив;
	// Определяем позицию первого разделителя
	ПозицияРазделителя = Найти(ИсходнаяСтрока, Разделитель);
	Пока ПозицияРазделителя > 0 Цикл
		// Добавляем первую подстроку
		ПерваяПодстрока = Лев(ИсходнаяСтрока, ПозицияРазделителя - 1);
		Если ВключатьПустые ИЛИ ЗначениеЗаполнено(ПерваяПодстрока) Тогда
			Подстроки.Добавить(ПерваяПодстрока);
		КонецЕсли;
		// Обрезаем исходную строку до места окончания разделителя
		ИсходнаяСтрока = Сред(ИсходнаяСтрока, ПозицияРазделителя + 1);
		// Обновляем позицию разделителя
		ПозицияРазделителя = Найти(ИсходнаяСтрока, Разделитель);
	КонецЦикла;
	// Оставшуюся строку тоже добавляем в массив
	Если ВключатьПустые ИЛИ ЗначениеЗаполнено(ПерваяПодстрока) Тогда
		Подстроки.Добавить(ИсходнаяСтрока);
	Иначе
		Если Подстроки.Количество() = 0 Тогда
			Подстроки.Добавить(ИсходнаяСтрока);
		КонецЕсли;
	КонецЕсли;
	Возврат Подстроки;
КонецФункции

// Разделяет строку на части по указанной строке-разделителю.
// В 8.3.6 СтрРазделить использует для разделения каждый символ из Разделитель, а не целиком подстрокой.
//
// Параметры:
//   ИсходнаяСтрока - Строка - Разделяемая строка.
//   Разделитель    - Строка - Строка символов, являющаяся целиком подстрокой-разделетелем.
//   ВключатьПустые - Булево - Указывает необходимость включать в результат пустые строки,
//                             которые могут образоваться в результате разделения исходной строки.
//
// Возвращаемое значение:
//   Массив - Массив со строками, которые получились в результате разделения исходной строки.
//
//DynamicDirective
Функция СтрРазделитьПодстрокой(Знач ИсходнаяСтрока, Разделитель, ВключатьПустые = Истина) Экспорт
	Подстроки = Новый Массив;
	// Определяем позицию первого разделителя
	ПозицияРазделителя = Найти(ИсходнаяСтрока, Разделитель);
	Пока ПозицияРазделителя > 0 Цикл
		// Добавляем первую подстроку
		ПерваяПодстрока = Лев(ИсходнаяСтрока, ПозицияРазделителя - 1);
		Если ВключатьПустые ИЛИ ЗначениеЗаполнено(ПерваяПодстрока) Тогда
			Подстроки.Добавить(ПерваяПодстрока);
		КонецЕсли;
		// Обрезаем исходную строку до места окончания разделителя
		ИсходнаяСтрока = Сред(ИсходнаяСтрока, ПозицияРазделителя + СтрДлина(Разделитель));
		// Обновляем позицию разделителя
		ПозицияРазделителя = Найти(ИсходнаяСтрока, Разделитель);
	КонецЦикла;
	// Оставшуюся строку тоже добавляем в массив
	Если ВключатьПустые ИЛИ ЗначениеЗаполнено(ПерваяПодстрока) Тогда
		Подстроки.Добавить(ИсходнаяСтрока);
	Иначе
		Если Подстроки.Количество() = 0 Тогда
			Подстроки.Добавить(ИсходнаяСтрока);
		КонецЕсли;
	КонецЕсли;
	Возврат Подстроки;
КонецФункции

// Аналог функции СтрСоединить(), доступной с версии 8.3.6.
// Соединяет массив переданных строк в одну строку с указанным разделителем.
//
// Параметры:
//   Строки      - Массив - Массив, содержащий объединяемые строки
//   Разделитель - Строка - Строка, которая будет вставлена между объединяемыми строками.
//                          Если параметр не задан, строки будут объединены слитно друг с другом.
//
// Возвращаемое значение:
//   Строка - Строка, содержащая соединенные исходные строки с разделителем между ними.
//
//DynamicDirective
Функция СтрСоединить82(Знач Строки, Разделитель = "") Экспорт
	Результат = "";
	Если Строки.Количество() = 1 Тогда
		Результат = Строки[0];
	Иначе
		Если Строки.Количество() > 1 Тогда
			Для Каждого СтрокаДобавить Из Строки Цикл
				Результат = Результат + Разделитель + СтрокаДобавить;
			КонецЦикла;
			Результат = Сред(Результат, СтрДлина(Разделитель) + 1);
		КонецЕсли;
	КонецЕсли;
	Возврат Результат;
КонецФункции

//DynamicDirective

Процедура СтрШаблон82ОбработатьПараметр(Шаблон, Параметр, НомерПараметра)

	// Обработаем исключительные ситуации
	Если ЗначениеЗаполнено(Параметр) Тогда
		Если Найти(Шаблон, "%(" + НомерПараметра + ")") = 0 И Найти(Шаблон, "%" + НомерПараметра) = 0 Тогда
			ВызватьИсключение "Очень много параметров";
		КонецЕсли;
	Иначе
		Если Найти(Шаблон, "%(" + НомерПараметра + ")") > 0 ИЛИ Найти(Шаблон, "%" + НомерПараметра) > 0 Тогда
			ВызватьИсключение "Недостаточно фактических параметров";
		Иначе
			Возврат; // Параметр не задан и не найден
		КонецЕсли;
	КонецЕсли;

	Шаблон = СтрЗаменить(Шаблон, "%(" + НомерПараметра + ")", Строка(Параметр));
	Шаблон = СтрЗаменить(Шаблон, "%"  + НомерПараметра,       Строка(Параметр));

КонецПроцедуры

// Аналог функции СтрШаблон(), доступной с версии 8.3.6. Не использует Вычислить().
// Подставляет параметры в строку по номеру.
//	Если параметров недостаточно для заполнения в шаблоне параметра %N, генерируется исключительная ситуация
//   "Недостаточно фактических параметров".
//	Если параметров слишком много, чтобы подставить их все в шаблон, генерируется исключительная ситуация
//   "Очень много параметров".
//   Параметр1-...-Параметр10 - Произвольный - Параметры, содержащие произвольные значения, строковые представления
//											   которых должны быть подставлены в шаблон. Указываются через запятую.
//
// Параметры:
//   Шаблон      - Строка - Строка, содержащая маркеры подстановки вида: "%1..%N". Нумерация маркеров начинается с 1.
//							N не может быть больше 10. Если требуется сразу после номера подстановки написать цифру, то номер
//							подстановки должен быть указан в скобках. Тогда строка может иметь следующий вид: "%(1)1cv8с.exe"
//   Параметр1  - Произвольный - Параметр, содержащий произвольное значение
//   Параметр2  - Произвольный - Параметр, содержащий произвольное значение
//   Параметр3  - Произвольный - Параметр, содержащий произвольное значение
//   Параметр4  - Произвольный - Параметр, содержащий произвольное значение
//   Параметр5  - Произвольный - Параметр, содержащий произвольное значение
//   Параметр6  - Произвольный - Параметр, содержащий произвольное значение
//   Параметр7  - Произвольный - Параметр, содержащий произвольное значение
//   Параметр8  - Произвольный - Параметр, содержащий произвольное значение
//   Параметр9  - Произвольный - Параметр, содержащий произвольное значение
//   Параметр10 - Произвольный - Параметр, содержащий произвольное значение
//
// Возвращаемое значение:
//   Строка - Строка шаблона с подставленными параметрами.
//
//DynamicDirective
Функция СтрШаблон82(Знач Шаблон, Параметр1 = Неопределено, Параметр2 = Неопределено, Параметр3 = Неопределено,
			Параметр4 = Неопределено, Параметр5 = Неопределено, Параметр6 = Неопределено, Параметр7 = Неопределено,
			Параметр8 = Неопределено, Параметр9 = Неопределено, Параметр10 = Неопределено) Экспорт

	Результат = Шаблон;

	// Не используем Вычислить()
	СтрШаблон82ОбработатьПараметр(Результат, Параметр10, 10);
	СтрШаблон82ОбработатьПараметр(Результат, Параметр9,   9);
	СтрШаблон82ОбработатьПараметр(Результат, Параметр8,   8);
	СтрШаблон82ОбработатьПараметр(Результат, Параметр7,   7);
	СтрШаблон82ОбработатьПараметр(Результат, Параметр6,   6);
	СтрШаблон82ОбработатьПараметр(Результат, Параметр5,   5);
	СтрШаблон82ОбработатьПараметр(Результат, Параметр4,   4);
	СтрШаблон82ОбработатьПараметр(Результат, Параметр3,   3);
	СтрШаблон82ОбработатьПараметр(Результат, Параметр2,   2);
	СтрШаблон82ОбработатьПараметр(Результат, Параметр1,   1);

	Возврат Результат;

КонецФункции

// Аналог функции СтрНачинаетсяС(), доступной с версии 8.3.6.
// Определяет, что строка начинается с указанной подстроки. Определение выполняется с учетом регистра,
//  аналогично функции Найти.
//
// Параметры:
//   Строка       - Строка - Строка, начало которой проверяется на совпадение с подстрокой поиска.
//   СтрокаПоиска - Строка - Строка, содержащая предполагаемое начало строки.
//                           В случае если переданное значение является пустой строкой
//                           генерируется исключительная ситуация.
//
// Возвращаемое значение:
//   Булево - Истина - строка начинается с указанной подстроки, Ложь - в противном случае.
//
//DynamicDirective
Функция СтрНачинаетсяС82(Строка, СтрокаПоиска) Экспорт
	Возврат Найти(Строка, СтрокаПоиска) = 1;
КонецФункции

// Аналог функции СтрЗаканчиваетсяНа(), доступной с версии 8.3.6.
// Определяет, заканчивается ли строка указанной подстрокой. Определение выполняется с учетом регистра,
//  аналогично функции Найти.
//
// Параметры:
//   Строка       - Строка - Строка, окончание которой проверяется на совпадение с подстрокой поиска.
//   СтрокаПоиска - Строка - Строка, содержащая предполагаемое окончание строки.
//                           В случае если переданное значение является пустой строкой
//                           генерируется исключительная ситуация.
//
// Возвращаемое значение:
//   Булево - Истина - строка начинается с указанной подстроки, Ложь - в противном случае.
//
//DynamicDirective
Функция СтрЗаканчиваетсяНа82(Строка, СтрокаПоиска) Экспорт
	Возврат Прав(Строка, СтрДлина(СтрокаПоиска)) = СтрокаПоиска;
КонецФункции


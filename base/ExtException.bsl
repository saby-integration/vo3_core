
// Если не заполнено ПроверяемоеЗначение, выставляем реквизит ошибки ИмяРеквизита в значение ЗначениеРеквизита
//
// Параметры:
//  Ошибка - Структура - Ошибка.
//  ПроверяемоеЗначение - Произвольный - Проверяемое значение.
//  ИмяРеквизита - Произвольный - Имя реквизита.
//  ЗначениеРеквизита - Произвольный - Значение для незаполненного.
//
//DynamicDirective
Процедура УстановитьЗначениеОшибки(Ошибка, ПроверяемоеЗначение, ИмяРеквизита, ЗначениеРеквизита)
	Если НЕ ЗначениеЗаполнено(ПроверяемоеЗначение) Тогда
		Ошибка[ИмяРеквизита] = ЗначениеРеквизита;
	КонецЕсли;
КонецПроцедуры

// Заполнение структуры ошибки
//
// Параметры:
//  parent - Произвольный - родитель.
//  message - Произвольный - сообщение.
//  detail - Произвольный - описание.
//  action - Произвольный - действие.
//  dump - Произвольный - дамп.
//  type - Строка - тип.
//
// Возвращаемое значение:
//  Структура - сгруппированные заполненные данные по ошибке.
//
//DynamicDirective
Функция ExtException(parent = Неопределено, message = Неопределено, detail = Неопределено, action = Неопределено, dump = Неопределено, type = "ExtExpception") Экспорт
	
	error = Новый Структура("type, message, detail, action, dump, stack", ?(type=Неопределено,"ExtExpception",type), message, detail, action, dump, Новый Массив);
	ИмяРеквизитаMsg = "message";
	
	Если parent = Неопределено Тогда
		Возврат error;
	КонецЕсли;

	CurrentStack = Новый Структура("type, " + ИмяРеквизитаMsg + ", detail, action, dump, traceback");
	ЗаполнитьЗначенияСвойств(CurrentStack, parent);
	
	УстановитьЗначениеОшибки(error, message, ИмяРеквизитаMsg, get_prop(parent, ИмяРеквизитаMsg));
	
	Если НЕ ЗначениеЗаполнено(detail) Тогда
		Если parent.type = "Exception" и ЗначениеЗаполнено(message) Тогда
			error.detail = get_prop(parent, ИмяРеквизитаMsg) + " " + get_prop(parent, "detail");
		иначе
			error.detail = get_prop(parent, "detail");
		КонецЕсли
	КонецЕсли;
	
	УстановитьЗначениеОшибки(error, type, "type", get_prop(parent, "type"));
	Если parent.Свойство("stack") И ТипЗнч(parent.stack) = Тип("Массив") Тогда
		error.stack = parent.stack;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(message) 
		ИЛИ ЗначениеЗаполнено(action) 
		ИЛИ ЗначениеЗаполнено(dump) 
		ИЛИ ЗначениеЗаполнено(detail) Тогда
		
		error.stack.Добавить(CurrentStack);
	Иначе
		ИмяРеквизита = "dump";
		УстановитьЗначениеОшибки(error, dump, ИмяРеквизита, get_prop(parent, ИмяРеквизита));
		УстановитьЗначениеОшибки(error, action, ИмяРеквизитаMsg, get_prop(parent, ИмяРеквизитаMsg));
	КонецЕсли;
	
	Возврат error;
КонецФункции

// Причина ошибки
//
// Параметры:
//  reason - Структура - данные с причиной ошибки.
//
// Возвращаемое значение:
//  Структура - причина ошибки
//
//DynamicDirective
Функция ExtExceptGetReason(reason)
	Если reason.Причина = Неопределено Тогда
		Возврат reason;
	Иначе
		Возврат ExtExceptGetReason(reason.Причина);
	КонецЕсли;
КонецФункции

// Данные с анализом ошибки
//
// Параметры:
//  parent - Произвольный - Родитель.
//
// Возвращаемое значение:
//  Структура - анализ ошибки
//
//DynamicDirective
Функция ExtExceptionAnalyse(parent) Экспорт
	
	Если parent = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		//Попробуем из строки получить вложеный объек
		Возврат	ЗначениеИзСтрокиВнутр(parent.Описание);
	Исключение
		
		Попытка
			Причина	= ExtExceptGetReason(parent);
			message	= Причина.Описание;
			
			Возврат Новый Структура(
			"type, message, detail, action, dump, stack, traceback",
			"Exception",
			message,
			,,,
			parent.ИмяМодуля +" "+ parent.НомерСтроки
			);
		Исключение
			Возврат Новый Структура("message, dump", "Некорректный вызов исключения", parent);
		КонецПопытки;
	КонецПопытки;
	
КонецФункции

// Функция проброски ExtException с разбором переданного
//
// Параметры:
//  parent - Произвольный - родитель.
//  message - Произвольный - сообщение.
//  detail - Произвольный - описание.
//  action - Произвольный - действие.
//  dump - Произвольный - дамп.
//  type - Строка - тип.
//
// Возвращаемое значение:
//  Структура - сгруппированные заполненные данные по ошибке.
//
//DynamicDirective
Функция NewExtExceptionСтруктура(parent = Неопределено, message = Неопределено, detail = Неопределено, action = Неопределено, dump = Неопределено, type = Неопределено) Экспорт
	parentStruct = ExtExceptionAnalyse(parent);
	ОшибкаСтруктура = ExtException(parentStruct, message, detail, action, dump, type);
	Возврат ОшибкаСтруктура;
КонецФункции

// Функция проброски ExtException с разбором переданного
//
// Параметры:
//  parent - Произвольный - родитель.
//  message - Произвольный - сообщение.
//  detail - Произвольный - описание.
//  action - Произвольный - действие.
//  dump - Произвольный - дамп.
//  type - Строка - тип.
//
// Возвращаемое значение:
//  Строка - сгруппированные заполненные данные по ошибке из структуры.
//
//
//DynamicDirective
Функция NewExtExceptionСтрока(parent = Неопределено, message = Неопределено, detail = Неопределено, action = Неопределено, dump = Неопределено, type = Неопределено) Экспорт
	ОшибкаСтруктура = NewExtExceptionСтруктура(parent, message, detail, action, dump, type);
	Возврат ЗначениеВСтрокуВнутр(ОшибкаСтруктура);
КонецФункции

// Получение описания ошибки
//
// Параметры:
//  error - Структура - данные по ошибке.
//
// Возвращаемое значение:
//  Строка - детали ошибки.
//
//
//DynamicDirective
Функция ExtExceptionToMessage(error) Экспорт
	ДеталиСообщения = get_prop(error, "detail", "");
	
	//Получим описание ошибки из структуры еррор
	Если ТипЗнч(ДеталиСообщения) = Тип("Структура") или ТипЗнч(ДеталиСообщения) = Тип("Соответствие") Тогда
        ОшибкаСообщения = get_prop(ДеталиСообщения, "error", "");
        Если ТипЗнч(ОшибкаСообщения) = Тип("Структура") или ТипЗнч(ОшибкаСообщения) = Тип("Соответствие") Тогда
            ДеталиСообщения = get_prop(ОшибкаСообщения, "message", "");
        КонецЕсли;
    КонецЕсли;
	
	//убедимся, что ДеталиСообщения - строка
	Если ТипЗнч(ДеталиСообщения) <> Тип("Строка") Тогда
		ДеталиСообщения = "";
	КонецЕсли;
	Если error.message = ДеталиСообщения Тогда
		ДеталиСообщения = "";
	КонецЕсли;
	
	Возврат error.message +" "+ ДеталиСообщения;
КонецФункции

// Сохранение ошибки в журнал регистрации в виде XML
//
// Параметры:
//  ExceptionСтруктура - Структура - данные по ошибке.
//
Процедура ExtExceptionToJournal(Знач ExceptionСтруктура) Экспорт
	ИмяСобытия = ЛокализацияНазваниеПродукта()+" Ошибка " + ExceptionСтруктура.message;
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, ExceptionСтруктура.detail, НазначениеТипаXML.Явное);
	Комментарий = ЗаписьXML.Закрыть();
	
	ЗаписьXML.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, ExceptionСтруктура, НазначениеТипаXML.Явное);
	Данные = ЗаписьXML.Закрыть();
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытия,
		УровеньЖурналаРегистрации.Ошибка,
		,//ОбъектМетаданных - ссылка на элемент справичника или документ
		Данные,
		Комментарий,
    	РежимТранзакцииЗаписиЖурналаРегистрации .Независимая
	);
КонецПроцедуры

//DynamicDirective

Функция ЗначениеИзСтрокиВСтрокуВнутрНаСервере(Значение)  
	Возврат ЗначениеИзСтрокиВнутр(ЗначениеВСтрокуВнутр(Значение));	
КонецФункции

//DynamicDirective

Функция ЗначениеВСтрокуВнутрНаСервере(Значение)
	Возврат ЗначениеВСтрокуВнутр(Значение);
КонецФункции


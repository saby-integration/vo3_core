
&НаСервере
Функция СкачатьФайлИПолучитьАдресДанныхНаСервере(УРЛДляСкачивания)
	МодульОбъекта = МодульОбъекта();
	context_params	= МодульОбъекта.ПроверитьНаличиеПараметровПодключения();
	ДвоичныеДанныеФайла = МодульОбъекта.local_helper_download_from_link(context_params, УРЛДляСкачивания);
	Возврат ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, Новый УникальныйИдентификатор);
КонецФункции

&НаКлиенте
Процедура СбисОбновитьОбработкуФайлВнешнейОбработки(сбисПолноеИмяОбработки,АдресДанныхФайла, НомерАктуальнойВерсии)
	ИмяВременногоФайлаНовойВерсии = СбисПолучитьИмяВременногоФайлаКлиент("tmp");
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(АдресДанныхФайла);
	ДвоичныеДанныеФайла.Записать(ИмяВременногоФайлаНовойВерсии);
	
	Файл = Новый Файл(сбисПолноеИмяОбработки);
	Если Файл.Существует() Тогда
		Отказ = Ложь;
		Попытка                           	
			ПереместитьФайл(сбисПолноеИмяОбработки, сбисПолноеИмяОбработки + ".bak");
		Исключение 
			Сообщить("Ошибка при замене файла обработки " + сбисПолноеИмяОбработки + ". Возможно он заблокирован. Подробно: " + ОписаниеОшибки());
			Отказ = Истина;
		КонецПопытки;
		Если Не Отказ Тогда
			Попытка                           	
				ПереместитьФайл(ИмяВременногоФайлаНовойВерсии, сбисПолноеИмяОбработки);
				СообщитьОбУспехе = Истина;
				СообщениеОПерезапускеВКаталогеНаДиске = СтрЗаменить(СообщениеОПерезапускеВКаталогеНаДиске, "%ПолноеИмяОбработкиВКаталоге%", сбисПолноеИмяОбработки);
				СообщениеОПерезапускеВКаталогеНаДиске = СтрЗаменить(СообщениеОПерезапускеВКаталогеНаДиске, "%НомерНовойВерсии%", НомерАктуальнойВерсии);
				Сообщить(СообщениеОПерезапускеВКаталогеНаДиске);
			Исключение
				//Восстановим исходный файл обратно.
				ПереместитьФайл(сбисПолноеИмяОбработки + ".bak", сбисПолноеИмяОбработки);
				Сообщить("Ошибка при переносе файла обработки новой версии " + сбисПолноеИмяОбработки + ". Подробно: " + ОписаниеОшибки());
				Отказ = Истина;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	УдалитьИзВременногоХранилища(АдресДанныхФайла);
	
	Попытка
		УдалитьФайлы(ИмяВременногоФайлаНовойВерсии);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура СбисОбновитьОбработкуНаКлиенте(Элемент = Неопределено)
	СтатусВерсии = ПолучитьСтатусВерсииНаФорме(Истина);
	Если СтатусВерсии.Шаблон = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	сбисПолноеИмяОбработки = сбисПолноеИмяФайла();
	ЭтоУправляемоеПриложение = (ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма"));
	сбисРежимИспользованияОбработки = ПолучитьРежимИспользованияОбработки(сбисПолноеИмяОбработки);
		
	АдресДанныхФайла = СкачатьФайлИПолучитьАдресДанныхНаСервере(СтатусВерсии.СсылкаДляОбновления);
	
	Если ЭтоУправляемоеПриложение Тогда
		СообщениеОПерезапускеВСправочнике		= "Обработка успешно обновлена в справочнике внешних обработок. Перезапустите обработку для того, чтобы изменения вступли в силу. Текущая версия должна быть %НомерНовойВерсии%";
		СообщениеОПерезапускеВКаталогеНаДиске	= "Обработка успешно обновлена по пути %ПолноеИмяОбработкиВКаталоге%. Перезапустите обработку для того, чтобы изменения вступли в силу. Текущая версия должна быть %НомерНовойВерсии%";
	Иначе
		СообщениеОПерезапускеВСправочнике		= "Обработка успешно обновлена в справочнике внешних обработок. Перезапустите 1С:Предприятие (не обработку!) для того, чтобы изменения вступли в силу. Текущая версия должна быть %НомерНовойВерсии%";
		СообщениеОПерезапускеВКаталогеНаДиске	= "Обработка успешно обновлена по пути %ПолноеИмяОбработкиВКаталоге%. Перезапустите 1С:Предприятие (не обработку!) для того, чтобы изменения вступли в силу. Текущая версия должна быть %НомерНовойВерсии%";
	КонецЕсли;
	
	Если сбисРежимИспользованияОбработки = "Обработка в справочнике внешних обработок" Тогда
		//Обновим справочник
		НаименованиеОбработки = "SABY";
		ОбработкаСБИССсылка = ПолучитьОбработкуСБИСНаСервере(НаименованиеОбработки);
		Если ЗначениеЗаполнено(ОбработкаСБИССсылка) Тогда
			РезультатОбновления = ЗаписатьОбработкуВСправочник(СтатусВерсии.НомерАктуальнойВерсии, ОбработкаСБИССсылка, АдресДанныхФайла, Отказ);
			Если Отказ Тогда
				Сообщить(РезультатОбновления.message + "(" + РезультатОбновления.details + ")");
			Иначе
				СообщениеОПерезапускеВСправочнике = СтрЗаменить(СообщениеОПерезапускеВСправочнике, "%НомерНовойВерсии%", СтатусВерсии.НомерАктуальнойВерсии);
				Сообщить(СообщениеОПерезапускеВСправочнике);
			КонецЕсли;
		КонецЕсли;	
	ИначеЕсли сбисРежимИспользованияОбработки = "Файл внешней обработки" Тогда
		//Обновим файл
		СбисОбновитьОбработкуФайлВнешнейОбработки(сбисПолноеИмяОбработки,АдресДанныхФайла, СтатусВерсии.НомерАктуальнойВерсии);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает режим использования обработки: Во внешнем файле или в справочнике
//
// Параметры:
//  ПолноеИмяОбработки - Строка - имя обработки.
//
// Возвращаемое значение:
//   Строка - режим использования
//
Функция ПолучитьРежимИспользованияОбработки(ПолноеИмяОбработки) Экспорт
	Если Прав(ПолноеИмяОбработки, 3) = "epf" Тогда
		РежимИспользования = "Файл внешней обработки";
	Иначе
		РежимИспользования = "Обработка в справочнике внешних обработок";
	КонецЕсли;
	Возврат РежимИспользования;
КонецФункции

// Возвращает полное имя файла обработки.
//
// Возвращаемое значение:
//   Строка - имя файла
//
&НаСервере
Функция сбисПолноеИмяФайла() Экспорт
	ОбработкаОбъектМодуль = МодульОбъекта();
	Попытка
		Возврат ОбработкаОбъектМодуль.ИспользуемоеИмяФайла;	//Для файла
	Исключение
		Возврат Строка(ТипЗнч(ОбработкаОбъектМодуль));		//Для встройки в конфу
	КонецПопытки;
КонецФункции

// Создает имя для временного файла на клиенте
//
// Параметры:
//  Расширение - Строка - расширение файла.
//
// Возвращаемое значение:
//   Строка - имя файла
//
&НаКлиенте
Функция СбисПолучитьИмяВременногоФайлаКлиент(Расширение = "tmp") Экспорт
	#Если ВебКлиент Тогда
		ИмяФайла = КаталогВременныхФайлов() + "sbis_" + Строка(Новый УникальныйИдентификатор()) + "." + СтрЗаменить(Расширение, ".", "");
	#Иначе
		ИмяФайла = ПолучитьИмяВременногоФайла(Расширение);
	#КонецЕсли
	Возврат ИмяФайла;
КонецФункции

// Функция получает обработку из справочника
//
// Параметры:
//  НаименованиеВнешнейОбработкиСбис - Строка - наименование обработки в справочнике.
//
// Возвращаемое значение:
//   СправочникСсылка - элемент справочника обработки или Неопределено
//
&НаСервереБезКонтекста
Функция ПолучитьОбработкуСБИСНаСервере(НаименованиеВнешнейОбработкиСбис)
	Если		Не Метаданные.Справочники.Найти("ВнешниеОбработки") = Неопределено Тогда 
		Возврат Справочники.ВнешниеОбработки.НайтиПоНаименованию(НаименованиеВнешнейОбработкиСбис);
	ИначеЕсли	Не Метаданные.Справочники.Найти("ДополнительныеОтчетыИОбработки") = Неопределено Тогда
		Возврат Справочники.ДополнительныеОтчетыИОбработки.НайтиПоНаименованию(НаименованиеВнешнейОбработкиСбис);
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

&НаСервереБезКонтекста
Функция ЗаписатьОбработкуВСправочник(Версия, ОбработкаСБИССсылка, АдресДанныхФайла, Отказ)
	ДД = ПолучитьИзВременногоХранилища(АдресДанныхФайла);
	УдалитьИзВременногоХранилища(АдресДанныхФайла);
	Попытка
		сбисОбработкаОбъект = ОбработкаСБИССсылка.ПолучитьОбъект();
	Исключение
		Отказ = Истина;
		Возврат Новый Структура("code,message,details", 100, "Неизвестная ошибка системы", ОписаниеОшибки());
	КонецПопытки;
	Если Не сбисОбработкаОбъект.Метаданные().Реквизиты.Найти("ХранилищеВнешнейОбработки") = Неопределено Тогда
		сбисОбработкаОбъект.ХранилищеВнешнейОбработки = Новый ХранилищеЗначения(ДД, Новый СжатиеДанных(9));
	ИначеЕсли Не сбисОбработкаОбъект.Метаданные().Реквизиты.Найти("ХранилищеОбработки") = Неопределено Тогда
		сбисОбработкаОбъект.ХранилищеОбработки = Новый ХранилищеЗначения(ДД, Новый СжатиеДанных(9));
	Иначе
		Отказ = Истина;
		Возврат Новый Структура("code,message,details", 100, "Неизвестная ошибка системы", "Не найден реквизит хранилища обработки");
	КонецЕсли;	
	Попытка
		сбисОбработкаОбъект.Версия = Версия;
	Исключение
		// Реквизита "Версия" может и не быть
	КонецПопытки;
	Попытка
		сбисОбработкаОбъект.Записать();
	Исключение
		Отказ = Истина;
		Возврат Новый Структура("code,message,details", 611, "Ошибка создания объекта в ИС", ОписаниеОшибки());
	КонецПопытки;	 
	Возврат Истина;
КонецФункции


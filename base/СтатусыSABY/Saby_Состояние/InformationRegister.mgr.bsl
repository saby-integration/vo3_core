#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область include_core_base_locale_ЛокализацияНазваниеПродукта
#КонецОбласти
	
Функция ОпределитьТипМетаданных(ОбъектСсылка) Экспорт
	//Так быстрее чем поиск по метаданным всех типов
	МетаданныеФормы = ОбъектСсылка.Метаданные().Формы;
	Если МетаданныеФормы.Найти("ФормаДокумента") <> Неопределено Тогда
		Возврат "Документы";
	ИначеЕсли МетаданныеФормы.Найти("ФормаЭлемента") <> Неопределено Тогда
		Возврат "Справочники";
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

Функция ОтобратьПоСпискуОбъектов(мОбъекты, Сервис = "", Аккаунт = "") Экспорт
	
	тОбъекты =	Новый ТаблицаЗначений;
	тОбъекты.Колонки.Добавить("Объект", Новый ОписаниеТипов(Метаданные.РегистрыСведений.Saby_Состояние.Измерения.Объект.Тип.Типы()));
	
	Для Каждого ДокументСсылка Из мОбъекты Цикл
		НовСтрока = тОбъекты.Добавить();
		Если Найти(СокрЛП(ТипЗнч(ДокументСсылка)), "Регистр сведений ключ записи") > 0 Тогда 
			//В корп версии с формы списка сотрудников приходят не ссылки а строки регистра сведений 
			Попытка
				НовСтрока.Объект	= ДокументСсылка.Сотрудник;
			Исключение
				Если НЕ ДокументСсылка = Неопределено Тогда
					НовСтрока.Объект	= ДокументСсылка.Ссылка;
				КонецЕсли;
			КонецПопытки;
		Иначе
			НовСтрока.Объект	= ДокументСсылка;
		КонецЕСли;
	КонецЦикла;

	УстановитьПривилегированныйРежим (Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЗДок.Объект КАК Объект
		|ПОМЕСТИТЬ ВР_
		|ИЗ
		|	&тОбъекты КАК ТЗДок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	SabyСостояние.Объект КАК Объект,
		|	SabyСостояние.UID КАК UID,
		|	МАКСИМУМ(SabyСостояние.Сервис) КАК Сервис,
		|	МАКСИМУМ(SabyСостояние.Аккаунт) КАК Аккаунт
		|ПОМЕСТИТЬ втSabyСостояние
		|ИЗ
		|	РегистрСведений.Saby_Состояние КАК SabyСостояние
		|ГДЕ
		|	SabyСостояние.Сервис В(&Сервисы)
		|	И SabyСостояние.Аккаунт В(&Аккаунты)
		|
		|СГРУППИРОВАТЬ ПО
		|	SabyСостояние.Объект,
		|	SabyСостояние.UID
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВР_.Объект КАК Объект,
		|	ВЫБОР
		|		КОГДА SabyСостояние.Объект ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ОбменСоСбис,
		|	SabyСостояние.UID КАК UID,
		|	рег_Saby_Состояние.Сервис КАК Сервис,
		|	рег_Saby_Состояние.Аккаунт КАК Аккаунт,
		|	рег_Saby_Состояние.Состояние КАК Состояние,
		|	рег_Saby_Состояние.Состояние.ИдентификаторСБИС КАК СостояниеИдСБИС,
		|	рег_Saby_Состояние.SbisId КАК SbisId
		|ИЗ
		|	ВР_ КАК ВР_
		|		ЛЕВОЕ СОЕДИНЕНИЕ втSabyСостояние КАК SabyСостояние
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Saby_Состояние КАК рег_Saby_Состояние
		|			ПО SabyСостояние.Объект = рег_Saby_Состояние.Объект
		|				И SabyСостояние.Сервис = рег_Saby_Состояние.Сервис
		|				И SabyСостояние.Аккаунт = рег_Saby_Состояние.Аккаунт
		|		ПО ВР_.Объект = SabyСостояние.Объект";	
	Запрос.УстановитьПараметр("тОбъекты", тОбъекты);
	Сервисы = Новый Массив;
	Сервисы.Добавить(Сервис);
	Если ЗначениеЗаполнено(Сервис) Тогда
		Сервисы.Добавить("");
	КонецЕсли;
	Запрос.УстановитьПараметр("Сервисы", Сервисы);
	Аккаунты = Новый Массив;
	Аккаунты.Добавить(Аккаунт);
	Если ЗначениеЗаполнено(Аккаунт) Тогда
		Аккаунты.Добавить("");
	КонецЕсли;
	Запрос.УстановитьПараметр("Аккаунты", Аккаунты);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	//На недалёкое будущее
	//РезультатЗапроса.Колонки.Добавить("ТипМетаданных", Новый ОписаниеТипов("Строка") );
	//РезультатЗапроса.Колонки.Добавить("ТипОбъекта", Новый ОписаниеТипов("Строка") );
	//Для Каждого СтрокаРЗ ИЗ РезультатЗапроса Цикл
	//	СтрокаРЗ.ТипМетаданных	= ОпределитьТипМетаданных(СтрокаРЗ.Объект) ;
	//	СтрокаРЗ.ТипОбъекта		= СтрокаРЗ.Объект.Метаданные().Имя;
	//КонецЦикла;
	
	Возврат РезультатЗапроса;
КонецФункции	
	
Функция ПолучитьСостоянияОбъектов(tUID, Сервис = "", Аккаунт = "") Экспорт

	// входящие параметры - таблица значений ИдСБИС, ИмяСБИС
	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	UIDs.UID КАК UID,
		|	ВЫРАЗИТЬ(UIDs.UID КАК СТРОКА(36)) КАК КлючДляСвязи
		|ПОМЕСТИТЬ ВР_UID
		|ИЗ
		|	&мUID КАК UIDs
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	SabyСостояние.Объект КАК Объект,
		|	SabyСостояние.UID КАК UID,
		|	МАКСИМУМ(SabyСостояние.SbisId) КАК SbisId,
		|	МАКСИМУМ(SabyСостояние.Сервис) КАК Сервис,
		|	МАКСИМУМ(SabyСостояние.Аккаунт) КАК Аккаунт
		|ПОМЕСТИТЬ втSabyСостояние
		|ИЗ
		|	РегистрСведений.Saby_Состояние КАК SabyСостояние
		|ГДЕ
		|	SabyСостояние.Сервис В (&Сервисы)
		|	И SabyСостояние.Аккаунт В (&Аккаунты)
		|СГРУППИРОВАТЬ ПО
		|	SabyСостояние.Объект,
		|	SabyСостояние.UID
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВР_UID.UID КАК UID,
		|	ЕСТЬNULL(SabyСостояние.Объект, НЕОПРЕДЕЛЕНО) КАК Объект
		|ИЗ
		|	ВР_UID КАК ВР_UID
		|		ЛЕВОЕ СОЕДИНЕНИЕ втSabyСостояние КАК SabyСостояние
		|		ПО ВР_UID.КлючДляСвязи = SabyСостояние.SbisId ИЛИ ВР_UID.КлючДляСвязи = SabyСостояние.UID";

	Запрос.Параметры.Вставить("мUID", tUID);
	Сервисы = Новый Массив;
	Сервисы.Добавить(Сервис);
	Если ЗначениеЗаполнено(Сервис) Тогда
		Сервисы.Добавить("");
	КонецЕсли;
	Запрос.УстановитьПараметр("Сервисы", Сервисы);
	Аккаунты = Новый Массив;
	Аккаунты.Добавить(Аккаунт);
	Если ЗначениеЗаполнено(Аккаунт) Тогда
		Аккаунты.Добавить("");
	КонецЕсли;
	Запрос.УстановитьПараметр("Аккаунты", Аккаунты);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Результат =  Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("UID", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("LINK");
	Результат.Колонки.Добавить("APPROVED", Новый ОписаниеТипов("Булево, Null"));
	Результат.Колонки.Добавить("ИдСБИС", Новый ОписаниеТипов("Строка"));  // TODO удалить после обновления 2104
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НовСтрока = Результат.Добавить();
		НовСтрока.UID = ВыборкаДетальныеЗаписи.UID;
		Если ВыборкаДетальныеЗаписи.Объект = Неопределено
			Или Не ОбщегоНазначения.ЭтоДокумент(ВыборкаДетальныеЗаписи.Объект.Метаданные()) Тогда 
			
			НовСтрока.APPROVED = Null;
		Иначе 
			НовСтрока.APPROVED = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыборкаДетальныеЗаписи.Объект, "Проведен");
		КонецЕсли;
		НовСтрока.LINK = ВыборкаДетальныеЗаписи.Объект;
		НовСтрока.ИдСБИС = ВыборкаДетальныеЗаписи.UID;        // TODO удалить после обновления 2104
//		ПолучитьAPI3СсылкуИзСсылкиНаОбъект(ВыборкаДетальныеЗаписи.Объект, НовСтрока);
	КонецЦикла;

	Возврат Результат;
КонецФункции

Функция ПрочитатьПоРеквизиту(ИмяРеквизита, ЗначениеРеквизита, Сервис = "", Аккаунт = "")
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	SabyСостояние.*
		|ИЗ
		|	РегистрСведений.Saby_Состояние КАК SabyСостояние
		|ГДЕ
		|	1 = 1
		|	И SabyСостояние.Сервис = &Сервис
		|	И SabyСостояние.Аккаунт В (&Аккаунты)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Аккаунт УБЫВ
		|";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "1 = 1", "SabyСостояние." + ИмяРеквизита + " = &ЗначениеРеквизита");
	Запрос.УстановитьПараметр("ЗначениеРеквизита", ЗначениеРеквизита);
	Запрос.УстановитьПараметр("Сервис", Сервис);
	Аккаунты = Новый Массив;
	Аккаунты.Добавить(Аккаунт);
	Если ЗначениеЗаполнено(Аккаунт) Тогда
		Аккаунты.Добавить("");
	КонецЕсли;
	Запрос.УстановитьПараметр("Аккаунты", Аккаунты);
	Возврат Запрос.Выполнить().Выбрать();
КонецФункции

Функция ПрочитатьПоОбъекту(ОбъектИС, Сервис = "", Аккаунт = "") Экспорт
	Выборка = ПрочитатьПоРеквизиту("Объект", ОбъектИС, Сервис, Аккаунт);
	Пока Выборка.Следующий() Цикл
		Возврат Выборка;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

Функция Удалить(Объект, Сервис = "", Аккаунт = "") Экспорт
	НаборЗаписей = РегистрыСведений.Saby_Состояние.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(Объект);
	НаборЗаписей.Отбор.Сервис.Установить(Сервис);
	НаборЗаписей.Отбор.Аккаунт.Установить(Аккаунт);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать(Истина);
	Возврат Истина;
КонецФункции

Процедура УдалитьПоUID(UID, Сервис = "", Аккаунт = "", АктивныйЭтап = "", Состояние = Неопределено,
		Объект = Неопределено, ИмяИС = Неопределено, ИдИС = Неопределено) Экспорт
	
	Если Объект = Неопределено Тогда
		Если ИмяИС <> Неопределено и ИдИС <> Неопределено Тогда
			Объект = ПолучитьСсылкуПоИдИС(ИмяИС, ИдИС);
			Удалить(Объект, Сервис, Аккаунт);
		Иначе
			// Удаление нескольких Объектов с одинаковым - UID
			Выборка = ПрочитатьПоUID(UID, Сервис, Аккаунт);
			Пока Выборка.Следующий() Цикл
				Удалить(Выборка.Объект, Сервис, Аккаунт);
			КонецЦикла;
		КонецЕсли;
	Иначе 	
		Удалить(Объект, Сервис, Аккаунт);
	КонецЕсли;
КонецПроцедуры

Функция ПрочитатьПоUID(UID, Сервис = "", Аккаунт = "") Экспорт
	Выборка = ПрочитатьПоРеквизиту("UID", UID, Сервис, Аккаунт);
	Возврат Выборка;
КонецФункции

Процедура ОбновитьПоUID(UID, Сервис = "", Аккаунт = "", АктивныйЭтап = "", Состояние = Неопределено,
		Объект = Неопределено, ИмяИС = Неопределено, ИдИС = Неопределено, СбисИд = Неопределено) Экспорт
		
	Если Объект = Неопределено Тогда
		Если ИмяИС <> Неопределено и ИдИС <> Неопределено Тогда
			Объект = ПолучитьСсылкуПоИдИС(ИмяИС, ИдИС);
			Обновить(UID, Сервис, Аккаунт, АктивныйЭтап, Состояние, Объект, СбисИд);
		Иначе
			// Обновление нескольких Объектов с одинаковым - UID			
			Выборка = ПрочитатьПоUID(UID, Сервис, Аккаунт);
			Пока Выборка.Следующий() Цикл
				
				Если Не ЗначениеЗаполнено(Выборка.Аккаунт) Тогда
					// удаляем предыдущую запись с пустым аккаунтом
					УдалитьПоUID(UID, Сервис);
				Иначе	
					Обновить(UID, Сервис, Аккаунт, АктивныйЭтап, Состояние, Выборка.Объект, СбисИд); 
				КонецЕсли;
			
			КонецЦикла;
		КонецЕсли;
	Иначе 	
		Обновить(UID, Сервис, Аккаунт, АктивныйЭтап, Состояние, Объект, СбисИд);
	КонецЕсли;
КонецПроцедуры

Процедура Обновить(UID, Сервис = "", Аккаунт = "", АктивныйЭтап = "", Состояние = Неопределено,
		Объект, СбисИд) Экспорт
	
	Если Состояние = Неопределено Тогда
		
		СостояниеСсылка = Справочники.Saby_СостоянияОбъектов.ПустаяСсылка();
		
	ИначеЕсли ТипЗнч(Состояние) = Тип("СправочникСсылка.Saby_СостоянияОбъектов") Тогда 	
		
		СостояниеСсылка = Состояние;
		
	Иначе 
	
		СостояниеСсылка = Справочники.Saby_СостоянияОбъектов.НайтиПоРеквизиту("ИдентификаторСБИС", Число(Состояние));
		
	КонецЕсли;
		
	МенеджерЗаписи	= РегистрыСведений.Saby_Состояние.СоздатьМенеджерЗаписи(); 
	МенеджерЗаписи.Объект		= Объект; 
	МенеджерЗаписи.Сервис		= Сервис; 
	МенеджерЗаписи.Аккаунт		= Аккаунт; 
	МенеджерЗаписи.АктивныйЭтап	= АктивныйЭтап; 
	МенеджерЗаписи.Состояние	= СостояниеСсылка;
	МенеджерЗаписи.UID			= UID;
	МенеджерЗаписи.SbisId		= СбисИд;
	
	Попытка
		МенеджерЗаписи.Записать(Истина);    
	Исключение
		ИнфОбОшибке = ИнформацияОбОшибке();
		// При отсутствии переданного типа в поле регистра "Объект" выводим более понятное сообщение об ошибке
		Если НЕ ЗначениеЗаполнено(МенеджерЗаписи.Объект) И ЗначениеЗаполнено(Объект) Тогда
			СтруктураИсключенияСтр = NewExtExceptionСтрока(
				ИнфОбОшибке,
				"Ошибка записи в регистр.",
				"Данная версия расширения "+ЛокализацияНазваниеПродукта()+" не поддерживает тип данных: '" + ТипЗнч(Объект) + "'",
				"Обновление статуса.");
		// Остальные ошибки обрабатываем стандартно
		Иначе
			СтруктураИсключенияСтр = NewExtExceptionСтрока(ИнфОбОшибке,,,"Обновление статуса");
		КонецЕсли;
		ВызватьИсключение СтруктураИсключенияСтр;
	КонецПопытки;
	
КонецПроцедуры

#Область include_core_base_Helpers
#КонецОбласти

Функция ПолучитьТикетТекущейСессии( context_params = Неопределено ) Экспорт
	Если context_params = Неопределено Тогда
		context_params = НастройкиПодключенияПрочитать();
	КонецЕсли;
	ТокенSID	= Новый Структура("sid", context_params.session );
	ОбработкаСБИС = Обработки.SABY.Создать();
	Тикет_ = ОбработкаСБИС.local_helper_exec_method(context_params,"САП.GetTicketForCurrentSid", ТокенSID, Истина);
	Тикет_ = ОбработкаСБИС.local_helper_api_process_responce(Тикет_);
	Тикет	= "";
	Если ТипЗнч(Тикет_) = Тип("Строка") Тогда
		Тикет	= Тикет_;
	КонецЕсли;
	Возврат Тикет;
КонецФункции

#Область include_core_base_Helpers_НастройкиПодключения
#КонецОбласти  

#Область include_core_base_Helpers_ОбщиеНастройки
#КонецОбласти

#Область include_base_ОбработчикиСобытий_ПриОбновленииМодуля
#КонецОбласти

#Область include_core_base_Helpers_СоздатьДополнительноеСвойствоКЭДО
#КонецОбласти

#Область include_base_ОбработчикиСобытий_ПриПервомЗапускеКЭДО
#КонецОбласти

#Область include_base_ОбработчикиСобытий_ПриПервомЗапускеЕТРН
#КонецОбласти

#Область include_base_ОбработчикиСобытий_ПриПервомЗапускеБольничные
#КонецОбласти

#Область include_base_ОбработчикиСобытий_ПриПервомЗапуске
#КонецОбласти

#Область include_base_НазваниеПродукта
#КонецОбласти

#Область include_core_base_ПроверкаВерсии_ПолучитьИмяФайлаИНомерТекущейВерсии
#КонецОбласти

#Область include_core_base_Helpers_РаботаСоСвойствамиСтруктуры
#КонецОбласти

#Область include_core_base_ExtException
#КонецОбласти

#Область include_core_base_ОсобенностиПлатформы_РаботаСоСтроками
#КонецОбласти

#КонецЕсли
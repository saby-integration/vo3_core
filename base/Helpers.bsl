Функция ПолучитьСсылкуПоИдИС(знач ИмяИС, ИдИС) Экспорт
	Попытка
		мИмяИС = СтрРазделить82(ИмяИС,".");
		Если мИмяИС[0] = "Документы" Тогда
			УИД = Новый УникальныйИдентификатор(ИдИС);
			МенеджерОбъекта = Документы[мИмяИС[1]];
			Ссылка = МенеджерОбъекта.ПолучитьСсылку(УИД);
		ИначеЕсли мИмяИС[0] = "Справочники" Тогда
			УИД = Новый УникальныйИдентификатор(ИдИС);
			МенеджерОбъекта = Справочники[мИмяИС[1]];
			Ссылка = МенеджерОбъекта.ПолучитьСсылку(УИД);
		ИначеЕсли мИмяИС[0] = "Перечисления" Тогда
			МенеджерОбъекта = Перечисления[мИмяИС[1]];
			Ссылка = МенеджерОбъекта[ИдИС];
		ИначеЕсли мИмяИС[0] = "ПланыВидовРасчета" Тогда
			УИД = Новый УникальныйИдентификатор(ИдИС);
			МенеджерОбъекта = ПланыВидовРасчета[мИмяИС[1]];
			Ссылка = МенеджерОбъекта.ПолучитьСсылку(УИД);
		ИначеЕсли мИмяИС[0] = "ПланыВидовХарактеристик" Тогда
			УИД = Новый УникальныйИдентификатор(ИдИС);
			МенеджерОбъекта = ПланыВидовХарактеристик[мИмяИС[1]];
			Ссылка = МенеджерОбъекта.ПолучитьСсылку(УИД);
		КонецЕсли;
		Если Найти(Строка(Ссылка), "<Объект не найден>") > 0 Тогда
			ВызватьИсключение NewExtExceptionСтрока(,"Объект не найден",ИмяИС+" "+ИдИС,"ПолучитьСсылкуПоИдИС",,"NotFound");
		КонецЕсли;
		Возврат Ссылка;
	Исключение
		ИнфОбОшибке = ИнформацияОбОшибке();
		ВызватьИсключение NewExtExceptionСтрока(ИнфОбОшибке,,,"ПолучитьСсылкуПоИдИС");
	КонецПопытки;
КонецФункции

Функция ВерсияМетаданных()
	Возврат Метаданные.Версия;
КонецФункции

//DynamicDirective
Функция ВидТранспорта(context_params) Экспорт
	Результат = get_prop(context_params, "exchange_method", "API");
	Возврат Результат;
КонецФункции

Функция ПреобразоватьВерсию(ВерсияМетаданных) Экспорт
	Версия = ВерсияМетаданных;
	МассивПодстрок = СтрРазделить82(Версия,".");
	Версия = "";
	Для Каждого Запись ИЗ МассивПодстрок Цикл
		Запись = ПРАВ("0000"+Запись,4);
		Версия = Версия + Запись;
	КонецЦикла;
	Возврат Версия;
КонецФункции

Функция copy_block_context(param, block_context)
	Для каждого Поле из block_context цикл
		Если лев(Поле.Ключ,1) <> "_" и не Поле.Значение = Неопределено Тогда
			param.Вставить(Поле.Ключ, Поле.Значение);
		КонецЕсли;
	КонецЦикла;	
КонецФункции

Функция fill_action(action, status, subtitle)
	elapsedTime = action.end - action.begin;
	action.begin = Формат(Дата(1, 1, 1) + action.begin / 1000, "ДФ='yyyy-MM-dd HH:mm:ss'") + "." + (action.begin%1000);
	action.end = Формат(Дата(1, 1, 1) + action.end / 1000, "ДФ='yyyy-MM-dd HH:mm:ss'") + "." + (action.end%1000);
	action.Вставить("ElapsedTime", elapsedTime);
	action.Вставить("Status", status);
	action.Вставить("Subtitle", subtitle);
	Возврат action
КонецФункции

//DynamicDirective
Функция РазобратьСтрокуУРЛ(СтрокаАдреса, ПротоколПоУмолчанию = "http")
	Адрес = Новый Структура("scheme, host, port, resource");
	Индекс = Найти(СтрокаАдреса, "://");
	ПоложениеРесурса = Найти(СтрокаАдреса, "://");
	Если Индекс > 0 Тогда
		Адрес.scheme = НРег(Лев(СтрокаАдреса, Индекс - 1));
		СтрокаАдреса = Сред(СтрокаАдреса, Индекс + 3);
	Иначе
		Адрес.scheme = НРег(ПротоколПоУмолчанию);
	КонецЕсли;
	Индекс = Найти(СтрокаАдреса, "?");
	Если Индекс > 0 Тогда
		ПараметрыРесурса = Сред(СтрокаАдреса, Индекс );
		СтрокаАдреса = Сред(СтрокаАдреса, 0, Индекс-1);
	Иначе
		ПараметрыРесурса = "";
	КонецЕсли;

	Индекс = Найти(СтрокаАдреса, "/");
	Если Индекс > 0 Тогда
		Адрес.resource = Сред(СтрокаАдреса, Индекс) + ПараметрыРесурса;
		СтрокаАдреса = Сред(СтрокаАдреса, 0, Индекс - 1);
	Иначе
		Адрес.resource = ПараметрыРесурса;
	КонецЕсли;
	
	Индекс = Найти(СтрокаАдреса, ":");
	Если Индекс > 0 Тогда
		Адрес.port = Сред(СтрокаАдреса, Индекс + 1);
		Адрес.host = Лев(СтрокаАдреса, Индекс);
	Иначе
		Адрес.host = СтрокаАдреса;
	КонецЕсли;
	Возврат Адрес;
КонецФункции

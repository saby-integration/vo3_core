
&НаСервере
Процедура ЗаполнитьКолонкиИерархическогоСписка() Экспорт
	ЭлемФормы = ПолучитьЭлементыФормыНаСервере();
	ИмяТаблицы = ТекущийРаздел["Шаблон"]; 
	
	ТабПоле = ЭлемФормы[ИмяТаблицы];
	ТабПоле.Колонки.Очистить();
	ТабПоле.Значение.Колонки.Очистить();
	ТабПоле.Значение.Колонки.Добавить("Отмечен", Новый ОписаниеТипов("Число"));
	ДобавитьОтмечен = Истина;
	КвалификаторыСтроки = Новый КвалификаторыСтроки();
	ОписаниеТипаСтрока = Новый ОписаниеТипов("Строка", ,КвалификаторыСтроки);
	Для Каждого Колонка Из ТекущийРаздел.ПараметрыОтображения["Columns"] Цикл
		ОписаниеТипа = ОписаниеТипаСтрока;
		Если get_prop(Колонка, "Type") <> Неопределено Тогда
			ОписаниеТипа = ОписаниеТипаКолонки(Колонка["Type"]);
		КонецЕсли;
		ТабПоле.Значение.Колонки.Добавить(Колонка["Name"], ОписаниеТипа);
		Если get_prop(Колонка, "Visibility") = Ложь Тогда
			Продолжить;
		КонецЕсли;	
		Поле = ТабПоле.Колонки.Добавить(ИмяТаблицы + Колонка["Name"], Колонка["Title"]);
		Поле.Данные = Колонка["Name"];
		Если get_prop(Колонка, "Properties") <> Неопределено Тогда
			Для Каждого СвойствоПоля Из Колонка["Properties"] Цикл
				Поле[СвойствоПоля.Ключ] = СвойствоПоля.Значение;
			КонецЦикла;
		КонецЕсли;
		Картинка = get_prop(Колонка, "RowIcon");
		Если Картинка <> Неопределено Тогда
			Поле.КартинкиСтрок = ЭлемФормы[Картинка].Картинка;
			Поле.ЭлементУправления.ТипЗначения = ОписаниеТипа;
		Конецесли;
		Если ДобавитьОтмечен Тогда
			Поле.ДанныеФлажка = "Отмечен";
			Поле.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
			Поле.ОтображатьИерархию = Истина;
			Поле.ТолькоПросмотр = Ложь;
			Поле.ТриСостоянияФлажка = Истина;
			ДобавитьОтмечен = Ложь;
		КонецЕсли
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ИерархическийСписокПередРазворачиванием(Элемент, Строка, Отказ)
	ПерваяКолонка = ТекущийРаздел.ПараметрыОтображения["Columns"][0]["Name"];
	Если Строка.Строки[0][ПерваяКолонка] = "Нет подчиненных" Тогда
		Строка.Строки.Очистить();
		Фильтр = ДанныеФильтра.Значения;
		Фильтр.Вставить("Родитель", Строка.Ссылка);
		Данные = ПолучитьДанныеСписка(Фильтр);
		Фильтр.Удалить("Родитель");
		ЗаполнитьДанныеИерархическогоСписка(Строка, Данные);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция РодительЭлементаДерева(Элемент)
	Возврат Элемент.Родитель;
КонецФункции

&НаКлиенте
Функция СтрокиЭлементаДереваНаКлиенте(Элемент)
	Возврат Элемент.Строки;
КонецФункции

Функция СтрокиЭлементаДерева(Элемент)
	Возврат Элемент.Строки;
КонецФункции


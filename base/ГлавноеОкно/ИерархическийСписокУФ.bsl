
&НаСервере
Процедура ЗаполнитьКолонкиИерархическогоСписка() Экспорт
	ЭлемФормы = ПолучитьЭлементыФормыНаСервере();
	ИмяТаблицы = ТекущийРаздел["Шаблон"];
	
	ТабПоле = ЭлемФормы[ИмяТаблицы];
	Таблица = ДанныеФормыВЗначение(ЭтаФорма[ИмяТаблицы], Тип("ДеревоЗначений"));
	//Таблица.Очистить();
	Таблица.Колонки.Очистить();
		
	СоздатьРеквизитыФормыИерархическийСписок(Таблица, ИмяТаблицы);
	
	Если ТекущийРаздел.Свойство("ЭлементыФормы") Тогда
		Для Каждого Элем Из ТекущийРаздел.ЭлементыФормы Цикл
			ЭлемФормы.Удалить(ЭлемФормы.Найти(Элем));
		КонецЦикла;
		ТекущийРаздел.ЭлементыФормы.Очистить();
	Иначе
		ТекущийРаздел.Вставить("ЭлементыФормы", Новый Массив());
	КонецЕсли;
	
	ЭлемГруппа = ЭлемФормы.Добавить(ИмяТаблицы + "ГруппаОтмечен", Тип("ГруппаФормы"), ТабПоле);
	ЭлемГруппа.Группировка = ГруппировкаКолонок.ВЯчейке;
	ТекущийРаздел.ЭлементыФормы.Добавить(ИмяТаблицы + "ГруппаОтмечен");
	Элем = ЭлемФормы.Добавить(ИмяТаблицы + "Отмечен", Тип("ПолеФормы"), ЭлемГруппа);
	Элем.Вид = ВидПоляФормы.ПолеФлажка;
	Элем.ПутьКДанным = ИмяТаблицы + "." + "Отмечен";
	Элем.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	Элем.ТриСостояния = Истина;
	УстановитьДействиеНаЭлемент(Элем, "ПриИзменении", "ИерархическийСписокПриИзмененииФлажка");
	ЭтоПерваяКолонка = Истина;
	Для Каждого Колонка Из ТекущийРаздел.ПараметрыОтображения["Columns"] Цикл
		Если get_prop(Колонка, "Visibility") = Истина Тогда
			Если ЭтоПерваяКолонка Тогда
				Элем = ЭлемФормы.Добавить(ИмяТаблицы + Колонка["Name"], Тип("ПолеФормы"), ЭлемГруппа);
				ЭлемГруппа.Заголовок = Колонка["Title"];
				ЭтоПерваяКолонка = Ложь;
			Иначе
				Элем = ЭлемФормы.Добавить(ИмяТаблицы + Колонка["Name"], Тип("ПолеФормы"), ТабПоле);
				Элем.Заголовок = Колонка["Title"];
				ТекущийРаздел.ЭлементыФормы.Добавить(ИмяТаблицы + Колонка["Name"]);
			КонецЕсли;
			Элем.Вид = ВидПоляФормы.ПолеНадписи;
			Элем.ПутьКДанным = ИмяТаблицы + "." + Колонка["Name"];
			Если get_prop(Колонка, "Properties") <> Неопределено Тогда 
				Для Каждого СвойствоПоля Из Колонка["Properties"] Цикл
					Элем[СвойствоПоля.Ключ] = СвойствоПоля.Значение;
				КонецЦикла;
			КонецЕсли;
			Картинка = get_prop(Колонка, "RowIcon");
			Если Картинка <> Неопределено Тогда
				Элем.Вид = ВидПоляФормы.ПолеКартинки;
				Элем.КартинкаЗначений = ЭлемФормы[Картинка].Картинка
			Конецесли;
		КонецЕсли;
	КонецЦикла;
	ЗначениеВДанныеФормы(Таблица, ЭтаФорма[ИмяТаблицы]);
	УстановитьУсловноеОформление();
КонецПроцедуры

&НаКлиенте
Процедура ИерархическийСписокПередРазворачиванием(Элемент, Строка, Отказ)
	ПерваяКолонка = ТекущийРаздел.ПараметрыОтображения["Columns"][0]["Name"];
	ТекДанные = ИерархическийСписок.НайтиПоИдентификатору(Строка);
	Отметка = ТекДанные.Отмечен;
	Строки = СтрокиЭлементаДереваНаКлиенте(ТекДанные);
	Если Строки[0][ПерваяКолонка] = "Нет подчиненных" Тогда
		Строки.Очистить();
		СтрокаСсылка = ТекДанные.Ссылка;
		Рез = ИерархическийСписокПередРазворачиваниемНаСервере(СтрокаСсылка);
		Для Каждого Стр Из Рез Цикл
			СтрТ = Строки.Добавить();
			Для Каждого Колонка Из ТекущийРаздел.ПараметрыОтображения["Columns"] Цикл
				СтрТ[Колонка["Name"]] = Стр[Колонка["Name"]];
			КонецЦикла;
			СтрТ.Отмечен = Отметка;
			// Если полученная строка является группой, то создаем 
			// фиктивную подчиненную строку.
			Если Стр.ЭтоГруппа Тогда
			    ПерваяКолонка = ТекущийРаздел.ПараметрыОтображения["Columns"][0]["Name"];
				Подстроки = СтрокиЭлементаДереваНаКлиенте(СтрТ);
				ПодстрокаДерева = Подстроки.Добавить();
			    ПодстрокаДерева[ПерваяКолонка] = "Нет подчиненных";
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;
	
КонецПроцедуры

Функция ИерархическийСписокПередРазворачиваниемНаСервере(СтрокаСсылка)
	Фильтр = ДанныеФильтра.Значения;
	Фильтр.Вставить("Родитель", СтрокаСсылка);
	Данные = ПолучитьДанныеСписка(Фильтр);
	Фильтр.Удалить("Родитель");
	Таблица = ДанныеФормыВЗначение(ИерархическийСписок, Тип("ДеревоЗначений"));
	Строка = Таблица.Строки.НайтиСтроки(Новый Структура("Ссылка", СтрокаСсылка), Истина);
	Строка[0].Строки.Очистить();
	ЗаполнитьДанныеИерархическогоСписка(Строка[0], Данные);
	Возврат СтрокиДереваВМассив(Строка[0].Строки, Таблица.Колонки);
КонецФункции

Функция СтрокиДереваВМассив(Строки, Колонки) Экспорт
	
	Результат = Новый Массив;
	СтруктураКолонок = Новый Структура;
	Для каждого ТекущаяКолонка Из Колонки Цикл
		СтруктураКолонок.Вставить(ТекущаяКолонка.Имя);
	КонецЦикла;
	Для каждого ТекущаяСтрока Из Строки Цикл
		СтруктураТекущейСтроки = Новый Структура;
		Для каждого ТекущийКлюч Из СтруктураКолонок Цикл
			СтруктураТекущейСтроки.Вставить(ТекущийКлюч.Ключ);
		КонецЦикла;
		ЗаполнитьЗначенияСвойств(СтруктураТекущейСтроки, ТекущаяСтрока);
		Результат.Добавить(СтруктураТекущейСтроки);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Процедура СоздатьРеквизитыФормыИерархическийСписок(Таблица, ИмяТаблицы)
	РеквизитыУдалить = Новый Массив();
	Реквизиты = Новый Массив();
	СоздатьРеквизитыТаблицыФормы(Таблица, ИмяТаблицы, Реквизиты, РеквизитыУдалить);
	
	Рек = Новый РеквизитФормы("Отмечен", Новый ОписаниеТипов("Число"), ИмяТаблицы);
	Реквизиты.Добавить(Рек);
	Таблица.Колонки.Добавить("Отмечен", Новый ОписаниеТипов("Число"));
	
	ИзменитьРеквизиты(Реквизиты, РеквизитыУдалить);
КонецПроцедуры

&НаКлиенте
Функция РодительЭлементаДерева(Элемент)
	Возврат Элемент.ПолучитьРодителя();
КонецФункции

&НаКлиенте
Функция СтрокиЭлементаДереваНаКлиенте(Элемент)
	Возврат Элемент.ПолучитьЭлементы();
КонецФункции

Функция СтрокиЭлементаДерева(Элемент)
	Возврат Элемент.ПолучитьЭлементы();
КонецФункции


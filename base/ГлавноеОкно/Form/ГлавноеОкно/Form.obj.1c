&НаКлиенте
Перем КэшФорм Экспорт;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	МодульОбъекта = ПолучитьМодульОбъекта();
	ОбщиеПараметры = МодульОбъекта.ПриНачалеРаботы();	
	context_param = МодульОбъекта.НастройкиПодключенияПрочитать();
	Тема = ?(context_param = Неопределено, МодульОбъекта.ТемаПоУмолчанию(), get_prop(context_param, "Тема"));
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьРеквизитОбъектаДокумента()
	ЭлементыФормочки = ПолучитьЭлементыФормы();
	ТипОбъектаДокумент = ТипЗнч(ЭлементыФормочки.Аккордеон.Документ);
	Если ТипОбъектаДокумент = Тип("COMОбъект") Тогда
		//IE
		РеквизитОбъектаДокумента = "parentWindow";
	ИначеЕсли ТипОбъектаДокумент = Тип("ВнешнийОбъект") Тогда
		//WebKit
		РеквизитОбъектаДокумента = "defaultView";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии()
	ПолучитьРеквизитОбъектаДокумента();
	КэшФорм = Новый Структура("Формы, ИменаФорм", Новый Соответствие);
	КэшФорм.Вставить("ПутьКФормам", ПутьКФормамОбработки());
	Если Тема = "Saby" Тогда
		ФормаБраузера = ПолучитьФормуОбработки("Browser", КэшФорм.ПутьКФормам);
		ФормаБраузера.context_param = context_param;
		ФормаБраузера.Открыть();
		ЭтаФорма.Закрыть();
		Возврат;
	КонецЕсли;
	ПриОткрытииАвторизация();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииПослеАвторизации(Результат, ДопПараметры = Неопределено) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	ДанныеФильтра = Новый Структура("ПараметрыОтображения, Значения");	
	ТекущийРаздел = Новый Структура("Идентификатор, ПараметрыОтображения, template, iniName");
	КэшФорм.ИменаФорм = ПослеОткрытия();		
КонецПроцедуры

&НаСервере
Функция ПослеОткрытия()
	МодульОбъекта = ПолучитьМодульОбъекта();
	connection_info = МодульОбъекта.ПослеАутентификации(context_param);
	ОбновитьЗаголовокФормы();
	ПараметрыКоманды = Новый Структура("ini_name, endpoint, params", "Accordion");
	Попытка
		СтруктураАккордеона = МодульОбъекта.LocalCalcIni(ПараметрыКоманды).data;
	    ИдРаздела = get_prop(context_param, "РазделПоУмолчанию");
		Если ИдРаздела = Неопределено Тогда
			Для Каждого ПунктАккордеона Из СтруктураАккордеона Цикл
				Если ПунктАккордеона["action"] = Истина Тогда
					ИдРаздела = ПунктАккордеона["id"];
					Прервать;
				КонецЕсли;
			КонецЦикла;               
		КонецЕсли;
		ПостроитьАккордеон(СтруктураАккордеона, ИдРаздела);
		ТекущийРаздел.Вставить("Идентификатор", ИдРаздела);
		ТекущийРаздел.Вставить("template", "ПлоскийСписок");
		ТекущийРаздел.Вставить("ini_name", ИдРаздела+"_list");
		ПоказатьШаблон(ТекущийРаздел);
	Исключение
		Ошибка = ОписаниеОшибки();
		ТекущийРаздел.Вставить("template", "СтраницаЗаглушка");
	КонецПопытки;
	
	ПараметрыКоманды = Новый Структура("ini_name, endpoint, params", "Конфигурация", "СоответствиеФорм");
	ФормыПросмотраДокумента = МодульОбъекта.LocalCalcIni(ПараметрыКоманды).data;
	Возврат	ФормыПросмотраДокумента;
КонецФункции

Процедура ОбновитьЗаголовокФормы() 
	НовыйЗаголовок		= СтрЗаменить(СтрЗаменить(СокрЛП(context_param.api_url), "https:", ""), "/", "");;
	ДобавитьКЗаголовку	= "";
	Если ЗначениеЗаполнено(context_param.user_fio) Тогда
		ДобавитьКЗаголовку = context_param.user_fio;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(context_param.DemoLicense) Тогда
		Если Не ПустаяСтрока(ДобавитьКЗаголовку) Тогда
			ДобавитьКЗаголовку = ДобавитьКЗаголовку + " ";
		КонецЕсли;
		Если context_param.DemoLicense > ТекущаяДата() Тогда
			ДобавитьКЗаголовку = ДобавитьКЗаголовку + "Демо-версия до " + Формат(context_param.DemoLicense, "ДФ=dd.MM.yyyy");
		Иначе
			ДобавитьКЗаголовку = ДобавитьКЗаголовку + "Пробный период истек";
		КонецЕсли;
	КонецЕсли;
	Если Не ПустаяСтрока(ДобавитьКЗаголовку) Тогда
		НовыйЗаголовок = НовыйЗаголовок + " (" + ДобавитьКЗаголовку + ")";
	КонецЕсли;
	ЭтаФорма.Заголовок = НовыйЗаголовок;
КонецПроцедуры

#Область include_core_base_ГлавноеОкно_Аккордеон
#КонецОбласти


&НаКлиенте
Функция ОбработатьДействиеНаКлиенте(ИмяДействия, Параметры)
	Если ИмяДействия = "ADDON_CLICK" Тогда
		Если Параметры = "addon_status_version" Тогда
			ЗапуститьПриложение(СтатусВерсии.СсылкаДляСкачивания);
		ИначеЕсли Параметры = "addon_version" Тогда
			НадписьСписокИзмененийНажатие(Неопределено);	
		ИначеЕсли Параметры = "addon_logo" Тогда //пока никак не обрабатывается	
		КонецЕсли;
	Иначе
		Возврат ОбработатьДействие(ИмяДействия, Параметры);
	КонецЕсли;
КонецФункции 

&НаСервере
Функция ОбработатьДействие(ИмяДействия, Параметры)
	МодульОбъекта = ПолучитьМодульОбъекта();
	Если ИмяДействия = "ADDON_NAVIGATE" Тогда
		ТекущийРаздел.Вставить("Идентификатор", Параметры);
		ТекущийРаздел.Вставить("template", "ПлоскийСписок");
		ТекущийРаздел.Вставить("ini_name", Параметры+"_list");
		ПоказатьШаблон(ТекущийРаздел);
	ИначеЕсли ИмяДействия = "ADDON_READSYSTEMINFO" Тогда
		Результат = МодульОбъекта.API_ADDON_READSYSTEMINFO(Параметры);	
	Иначе
		ВызватьИсключение NewExtExceptionСтрока(,"Неизвестная команда", ИмяДействия);
	КонецЕсли;
	//Возврат ПодготовитьРезультат(Результат);
КонецФункции

&НаСервере
Процедура ПоказатьШаблон(ТекущийРаздел)
	ЭлемФормы = ПолучитьЭлементыФормыНаСервере();
	ПанельКонтент = ЭлемФормы.ПанельКонтент;
	Шаблон = ТекущийРаздел["template"];
	ПанельКонтент.ТекущаяСтраница = ПолучитьСтраницу(ПанельКонтент, "Страница" + Шаблон);
	Если Шаблон = "ПлоскийСписок" Тогда
		ПлоскийСписокПриОткрытии();
	ИначеЕсли Шаблон = "ИерархическийСписок" Тогда

	Иначе
		
	КонецЕсли;
		
КонецПроцедуры

#Область include_core_base_ГлавноеОкно_ПлоскийСписок
#КонецОбласти

#Область include_core_base_ГлавноеОкно_ПанельОпераций
#КонецОбласти

#Область include_core_base_ГлавноеОкно_Фильтр
#КонецОбласти

&НаКлиенте
Процедура ЗагрузитьВСБИС(Элемент)
	СписокОтмеченных = СписокОтмеченныхЗаписей();
	Если СписокОтмеченных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивОбъектов = ОбъектыДляЗагрузки(СписокОтмеченных);
		
	ПараметрыВызова	= Новый Соответствие();
	ПараметрыВызова.Вставить("params", context_param );
	ПараметрыВызова.Вставить("commands_result",Новый Массив);
	ПараметрыВызова.Вставить("endpoint","");
	ПараметрыВызова.Вставить("operation_uuid", СокрЛП(Новый УникальныйИдентификатор));
	ПараметрыВызова.Вставить("ini_name","Документы_send");
	ConnectionId	= Неопределено;
	context_param.Свойство("ConnectionId", ConnectionId);
	ПараметрыВызова.Вставить("connection_uuid", ConnectionId);
	ПараметрыВызова.Вставить("object",Новый Соответствие());
	ПараметрыВызова["object"].Вставить("list_doc_ref", МассивОбъектов); 
	
	Форма = ПолучитьФормуОбработки("ДлительнаяОперация", "", , ЭтаФорма);
	Форма.Команда = ПараметрыВызова;
	Форма.Открыть();
КонецПроцедуры

&НаСервере
Функция ОбъектыДляЗагрузки(СписокОтмеченных)
	МассивОбъектов = Новый Массив();
	Для Каждого Строка Из СписокОтмеченных Цикл
		Если Строка.Отмечен Тогда
			API3_ref = Новый Структура;
			API3_ref.Вставить("ИдИС",			СокрЛП(Строка.Документ.УникальныйИдентификатор()) );
			API3_ref.Вставить("ТипИС",			"Документы" );  
			
			ТипЗначения = ТипЗнч(Строка.Документ);
			ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗначения);
			API3_ref.Вставить("ИмяИС",			ОбъектМетаданных.Имя );
			API3_ref.Вставить("ini_name",		"СинхВыгрузка_"+ОбъектМетаданных.Имя );
			API3_ref.Вставить("Название",		СокрЛП(Строка.Документ) );
			МассивОбъектов.Добавить(API3_ref);	
		КонецЕсли;
	КонецЦикла;
    Возврат МассивОбъектов;
КонецФункции

&НаСервере
Процедура ПослеВыполненияДействия(Результат)  Экспорт
	ИмяТаблицы = ТекущийРаздел["template"];
	ЭтаФорма[ИмяТаблицы].Очистить();
	ОбновитьСписок();
КонецПроцедуры

&НаКлиенте
Процедура Обработать(Элемент)
	СписокОтмеченных = СписокОтмеченныхЗаписей();
	Если СписокОтмеченных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	СписокДокументовСБИС = Новый Массив();
	СписокДокументов1С = Новый Массив();
	Для Каждого Стр Из СписокОтмеченных Цикл
		Док = Стр["ДокументСБИС"];
		ДокументСБИС = Новый Структура("Идентификатор, ПервичныйКлюч, Документ1С", 
		Док["Идентификатор"], Док["ИдСБИС"], Док["Документ1С"]);	
		СписокДокументовСБИС.Добавить(ДокументСБИС);
		//Если СтрокаСпискаЗадач["Документ1С"] <> Неопределено Тогда
		//	СписокДокументов1С.Добавить(СтрокаСпискаЗадач["Документ1С"]);
		//КонецЕсли;
	КонецЦикла;
	
	ПараметрыВФорму = Новый Структура("СписокДокументовСБИС, СписокДокументов1С, МожноПереотправитьВСБИС, МожноОбновитьВСБИС", 
	СписокДокументовСБИС, СписокДокументов1С, Ложь, Истина);
	Форма = ПолучитьФормуОбработки("ВыполнитьДействие", КэшФорм.ПутьКФормам, ПараметрыВФорму, ЭтаФорма);
	Форма.Открыть();
КонецПроцедуры
&НаКлиенте
Процедура Обработать2(Элемент)
	Сообщить("Обработать2");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроек(Элемент) Экспорт    
	
	Форма = ПолучитьФормуОбработки("Настройки", КэшФорм.ПутьКФормам, , ЭтаФорма);
	//Форма.context_param = context_param;
	Форма.Открыть();
	
КонецПроцедуры

#Область include_core_base_ГлавноеОкно_ОткрывалкаФорм
#КонецОбласти

#Область include_core_base_Helpers_FormGetters
#КонецОбласти

#Область include_core_base_ОсобенностиПлатформы_РаботаСЭлементамиФормы
#КонецОбласти

#Область include_core_base_ГлавноеОкно_ОсобенностиПриложения
#КонецОбласти

#Область include_core_base_ПроверкаВерсии_НаФорме
#КонецОбласти

#Область include_base_ОткрытьСтраницуИсторииИзменения
#КонецОбласти

&НаКлиенте
Процедура НалоговыйМониторингНажатие(Кнопка)
	ФормаБраузера = ПолучитьФормуОбработки("Browser", КэшФорм.ПутьКФормам,,ЭтаФорма);
	ФормаБраузера.context_param = context_param;
	ФормаБраузера.Параметры = Новый Структура("АдресСтраницы", context_param.api_url+"/page/import-taxmon");
	ФормаБраузера.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияНаКлиенте(ИмяСобытия, Параметр, Источник)
	ОбработкаОповещения(ИмяСобытия, Параметр);
	Если ИмяСобытия = "Saby_ЗакрытиеФормыАвторизации" Тогда
		Если get_prop(Параметр, "АвторизацияУспешна", Ложь) = Ложь Тогда
			ЭтаФорма.Закрыть();
			Возврат;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр)
	Если ИмяСобытия = "Saby_ЗакрытиеФормыАвторизации" Или ИмяСобытия = "Saby_НастройкиИзменены" Тогда
		МодульОбъекта = ПолучитьМодульОбъекта();
		context_param = МодульОбъекта.НастройкиПодключенияПрочитать();
	ИначеЕсли ИмяСобытия = "Saby_ЗавершениеВыполнитьДействие" Тогда
		ПослеВыполненияДействия(Параметр);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АккордеонДокументСформирован(Элемент)
	ОбновитьАккордеон();
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	Если ТипЗнч(context_param) = Тип("Структура") И ТекущийРаздел <> Неопределено Тогда
		context_param.Вставить("РазделПоУмолчанию", ТекущийРаздел.Идентификатор);
		ПолучитьМодульОбъекта().НастройкиПодключенияЗаписать(context_param );
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	ПриЗакрытииНаСервере();
КонецПроцедуры

#Область include_core_base_Helpers_Картинки
#КонецОбласти

#Область include_core_base_Авторизация_СменаАккаунта
#КонецОбласти

#Область include_core_base_Авторизация_Выход
#КонецОбласти

&НаКлиенте
Процедура ВыйтиНажатие(Элемент)
	ВыйтиНаСервере();
	//ПолучитьАктуальностьВерсии();
	//УстановитьЗаголовокПодсказкуКнопкиВыйти();
	Сообщить("Сессия и пароль сброшены");
	Оповестить("SabySignOut");
	ОткрытьФормуОбработки("Вход", ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьАккаунтНажатие(Элемент)
	ЭлементыФормочки = ПолучитьЭлементыФормы();
	ЭлементФормыДляВыпадающегоСписка = ЭлементыФормочки.Найти("МенюПриложения" + ТекущийРаздел["template"]);
	СменитьАккаунтВВыпадающемСписке(ЭлементФормыДляВыпадающегоСписка);
КонецПроцедуры


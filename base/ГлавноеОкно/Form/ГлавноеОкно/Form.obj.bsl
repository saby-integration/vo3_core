
#Область include_core_base_ГлавноеОкно_Переменные
#КонецОбласти

#Область include_core_base_ГлавноеОкно_ПриОткрытии
#КонецОбласти

&НаКлиенте
Процедура ПолучитьРеквизитОбъектаДокумента()
	ЭлементыФормочки = ПолучитьЭлементыФормы();
	ТипОбъектаДокумент = ТипЗнч(ЭлементыФормочки.АккордеонHTML.Документ);
	Если ТипОбъектаДокумент = Тип("COMОбъект") Тогда
		//IE
		РеквизитОбъектаДокумента = "parentWindow";
	ИначеЕсли ТипОбъектаДокумент = Тип("ВнешнийОбъект") Тогда
		//WebKit
		РеквизитОбъектаДокумента = "defaultView";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СформироватьМассивыДокументов(СписокДокументовСБИС, СписокДокументов1С) 
	СписокОтмеченных = СписокОтмеченныхЗаписей(Ложь);
	Если СписокОтмеченных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
    Если СписокОтмеченных.Количество() = 0 Тогда
		ПоказатьОповещениеПользователя(
			"Не выбрано ни одного документа.",,"",
			БиблиотекаКартинок["Ошибка32"],
			СтатусОповещенияПользователя.Важное, Новый УникальныйИдентификатор);
		Возврат;
	КонецЕсли; 
	
	Для Каждого Запись ИЗ СписокОтмеченных Цикл
		ДокСбис = Запись["ДокументСБИС"];
		Если ТипЗнч(ДокСбис) <> Тип("Соответствие") Тогда
			Продолжить;
		КонецЕсли;	
		ДокументСБИС = Новый Структура("Идентификатор, ПервичныйКлюч, Документ1С", 
		ДокСбис["Идентификатор"],ДокСбис["ИдСБИС"], Запись["ДокументИС"]);	
		СписокДокументовСБИС.Добавить(ДокументСБИС);
		Если НЕ ЗначениеЗаполнено(Запись["ДокументИС"]) Тогда
			Продолжить;
		КонецЕсли;	
		Если ТипЗнч(Запись["ДокументИС"]) <> Тип("Массив") Тогда	
			СписокДокументов1С.Добавить(Запись["ДокументИС"]);   
			Продолжить;
		КонецЕсли;	                                          
		Для Каждого ЗаписьМассива Из Запись["ДокументИС"] Цикл 
			СписокДокументов1С.Добавить(ЗаписьМассива);	
		КонецЦикла;	
	КонецЦикла;		
КонецПроцедуры

&НаКлиенте
Процедура ПереоткрытиеФормыОтправки( Результат, Параметры ) Экспорт
	// Используется в УФ обработке
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;

	МассивОтмеченныхДокументов = Новый Массив;
	Для Каждого ЭлементСписка Из Параметры.ОбъектыОтправки Цикл
		ОтмеченныйДокумент = Новый Структура;
		ОтмеченныйДокумент.Вставить("Отмечен", Истина);
		ОтмеченныйДокумент.Вставить("ДокументИС", ЭлементСписка);
		МассивОтмеченныхДокументов.Добавить(ОтмеченныйДокумент);
	КонецЦикла;

	МассивОбъектов = ОбъектыДляЗагрузки(МассивОтмеченныхДокументов);

	ПараметрыВызова = Новый Структура;
	ПараметрыВызова.Вставить("Источник", МассивОбъектов);
	Форма = ПолучитьФормуОбработки("ЗагрузкаДокументов", ПутьКФормамОбработки(), ПараметрыВызова, ЭтаФорма);
	Форма.Открыть();
КонецПроцедуры

#Область include_core_base_ГлавноеОкно_Аккордеон
#КонецОбласти

&НаКлиенте
Функция ОбработатьДействиеНаКлиенте(ИмяДействия, Параметры)
	Если ИмяДействия = "ADDON_CLICK" Тогда
		Если Параметры = "addon_status_version" Тогда
			СбисОбновитьОбработкуНаКлиенте();
		ИначеЕсли Параметры = "addon_version" Тогда
			ЗапуститьПриложение(СтатусВерсии.СсылкаДляСкачивания);
		ИначеЕсли Параметры = "addon_logo" Тогда //пока никак не обрабатывается	
		КонецЕсли;
	Иначе
		Возврат ОбработатьДействие(ИмяДействия, Параметры);
	КонецЕсли;
КонецФункции 

&НаСервере
Функция ОбработатьДействие(ИмяДействия, Параметры)
	МодульОбъекта = ПолучитьМодульОбъекта();
	Если ИмяДействия = "ADDON_NAVIGATE" Тогда
		ТекущийРаздел.Вставить("Идентификатор", Параметры);
		ПоказатьШаблон();
	ИначеЕсли ИмяДействия = "ADDON_READSYSTEMINFO" Тогда
		Результат = МодульОбъекта.API_ADDON_READSYSTEMINFO(Параметры);	
	Иначе
		ВызватьИсключение NewExtExceptionСтрока(,"Неизвестная команда", ИмяДействия);
	КонецЕсли;
	//Возврат ПодготовитьРезультат(Результат);
КонецФункции

#Область include_core_base_ГлавноеОкно_ПоказатьШаблон
#КонецОбласти

#Область include_core_base_ГлавноеОкно_ПлоскийСписок
#КонецОбласти

#Область include_core_base_ГлавноеОкно_ИерархическийСписок
#КонецОбласти

#Область include_core_base_ГлавноеОкно_ПанельОпераций
#КонецОбласти

#Область include_core_base_ГлавноеОкно_Фильтр
#КонецОбласти

#Область include_core_base_ВстраиваниеВФормы_КомандаПоиск
#КонецОбласти

&НаКлиенте
Процедура ЗагрузитьВСБИСНажатие(Команда) Экспорт
	СписокОтмеченных = СписокОтмеченныхЗаписей();
	МассивСсылокОтмеченных = МассивСсылокДокументыИС(СписокОтмеченных);
	Если МассивСсылокОтмеченных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	ПараметрыФормы = Новый Структура("ИмяИни","");
	
	ОписаниеКоманды = Новый Структура("Представление,ПараметрыФормы", "Загрузить в SABY", ПараметрыФормы);
	
	ПараметрКоманды = Новый Структура();
	ПараметрКоманды.Вставить("Источник", МассивСсылокОтмеченных);
	ПараметрКоманды.Вставить("ОписаниеКоманды",ОписаниеКоманды);
	ПараметрКоманды.Вставить("ЭтоФормаОбъекта", Ложь);
	ПараметрКоманды.Вставить("Форма", ЭтаФорма);
    ЗагрузитьВСБИС( Команда, ПараметрКоманды );
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВСБИСНажатие(Элемент)
	СписокОтмеченных = СписокОтмеченныхЗаписей();
	МассивСсылокОтмеченных = МассивСсылокДокументыИС(СписокОтмеченных);
	Если МассивСсылокОтмеченных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	ОписаниеКоманды = Новый Структура("Представление", "Открыть в SABY");
	
	ПараметрКоманды = Новый Структура();
	ПараметрКоманды.Вставить("Источник", МассивСсылокОтмеченных);
	ПараметрКоманды.Вставить("ОписаниеКоманды",ОписаниеКоманды);
	ПараметрКоманды.Вставить("ЭтоФормаОбъекта", Ложь);
	ПараметрКоманды.Вставить("Форма", ЭтаФорма);

	ПриНажатииОткрытьВСБИСПолучитьUID( Элемент, ПараметрКоманды );
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусыНажатие(Элемент)
	СписокОтмеченных = СписокОтмеченныхЗаписей();
	МассивСсылокОтмеченных = МассивСсылокДокументыИС(СписокОтмеченных);
	Если МассивСсылокОтмеченных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	ОписаниеКоманды = Новый Структура("Представление", "Обновить статусы");
	
	ПараметрКоманды = Новый Структура();
	ПараметрКоманды.Вставить("Источник", МассивСсылокОтмеченных);
	ПараметрКоманды.Вставить("ОписаниеКоманды",ОписаниеКоманды);
	ПараметрКоманды.Вставить("ЭтоФормаОбъекта", Ложь);
	ПараметрКоманды.Вставить("Форма", ЭтаФорма);

	ПриНажатииОбновитьСтатусы( Элемент, ПараметрКоманды );
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВложенияИзСБИСНажатие(Элемент)
	СписокОтмеченных = СписокОтмеченныхЗаписей();
	Если СписокОтмеченных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	МассивСсылокОтмеченных = МассивСсылокДокументыИС(СписокОтмеченных);
	Если МассивСсылокОтмеченных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 

	ОписаниеКоманды = Новый Структура("Представление", "Выгрузить вложения из SABY");
	
	ПараметрКоманды = Новый Структура();
	ПараметрКоманды.Вставить("Источник", МассивСсылокОтмеченных);
	ПараметрКоманды.Вставить("ОписаниеКоманды",ОписаниеКоманды);
	ПараметрКоманды.Вставить("ЭтоФормаОбъекта", Ложь);
	ПараметрКоманды.Вставить("Форма", ЭтаФорма);

	ПриНажатииВыгрузитьВложенияИзСБИС( Элемент, ПараметрКоманды );
КонецПроцедуры

&НаСервере
Функция ОбъектыДляЗагрузки(СписокОтмеченных)
	МассивОбъектов = Новый Массив();
	Для Каждого Строка Из СписокОтмеченных Цикл
		Если Строка.Отмечен Тогда
			API3_ref = Новый Структура;
			API3_ref.Вставить("UID",           NULL);
			API3_ref.Вставить("ИмяИни",        Неопределено);
			API3_ref.Вставить("Ссылка",        Строка.ДокументИС);
			API3_ref.Вставить("ТипМетаданных", Неопределено);
			API3_ref.Вставить("ТипОбъекта",    Неопределено);
			МассивОбъектов.Добавить(API3_ref);	
		КонецЕсли;
	КонецЦикла;
    Возврат МассивОбъектов;
КонецФункции

&НаСервере
Процедура ПослеВыполненияДействия(Результат)  Экспорт
	ИмяТаблицы = ТекущийРаздел["Шаблон"];
	ЭтаФорма[ИмяТаблицы].Очистить();
	ОбновитьСписок(ДанныеФильтра.Значения);
КонецПроцедуры

&НаКлиенте
Процедура Тест(Элемент)
	СписокОтмеченных = СписокОтмеченныхЗаписейИерархическийСписок();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроек(Элемент) Экспорт    
	
	ЗаписатьНастройкиНаСервере();
	Форма = ПолучитьФормуОбработки("Настройки", КэшФорм.ПутьКФормам, , ЭтаФорма);
	Форма.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВебИнтерфейс(Элемент) Экспорт
	ИмяСервиса = get_prop(context_param, "service");
	Если ЗначениеЗаполнено(ИмяСервиса) Тогда
		ИмяСервиса = ИмяСервиса + "-";
	Иначе
		ИмяСервиса = "";
	КонецЕсли;
	АдресСтраницы = "https://" + ИмяСервиса + "ie-1c.saby.ru/addon2/page/";
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Заголовок", "Веб-интерфейс");
	ПараметрыФормы.Вставить("АдресСтраницы", АдресСтраницы);
	Форма = ПолучитьФормуОбработки("Browser", КэшФорм.ПутьКФормам, ПараметрыФормы, ЭтаФорма);
	Форма.Открыть();
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНастройкиНаСервере()
	ПолучитьМодульОбъекта().НастройкиПодключенияЗаписать(context_param);
КонецПроцедуры

#Область include_core_base_ГлавноеОкно_ОткрывалкаФорм
#КонецОбласти

#Область include_core_base_Helpers_FormGetters
#КонецОбласти

#Область include_core_base_ОсобенностиПлатформы_РаботаСЭлементамиФормы
#КонецОбласти

#Область include_core_base_ГлавноеОкно_ОсобенностиПриложения
#КонецОбласти

&НаКлиенте
Процедура ПолучитьАктуальностьВерсии()
// Заглушка
КонецПроцедуры

#Область include_core_base_ПроверкаВерсии_ПолучитьСтатусВерсииНаФорме
#КонецОбласти

#Область include_core_base_ПроверкаВерсии_НаФормеОбновлениеОбработки
#КонецОбласти

#Область include_base_ОткрытьСтраницуИсторииИзменения
#КонецОбласти

&НаКлиенте
Процедура НалоговыйМониторингНажатие(Кнопка)
	ФормаБраузера = ПолучитьФормуОбработки("Browser", КэшФорм.ПутьКФормам,,ЭтаФорма);
	ФормаБраузера.context_param = context_param;
	ФормаБраузера.Параметры = Новый Структура("АдресСтраницы", context_param.api_url+"/page/import-taxmon");
	ФормаБраузера.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияНаКлиенте(ИмяСобытия, Параметр, Источник)
	ОбработкаОповещения(ИмяСобытия, Параметр);
	Если ИмяСобытия = "Saby_ЗакрытиеФормыАвторизации" Тогда
		Если get_prop(Параметр, "АвторизацияУспешна", Ложь) = Ложь Тогда
			Если ЭтаФорма.Открыта() Тогда
				ЭтаФорма.Закрыть();
			КонецЕсли;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "Saby_ЗакрытиеФормыАвторизации" Или ИмяСобытия = "Saby_НастройкиИзменены" Тогда
		Если ПроверитьНаличиеПараметровПодключенияНаСервере() = Неопределено Тогда
			ПоказатьОповещениеПользователя(
				"Функционал " + ЛокализацияНазваниеПродукта() + " недоступен.",
				Неопределено,
				"Для работы необходимо авторизоваться.",
				КартинкаОшибка(),
				СтатусОповещенияПользователя.Важное);
			Возврат;
		КонецЕсли;
		Если ТекущийРаздел = Неопределено Тогда
			ПриОткрытииПослеАвторизации(Истина);
		Иначе
			ОбновитьЗаголовокФормы();
			ПоказатьШаблон();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр)
	Если ИмяСобытия = "Saby_ЗакрытиеФормыАвторизации" Или ИмяСобытия = "Saby_НастройкиИзменены" Тогда
		МодульОбъекта = ПолучитьМодульОбъекта();
		context_param = МодульОбъекта.НастройкиПодключенияПрочитать();
	ИначеЕсли ИмяСобытия = "Saby_ЗавершениеВыполнитьДействие" Тогда
		ПослеВыполненияДействия(Параметр);
	ИначеЕсли ИмяСобытия = "SabySignOut" Тогда
		// Перечитаем настройки при выходе
		МодульОбъекта = ПолучитьМодульОбъекта();
		context_param = МодульОбъекта.НастройкиПодключенияПрочитать();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АккордеонДокументСформирован(Элемент)
	АккордеонОбновитьИнформациюОВерсии();
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	Если ТипЗнч(context_param) = Тип("Структура") И ТекущийРаздел <> Неопределено Тогда
		context_param.Вставить("РазделПоУмолчанию", ТекущийРаздел.Идентификатор);
		ПолучитьМодульОбъекта().НастройкиПодключенияЗаписать(context_param );
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	ПриЗакрытииНаСервере();
КонецПроцедуры

#Область include_core_base_Helpers_Картинки
#КонецОбласти

&НаКлиенте
Процедура УстановитьЗаголовокПодсказкуКнопкиВыйти()
// Заглушка
КонецПроцедуры

#Область include_core_base_Авторизация_СменаАккаунта
#КонецОбласти

#Область include_core_base_Авторизация_Выход
#КонецОбласти

&НаКлиенте
Процедура ВыйтиНажатие(Элемент)
	ВыйтиНаСервере();
	//ПолучитьАктуальностьВерсии();
	//УстановитьЗаголовокПодсказкуКнопкиВыйти();
	Сообщить("Сессия и пароль сброшены");
	Оповестить("SabySignOut");
	ОткрытьФормуОбработки("Вход",, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьАккаунтНажатие(Элемент)
	ЭлементыФормочки = ПолучитьЭлементыФормы();
	ЭлементФормыДляВыпадающегоСписка = ЭлементыФормочки.Найти("МенюПриложения" + ТекущийРаздел["Шаблон"]);
	СменитьАккаунтВВыпадающемСписке(ЭлементФормыДляВыпадающегоСписка);
КонецПроцедуры

#Область include_core_base_Авторизация_ТребуетсяАутентификация
#КонецОбласти

#Область include_core_base_ВстраиваниеВФормы_КомандаЗагрузитьВСБИС
#КонецОбласти

#Область include_core_base_ВстраиваниеВФормы_КомандаОткрытьСБИС
#КонецОбласти

#Область include_core_base_ВстраиваниеВФормы_КомандаВыгрузитьВложенияИзСБИС
#КонецОбласти

#Область include_core_base_ВстраиваниеВФормы_КомандаОбновитьСтатусы
#КонецОбласти

#Область include_core_base_ВстраиваниеВФормы_КомандаВыполнитьВSABY
#КонецОбласти

#Область include_core_base_ВстраиваниеВФормы_КомандаВыгрузитьВ1С
#КонецОбласти

#Область include_core_base_ВстраиваниеВФормы_КомандаОбновитьВSABY
#КонецОбласти

#Область include_core_base_Авторизация_Form_Вход_НеобходимоВвестиКодПодтверждения
#КонецОбласти

#Область include_core_base_Helpers_ПолучитьПрямуюСсылку
#КонецОбласти

#Область include_core_base_Helpers_НастройкиПодключенияНаСервере
#КонецОбласти

#Область include_core_base_Helpers_ПолучитьИдСБИС
#КонецОбласти

&НаКлиенте
Функция СформироватьМассивВыгружаемыхДокументов() 
	СписокОтмеченныхЗаписей = СписокОтмеченныхЗаписей(Ложь);
	ВыгружаемыеДокументы = Новый Массив();
	Для Каждого Запись Из СписокОтмеченныхЗаписей Цикл
		ДокументСБИС = Запись["ДокументСБИС"]; 
		Если ДокументСБИС <> Неопределено Тогда
			ИмяСБИС = ДокументСБИС["Тип"];
			Если ИмяСБИС = Неопределено Тогда
				ИмяСБИС = ДокументСБИС["ИмяСБИС"];
			КонецЕсли;
			ПримечаниеСБИС = ДокументСБИС["Примечание"];
			ИдентификаторДокумента = ДокументСБИС["Идентификатор"];
			ИмяИзСБИСвАПИ3(ИмяСБИС, ПримечаниеСБИС, ИдентификаторДокумента);
			
			//Убрать после 24.2100 
			Если ДокументСБИС["ИдСБИС"] = Неопределено Тогда 
				ИдСБИС = ПолучитьИдСбисИзИдентификатора(ИдентификаторДокумента);
				Если ИдСБИС <> Неопределено Тогда 
					ДокументСБИС.Вставить("ИдСБИС", Формат(ИдСБИС,"ЧГ="));
				КонецЕсли;	
			КонецЕсли;		                                	
			//---
			
			API3_ref = Новый Структура; 
			API3_ref.Вставить("SbisId",		ДокументСБИС["ИдСБИС"]);
			API3_ref.Вставить("SbisType",	ИмяСБИС);
			API3_ref.Вставить("Type",		ИмяСБИС);
			API3_ref.Вставить("Title",		ДокументСБИС["Название"]);
			ВыгружаемыеДокументы.Добавить(API3_ref);

		КонецЕсли;	
	КонецЦикла;
	Возврат ВыгружаемыеДокументы; 	
КонецФункции

&НаКлиенте
Функция СформироватьМассивВыгружаемыхДокументов1С()
	СписокОтмеченныхЗаписей = СписокОтмеченныхЗаписей(Ложь);
	ВыгружаемыеДокументы = Новый Массив();
	Для Каждого Запись Из СписокОтмеченныхЗаписей Цикл
		ДокументИССсылка = get_prop(Запись.ДокументИС,"Ссылка",Неопределено);
		Если Не ЗначениеЗаполнено(ДокументИССсылка) Тогда
			Продолжить; 
		КонецЕсли;
		ВыгружаемыеДокументы.Добавить(ДокументИССсылка);
	КонецЦикла;
	Возврат ВыгружаемыеДокументы;	
КонецФункции


&НаКлиенте
Функция ПолучитьОповещениеОбновлнияТаблицыФормы( Команда, ПараметрКоманды ) Экспорт 
	
    ДопПараметры = Новый Структура("Действие, ДополнительныеПараметры", Неопределено, ПараметрКоманды);
    ОповешениеОЗакрытии = Новый ОписаниеОповещения("ОбновитьТабличнуюЧастьФормы", ЭтаФорма, ДопПараметры);
    Возврат ОповешениеОЗакрытии; 
	
КонецФункции

&НаКлиенте
Процедура ОбновитьТабличнуюЧастьФормы( Действие, ДополнительныеПараметры ) Экспорт 
	ИмяТаблицы = ТекущийРаздел["Шаблон"];
	ЭтаФорма[ИмяТаблицы].Очистить();
	ТекущаяСтраница = Страница;
	//Постраничный цикл необходим, т.к. некоторые списки строятся только порциями
	Для Страница = 0 По ТекущаяСтраница Цикл
		ОбновитьСписок(ДанныеФильтра.Значения);
		Если Страница <> ТекущаяСтраница Тогда 
			КоличествоСтрок = ЭтаФорма[ИмяТаблицы].Количество();
			ЭтаФорма[ИмяТаблицы].Удалить(КоличествоСтрок-1);
		КонецЕсли;	
	КонецЦикла;
	Страница = ТекущаяСтраница;

КонецПроцедуры

&НаКлиенте
Процедура ПослеОтправитьВСБИС( Действие, ДополнительныеПараметры ) Экспорт 
	ОбновитьТабличнуюЧастьФормы( Действие, ДополнительныеПараметры );		
КонецПроцедуры


&НаКлиенте
Функция МассивСсылокДокументыИС(Список)
	МассивСсылок = Новый Массив;
	Для Каждого Запись ИЗ Список Цикл
		МассивСсылок.Добавить(Запись.ДокументИС);		
	КонецЦикла;
	Возврат МассивСсылок; 
КонецФункции


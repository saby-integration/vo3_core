
Перем МодульОбъекта;

&НаКлиенте
Перем Транспорт, BlocklyExecutor;

#Область include_core_base_ЭДО_Form_Задачи_УстановитьЛокализацию
#КонецОбласти

#Область include_core_base_Задачи_СопоставлениеТиповОбъектов
#КонецОбласти

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	МодульОбъекта = ПолучитьМодульОбъекта();
	ДобавитьИнформациюОВерсии(Элементы.ВерсияПродукта);
	ЭтоВнешняяОбработка = ЭтоВнешняяОбработка();
	УстановитьЛокализацию();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	context_param = ПроверитьНаличиеПараметровПодключенияНаСервере(); 
	Транспорт = ПолучитьФормуТранспорта(context_param);
	BlocklyExecutor = ПолучитьФормуBlockly();

	СтатусВерсии = ПолучитьИнформациюОВерсииПоУмолчанию();
	СтатусВерсии = ПолучитьСтатусВерсииНаФорме(Ложь, СтатусВерсии);
	ОбновитьИнформациюОВерсии(СтатусВерсии);

	Тип = "Мои";
	ОбновитьСписокЗадач();	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "SabySignOut" Тогда
		Закрыть();
	ИначеЕсли ИмяСобытия <> "Saby_ЗавершениеДлительнойОперации" И ИмяСобытия <> "Saby_ЗавершениеВыполнитьДействие" Тогда
		Возврат;
	КонецЕсли;
	ОбновитьСписокЗадач();
	// TODO Переписать на обновление только выделенных строк.
КонецПроцедуры

#Область include_core_base_locale_ЛокализацияНазваниеПродукта
#КонецОбласти

#Область ФильтрыСпискаЗадач

&НаКлиенте
Процедура ТипПриИзменении(Элемент)
	ОбновитьСписокЗадач();
КонецПроцедуры

&НаКлиенте
Процедура ПросроченныеПриИзменении(Элемент)
	ОбновитьСписокЗадач();
КонецПроцедуры

&НаКлиенте
Процедура ПоискОчистка(Элемент, СтандартнаяОбработка)	
	СтрокаПоиска = "";
	ОбновитьСписокЗадач();	
КонецПроцедуры

&НаКлиенте
Процедура СообщениеПользователю(ТекстСообщения) Экспорт 

	СообщениеПользователю = Новый СообщениеПользователю;
	СообщениеПользователю.Текст = ТекстСообщения;
	СообщениеПользователю.Сообщить();	
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)	
	СтрокаПоиска = Текст;
	ОбновитьСписокЗадач();	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОбновитьСписокЗадач(Команда)
	ОбновитьСписокЗадач();
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеСпискаЗадач

&НаКлиенте
Процедура _ПослеАутентификации(Результат, ДопПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Если ЭтаФорма.Открыта() Тогда
			Закрыть();
		КонецЕсли;
		Возврат;
	КонецЕсли;		
	ОбновитьСписокЗадач();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокЗадач(ОчиститьСписок=Истина)
	
	Если ОчиститьСписок Тогда 
		СписокЗадач.Очистить();
	КонецЕсли;
	
	Попытка
		context_param = ПроверитьНаличиеПараметровПодключенияНаСервере(); 
		
		Для ИндексСтраницы = 0 По ТекущаяСтраница Цикл
			СтруктураНавигации = Новый Структура("Страница, РазмерСтраницы", ИндексСтраницы, 30);
			
			Ответ = Транспорт.local_helper_task_list(context_param, Тип, СтрокаПоиска, Просроченные, СтруктураНавигации);	
			СтраницаСпискаЗадачСбис = ДополнитьСписокДокументовСбисСвязьюСДокументом1С(get_prop(Ответ, "Реестр", Новый Массив) );
			Навигация = get_prop(Ответ,"Навигация");
			
			ЕстьЕще 		= get_prop(Навигация,"ЕстьЕще");
			Страница 		= get_prop(Навигация,"Страница");
			РазмерСтраницы 	= get_prop(Навигация,"РазмерСтраницы");
		КонецЦикла;
		
		Если ЕстьЕще Тогда 
			СтрокаСпискаЗадач 			= СписокЗадач.Добавить();
			СтрокаСпискаЗадач.Подразделение = "Загрузить ещё";
		КонецЕсли;		
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		СтруктураОшибки = ExtExceptionAnalyse(ИнфоОбОшибке);
		Если СтруктураОшибки.type = "Unauthorized" Тогда
			ВходяшиеПараметры	= Новый Структура("Метод", "ОбновитьСтраницу");
			ПроверкаВведенныхДанныхАутентификации = Новый ОписаниеОповещения("_ПослеАутентификации", ЭтаФорма, ВходяшиеПараметры);
			ОткрытьФорму("Обработка.SABY.Форма.Вход",,,,,, ПроверкаВведенныхДанныхАутентификации);
		Иначе
			ОписаниеОшибки = СтруктураОшибки.detail;
			ПоказатьОповещениеПользователя(
				"Ошибка",,ОписаниеОшибки,
				БиблиотекаКартинок["Ошибка32"],
				СтатусОповещенияПользователя.Важное, Новый УникальныйИдентификатор);
		КонецЕсли;
		Возврат;
	КонецПопытки;
	//
	//// Навигация
	//Навигация = ТаблицаЗадач.Получить("Навигация");
	//
	//ЕстьЕще 		= Навигация.Получить("ЕстьЕще");
	//Страница 		= Навигация.Получить("Страница");
	//РазмерСтраницы 	= Навигация.Получить("РазмерСтраницы");
	//
	//Если ЕстьЕще Тогда 
	//	СтрокаСпискаЗадач 			= СписокЗадач.Добавить();
	//	СтрокаСпискаЗадач.Подразделение 	= "Загрузить ещё...";
	//КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокЗадачНаСервере()
	МодульОбъекта = ПолучитьМодульОбъекта();
	context_param = МодульОбъекта.НастройкиПодключенияПрочитать(); 

	Для ИндексСтраницы = 0 По ТекущаяСтраница Цикл
		СтруктураНавигации = Новый Структура("Страница, РазмерСтраницы", ИндексСтраницы, 30);

		Ответ = МодульОбъекта.local_helper_task_list(context_param, Тип, СтрокаПоиска, Просроченные, СтруктураНавигации);	
		СтраницаСпискаЗадачСбис = ДополнитьСписокДокументовСбисСвязьюСДокументом1С(get_prop(Ответ, "Реестр", Новый Массив) );
		Навигация = Ответ.Получить("Навигация");
		
		ЕстьЕще 		= Навигация.Получить("ЕстьЕще");
		Страница 		= Навигация.Получить("Страница");
		РазмерСтраницы 	= Навигация.Получить("РазмерСтраницы");
	КонецЦикла;
	
	Если ЕстьЕще Тогда 
		СтрокаСпискаЗадач 			= СписокЗадач.Добавить();
		СтрокаСпискаЗадач.Подразделение = "Загрузить ещё";
	КонецЕсли;	
	
КонецФункции

&НаСервере
Функция ДополнитьСписокДокументовСбисСвязьюСДокументом1С(СписокДокументовСбис)
	
	ТаблицаИдентификаторов = ПолучитьТаблицуИдентификаторовДокументовСбис(СписокДокументовСбис);
	МодульОбъекта = ПолучитьМодульОбъекта();
	ТаблицаСсылок = МодульОбъекта.СтатусыДокументовПолучитьСостоянияОбъектов(ТаблицаИдентификаторов);
	
	ТаблицаСписокЗадач = РеквизитФормыВЗначение("СписокЗадач");
	
	Для Сч=0 По СписокДокументовСбис.Количество() - 1 Цикл 
		ЗадачаСбис = СписокДокументовСбис[Сч]["Документ"];
		СтрокаСпискаЗадач = СписокЗадач.Добавить(); 
		ЗаполнитьСтрокуЗадачиИзЗадачиСбис(СтрокаСпискаЗадач, ЗадачаСбис);
		ЗаполнитьСтрокуЗадачиИзСтатуса1С(СтрокаСпискаЗадач, ТаблицаСсылок[сч]);
	КонецЦикла;
КонецФункции

&НаСервере
Процедура ЗаполнитьСтрокуЗадачиИзСтатуса1С(СтрокаЗадачи, Статус1С)
	СтрокаЗадачи.Документ1С = Статус1С["LINK"];
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьСтрокуЗадачиИзЗадачиСбис(СтрокаЗадачи, ЗадачаСбис)
	СтрокаЗадачи.Дата = МодульОбъекта.ПреобразоватьСтрокуВДату("dd.MM.yyyy", ЗадачаСбис["Дата"]);
	СтрокаЗадачи.Идентификатор = ЗадачаСбис.Получить("Идентификатор");
	СтрокаЗадачи.Название = Тип1СПоТипуБЛ(ЗадачаСбис.Получить("ИмяСБИС"), ЗадачаСбис.Получить("Примечание"));
	СтрокаЗадачи.Номер = ЗадачаСбис.Получить("Номер");
	СтрокаЗадачи.Примечание = ЗадачаСбис.Получить("Примечание");
	СтрокаЗадачи.Контрагент = get_prop(get_prop(ЗадачаСбис, "Контрагент"), "Название");
	СтрокаЗадачи.Организация = get_prop(get_prop(ЗадачаСбис, "НашаОрганизация"), "Название");
	
	Состояние = get_prop(ЗадачаСбис, "Состояние");
	СостояниеСБИС = Справочники.Saby_СостоянияОбъектов.ПолучитьСтатусДокументаСБИС(get_prop(Состояние, "Код", 0));
	СтрокаЗадачи.Статус = СостояниеСБИС.ИндексКартинки;
	
	Этап = get_prop(ЗадачаСбис, "Этап"); 
	Если get_prop(Этап, "Название") <> Неопределено Тогда
		СтрокаЗадачи.Этап = get_prop(Этап, "Название");
	Иначе
		Если get_prop(Состояние, "Код", 0) = 7 Тогда
			СтрокаЗадачи.Этап = "Выполнение завершено успешно";
		ИначеЕсли get_prop(Состояние, "Код", 0) = 0 Тогда
			СтрокаЗадачи.Этап = "Документ редактируется";
		Иначе
			СтрокаЗадачи.Этап = "Выполнение завершено с проблемами";
		КонецЕсли;
	КонецЕсли;	
	СтрокаЗадачи.Отправитель = get_prop(get_prop(Этап, "Отправитель"), "Название");
	Срок = get_prop(Этап, "Срок");
	Если ЗначениеЗаполнено(Срок) Тогда
		СтрокаЗадачи.Срок = МодульОбъекта.ПреобразоватьСтрокуВДату("yyyy-MM-dd HH:mm:ss", Срок);
	КонецЕсли;
	СтрокаЗадачи.СсылкаСБИС = ЗадачаСбис.Получить("СсылкаДляНашаОрганизация");
	СтрокаЗадачи.ИмяСБИС = ЗадачаСбис.Получить("ИмяСБИС");
	СтрокаЗадачи.ИдСБИС = ЗадачаСбис.Получить("ИдСБИС");
	СтрокаЗадачи.Комментарий = get_prop(ЗадачаСбис, "Комментарий");
	
	СотрудникСБИС = "";
	Подразделение = "";
	Сотрудники = ЗадачаСбис["Сотрудники"];
	КоличествоСотрудников = Сотрудники.Количество();
	КоличествоПодразделений = 0;
	Сч = 0;
	Для Каждого _Сотрудник Из Сотрудники Цикл
		Если Сч < 2 Тогда
			СотрудникСБИС = СотрудникСБИС + _Сотрудник["ФИО"] + ?(Сотрудники.Количество()>1, Символы.ПС, "");
		КОнецЕсли;	
		Сч = Сч + 1;
		
		Если get_prop(_Сотрудник,"Подразделение" ,"") <> "" Тогда
			ДобавитьПодразделение = Истина;
			Если КоличествоПодразделений < 2 Тогда 
				Если СтрНайти(Подразделение, _Сотрудник["Подразделение"]) = 0 Тогда 
					Подразделение = Подразделение + _Сотрудник["Подразделение"] + ?(Сотрудники.Количество()>1, Символы.ПС, "");
				Иначе
					ДобавитьПодразделение = Ложь;	
				КонецЕсли;	
			КонецЕсли;	
			Если ДобавитьПодразделение Тогда
				КоличествоПодразделений = КоличествоПодразделений + 1;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если КоличествоПодразделений > 2 Тогда
		Подразделение = Подразделение + "и еще " + Строка(КоличествоПодразделений - 2) +	" подразделени(я/й)";
	КонецЕсли;	
	СтрокаЗадачи.Подразделение = Подразделение;
	Если КоличествоСотрудников > 2 Тогда
		СотрудникСБИС = СотрудникСБИС + "и еще " + Строка(КоличествоСотрудников - 2) +	" сотрудник(а/ов)";		
	КонецЕсли;		
	СтрокаЗадачи.Сотрудник = СотрудникСБИС;
	
	Вложения = get_prop(ЗадачаСбис, "Вложение", Новый Массив());
	СтрокаЗадачи.Вложения = ""; 
	Для Каждого Вложение Из Вложения Цикл
		Если Вложение["Служебный"] = "Нет" Тогда
			СтрокаЗадачи.Вложения = ?(ЗначениеЗаполнено(СтрокаЗадачи.Вложения), СтрокаЗадачи.Вложения + ", " + Вложение["Название"], Вложение["Название"]);		
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТаблицуИдентификаторовДокументовСбис(СписокДокументовСбис)
	tUID = Новый ТаблицаЗначений;
	tUID.Колонки.Добавить("UID", Новый ОписаниеТипов("Строка") );
	Для Каждого ДокументСбис Из СписокДокументовСбис Цикл
		ДокументСбис = ДокументСбис["Документ"];
		НовСтрока = tUID.Добавить();
		UID = get_prop(ДокументСбис,"Идентификатор");    //TODO удаить ИдИС когда UID до онлайна доедет
		НовСтрока.UID = Формат(UID, "ЧГ=0");
	КонецЦикла;
	Возврат tUID; 
КонецФункции

Функция СтатусДокумента(СтатусДокумента) Экспорт 
	
	СоответствиеСтатусов = Новый Соответствие;
	СоответствиеСтатусов.Вставить(0, "Документ редактируется");
	СоответствиеСтатусов.Вставить(1, "Есть документ");
	СоответствиеСтатусов.Вставить(2, "Отправлено приглашение");
	СоответствиеСтатусов.Вставить(3, "Отправлен");
	СоответствиеСтатусов.Вставить(4, "Доставлен");
	СоответствиеСтатусов.Вставить(6, "Ошибка");
	СоответствиеСтатусов.Вставить(7, "Выполнение завершено успешно");
	СоответствиеСтатусов.Вставить(9, "Выполнение завершено с проблемами");
	СоответствиеСтатусов.Вставить(10, "В обработке");
	СоответствиеСтатусов.Вставить(19, "Отозван мной");
	СоответствиеСтатусов.Вставить(20, "Удален контрагентом");
	СоответствиеСтатусов.Вставить(22, "Аннулирован по соглашению");
	СоответствиеСтатусов.Вставить(23, "Ожидает подписания");
	СоответствиеСтатусов.Вставить(27, "Ожидает аннулирования");
	
	Возврат СоответствиеСтатусов.Получить(СтатусДокумента);
	
КонецФункции

#КонецОбласти

#Область КомандыФормы


&НаКлиенте
Процедура СписокЗадачВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СписокЗадачОбработкаВыбораСтроки();
КонецПроцедуры

&НаКлиенте
Процедура СписокЗадачКомандаОткрыть(Команда)
	ТекущиеДанные = Элементы.СписокЗадач.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.Документ1С) Тогда 
		ПоказатьЗначение(, ТекущиеДанные.Документ1С);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура СписокЗадачОбработкаВыбораСтроки()
	
	ТекущиеДанные = Элементы.СписокЗадач.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущийЭлементСпискаЗадач = Элементы.СписокЗадач.ТекущийЭлемент;
	
	Если ТекущиеДанные.Подразделение = "Загрузить ещё" Тогда
		ТекущаяСтраница = ТекущаяСтраница + 1;
		СписокЗадач.Удалить(ТекущиеДанные);
		ОбновитьСписокЗадач(Ложь);
		Возврат;
	КонецЕсли;
	
	Если ТекущийЭлементСпискаЗадач.Имя = "СписокЗадачДокумент1С" и Не ТекущиеДанные.Документ1С = Неопределено Тогда
		ПоказатьЗначение(, ТекущиеДанные.Документ1С);
	Иначе
		ПараметрыФормы = Новый Структура();
		
		ПараметрыФормы.Вставить("Идентификатор", ТекущиеДанные["Идентификатор"]);
		ПараметрыФормы.Вставить("ИдСБИС", ТекущиеДанные["ИдСБИС"]);
		ПараметрыФормы.Вставить("Сотрудник", ТекущиеДанные["Сотрудник"]);
		ПараметрыФормы.Вставить("Подразделение", ТекущиеДанные["Подразделение"]);
		ПараметрыФормы.Вставить("Название", ТекущиеДанные["Название"]);
		ПараметрыФормы.Вставить("Примечание", ТекущиеДанные["Примечание"]);

		ОткрытьФорму("Обработка.SABY.Форма.ПросмотрДокументаСБИС", ПараметрыФормы,,ТекущиеДанные["Идентификатор"]);
	КонецЕсли;
	
КонецПроцедуры

#Область include_core_base_Helpers_ПолучитьПрямуюСсылку
#КонецОбласти

&НаКлиенте
Процедура СписокЗадачКомандаОткрытьВСБИС(Команда)
	ТД = Элементы.СписокЗадач.ТекущиеДанные;
	Если ТД <> Неопределено И ЗначениеЗаполнено(ТД.СсылкаСБИС) Тогда
		ЗадачаСсылка = ПолучитьПрямуюССылку(ТД.СсылкаСБИС);
		#Если ТолстыйКлиентОбычноеПриложение Тогда 
		ЗапуститьПриложение(ЗадачаСсылка); 
		#Иначе	
		ПерейтиПоНавигационнойСсылке(ЗадачаСсылка);	
		#КонецЕсли
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Функция ПолучитьСБИСПараметры()
	МодульОбъекта = ПолучитьМодульОбъекта();
	saby_param = МодульОбъекта.НастройкиПодключенияПрочитать();
	Возврат saby_param;
КонецФункции

&НаСервере
Функция ОбщиеНастройкиПрочитать()
	МодульОбъекта = ПолучитьМодульОбъекта();
	Возврат МодульОбъекта.ОбщиеНастройкиПрочитать();
КонецФункции

&НаКлиенте
Процедура СформироватьМассивыДокументов(СписокДокументовСБИС, СписокДокументов1С)
	Для Каждого Стр Из Элементы.СписокЗадач.ВыделенныеСтроки Цикл 
		СтрокаСпискаЗадач = СписокЗадач.НайтиПоИдентификатору(Стр);
		Если СтрокаСпискаЗадач.Подразделение = "Загрузить ещё" Тогда
			Продолжить;
		КонецЕсли;
		ДокументСБИС = Новый Структура("Идентификатор, ПервичныйКлюч, Документ1С", 
		СтрокаСпискаЗадач["Идентификатор"], СтрокаСпискаЗадач["ИдСБИС"], СтрокаСпискаЗадач["Документ1С"]);	
		СписокДокументовСБИС.Добавить(ДокументСБИС);
		Если СтрокаСпискаЗадач["Документ1С"] <> Неопределено Тогда
			СписокДокументов1С.Добавить(СтрокаСпискаЗадач["Документ1С"]);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры	

#Область include_core_base_ВстраиваниеВФормы_КомандаВыполнитьВSABY
#КонецОбласти

#Область include_core_base_ВстраиваниеВФормы_ОберткаСерверныхКоманд
#КонецОбласти

&НаКлиенте
Функция СформироватьМассивВыгружаемыхДокументов()  
	ВыгружаемыеДокументы = Новый Массив();
	Для Каждого ВыгружаемыйДокумент Из Элементы.СписокЗадач.ВыделенныеСтроки Цикл
		СтрокаСпискаЗадач = СписокЗадач.НайтиПоИдентификатору(ВыгружаемыйДокумент);
		Если СтрокаСпискаЗадач.Подразделение = "Загрузить ещё" Тогда
			Продолжить;
		КонецЕсли;
		ИмяСБИС = СтрокаСпискаЗадач.ИмяСБИС;
		ПримечаниеСБИС = СтрокаСпискаЗадач.Примечание;
		ИдентификаторДокумента = СтрокаСпискаЗадач.Идентификатор;
		ИмяИзСБИСвАПИ3(ИмяСБИС, ПримечаниеСБИС, ИдентификаторДокумента);
		
		API3_ref = Новый Структура; 
		API3_ref.Вставить("SbisId",		СтрокаСпискаЗадач.ИдСБИС);
		API3_ref.Вставить("SbisType",	ИмяСБИС);
		API3_ref.Вставить("Type",		ИмяСБИС);
		API3_ref.Вставить("Title",		СтрокаСпискаЗадач.Название);
		ВыгружаемыеДокументы.Добавить(API3_ref);
	КонецЦикла;
	Возврат ВыгружаемыеДокументы; 	
КонецФункции	

Функция СформироватьМассивВыгружаемыхДокументов1С()
	ВыгружаемыеДокументы = Новый Массив();
	Для Каждого ВыгружаемыйДокумент Из Элементы.СписокЗадач.ВыделенныеСтроки Цикл
		СтрокаСпискаЗадач = СписокЗадач.НайтиПоИдентификатору(ВыгружаемыйДокумент);
		Если Не ЗначениеЗаполнено(СтрокаСпискаЗадач.Документ1С) Тогда
			Продолжить; 
		КонецЕсли;
		ВыгружаемыеДокументы.Добавить(СтрокаСпискаЗадач.Документ1С);
	КонецЦикла;
	Возврат ВыгружаемыеДокументы;	
КонецФункции

#Область include_core_base_ВстраиваниеВФормы_ВыгрузитьВложенияИзСБИСОбщее
#КонецОбласти

&НаКлиенте
Функция КнопкаВыгрузитьВ1С()
	Возврат Элементы.ВыгрузитьВ1СНажатие;
КонецФункции

&НаКлиенте
Процедура ПоказатьМенюВыгрузитьВ1С(СписокКнопок)
	ОписаниеОповещения = Новый ОписаниеОповещения("МенюВыгрузитьВ1СОбработкаОповещения", ЭтаФорма);
	ПоказатьВыборИзМеню(ОписаниеОповещения, СписокКнопок, КнопкаВыгрузитьВ1С());
КонецПроцедуры

#Область include_core_base_ВстраиваниеВФормы_КомандаВыгрузитьВ1С
#КонецОбласти

&НаКлиенте
Функция ТекущийДокументИС() 
	ТД = Элементы.СписокЗадач.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	Возврат ТД.Документ1С;
КонецФункции

#Область include_core_base_ВстраиваниеВФормы_КомандаОбновитьВSABY
#КонецОбласти

#КонецОбласти

#Область include_core_base_Helpers_FormGetters
#КонецОбласти

#Область include_core_base_Helpers_РаботаСоСвойствамиСтруктуры
#КонецОбласти

#Область include_core_base_ExtException
#КонецОбласти

#Область include_base_НазваниеПродукта
#КонецОбласти

#Область include_core_base_ПроверкаВерсии_ПолучитьИмяФайлаИНомерТекущейВерсии
#КонецОбласти

#Область include_core_base_ПроверкаВерсии_НаФорме
#КонецОбласти

#Область include_core_base_ОсобенностиПлатформы_МодульФормы
#КонецОбласти

#Область include_core_base_ФоновыеЗадания_МодульФоновогоЗаданияСервер
#КонецОбласти

#Область include_core_base_ФоновыеЗадания_МодульФоновогоЗаданияКлиент
#КонецОбласти

#Область include_core_base_АвтоматическиеОперации_ВызовФорм
#КонецОбласти

#Область include_core_base_Helpers_Картинки
#КонецОбласти


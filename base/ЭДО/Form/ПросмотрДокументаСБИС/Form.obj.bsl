&НаКлиенте
Перем ДокументСБИС;

#Область include_core_base_ПросмотрДокумента_УстановитьЛокализацию
#КонецОбласти

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Идентификатор 	= Параметры.Идентификатор;
	Документ1С 		= Параметры.Документ1С;
	ИдСБИС			= Параметры.ИдСБИС;
	СсылкаСБИС	 	= Параметры.СсылкаСБИС;
	Сотрудник	 	= СтрЗаменить(Параметры.Сотрудник,Символы.ПС,"; ");
	Подразделение	= СтрЗаменить(Параметры.Подразделение,Символы.ПС,"; ");
	Регламент		= "";
	
	ОбработкаМодуль = ПолучитьМодульОбъекта();
	context_params	= ОбработкаМодуль.ПроверитьНаличиеПараметровПодключения();
	Попытка
		ДанныеДокумента = ОбработкаМодуль.local_helper_read_document(context_params,  Новый Структура("ПервичныйКлюч, ДопПоля", ИдСБИС, "Расширение") );
		ДанныеДокументаРегламент = get_prop(ДанныеДокумента,"Регламент");
		Регламент = get_prop(ДанныеДокументаРегламент,"Название");
		Если не ЗначениеЗаполнено(Подразделение) Тогда
			ДанныеДокументаПодразделение = get_prop(ДанныеДокумента,"ПодразделениеСотрудника", get_prop(ДанныеДокумента,"Подразделение"));
			Подразделение = get_prop(ДанныеДокументаПодразделение,"Название");
		КонецЕсли;
	Исключение
	КонецПопытки;
	УстановитьЛокализацию();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ДокументСБИС = ПрочитатьДокумент();
	ЗаполнитьОсновныеРеквизиты();
	ЗаполнитьДанныеВложенныхФайлов();
	УстановитьДоступностьРеквизитовФормы();
КонецПроцедуры

&НаСервере
Функция ПрочитатьДокумент()
	МодульОбъекта = ПолучитьМодульОбъекта();
	context_param = МодульОбъекта.НастройкиПодключенияПрочитать(); 
	Документ = Новый Структура("Идентификатор, ПервичныйКлюч, ДопПоля", Идентификатор, ИдСБИС, "Расширение");
	Возврат МодульОбъекта.local_helper_read_document(context_param, Документ);	
КонецФункции





&НаКлиенте
Процедура СообщениеПользователю(ТекстСообщения) Экспорт 

	СообщениеПользователю = Новый СообщениеПользователю;
	СообщениеПользователю.Текст = ТекстСообщения;
	СообщениеПользователю.Сообщить();	
	
КонецПроцедуры

//&НаСервере
//Функция ДоступныеДействия(ДокументСБИС)

//	МассивЭтапов = ДокументСБИС.Получить("Этап");
//	
//	Если МассивЭтапов = Неопределено Тогда 
//		Возврат Неопределено;	
//	КонецЕсли;

//	МассивВсехДействий = Новый Массив;
//	
//	Для Каждого ЭлементМассива Из МассивЭтапов Цикл 
//		
//		МассивДействий = ЭлементМассива.Получить("Действие");	
//		Для Каждого ЭлементДействия Из МассивДействий Цикл 	
//			МассивВсехДействий.Добавить(ЭлементДействия);	
//		КонецЦикла;	
//		
//		Возврат МассивВсехДействий;
//		
//	КонецЦикла;
//	
//КонецФункции 

&НаКлиенте
Процедура ЗаполнитьОсновныеРеквизиты()
	_Дата           = ДокументСБИС.Получить("Дата");
	Дата 			= Дата( _Дата + " 00:00:00"); 
	Организация 	= ПолучитьДанныеСтроныДокумента("НашаОрганизация");
	Примечание 		= ДокументСБИС.Получить("Примечание");
	Номер 			= ДокументСБИС.Получить("Номер");
	Тип 			= ДокументСБИС.Получить("Тип");	
	ЭтаФорма.Заголовок = ДокументСБИС.Получить("Название");
	Документ1С = ПолучитьДокумент1С(ДокументСБИС["Идентификатор"]);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьРеквизитовФормы()
	Элементы.ОбновитьВСБИС.Доступность = ЗначениеЗаполнено(Документ1С);
КонецПроцедуры


Функция ПолучитьДокумент1С(ИдентификаторВИ)
	ТаблицаИдентификаторов = Новый ТаблицаЗначений;
	ТаблицаИдентификаторов.Колонки.Добавить("UID", Новый ОписаниеТипов("Строка") );
	НовСтрока = ТаблицаИдентификаторов.Добавить();
	НовСтрока.UID = Формат(ИдентификаторВИ, "ЧГ=0");
	МодульОбъекта = ПолучитьМодульОбъекта();
	Идентификаторы = МодульОбъекта.СтатусыДокументовПолучитьСостоянияОбъектов(ТаблицаИдентификаторов);
	Если Идентификаторы.Количество() > 0 Тогда
		Возврат Идентификаторы[0]["LINK"];
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
КонецФункции	

&НаКлиенте
Процедура ЗаполнитьДанныеВложенныхФайлов()
	
	ПрикрепленныеФайлы.Очистить();
	
	МассивВложений = ДокументСБИС.Получить("Вложение");
	
	Если ТипЗнч(МассивВложений) = Тип("Массив") Тогда 	
		Если МассивВложений.Количество() Тогда 
			
			Для Каждого СтрВложения Из МассивВложений Цикл 
				
				СтрокаФайл = ПрикрепленныеФайлы.Добавить();
				СтрокаФайл.НаименованиеФайла 	= СтрВложения.Получить("Название");
				СтрокаФайл.СсылкаНаHTML 		= СтрВложения.Получить("СсылкаНаHTML"); 
				СтрокаФайл.СсылкаВКабинет 		= СтрВложения.Получить("СсылкаВКабинет");
				СтрокаФайл.СсылкаНаPDF 			= СтрВложения.Получить("СсылкаНаPDF");
					
			КонецЦикла;
			
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

//&НаКлиенте
//Функция ПолучитьТекущийЭтап()
//	
//	МассивЗначений = get_prop(ДокументСБИС, "Этап");
//	
//	Если МассивЗначений = Неопределено Тогда 
//		Возврат Неопределено;
//	КонецЕсли;
//	
//	Для Каждого ЭлементМассива Из МассивЗначений Цикл 	
//		Возврат get_prop(ЭлементМассива, "Название");	
//	КонецЦикла;

//	Возврат Неопределено;
//	
//КонецФункции

&НаКлиенте
Функция ПолучитьДанныеСтроныДокумента(Название)
    Сторона = get_prop(ДокументСБИС, Название);
	Св = get_prop(Сторона, "СвЮЛ");
	Если Св <> Неопределено Тогда
		Возврат get_prop(Св, "Название");
	КонецЕсли;
	Св = get_prop(Сторона, "СвФл");
	Возврат get_prop(Св, "Название");
КонецФункции

&НаКлиенте
Процедура КомандаДействиеВСБИС(Команда)
	
	СписокДокументовСБИС = Новый Массив();
	СписокДокументов1С = Новый Массив();

	_ДокументСБИС = Новый Структура("Идентификатор, ПервичныйКлюч, Документ1С, ДокументСБИС", 
	Идентификатор, ИдСБИС, Документ1С, ДокументСБИС);	
	СписокДокументовСБИС.Добавить(_ДокументСБИС);

	Если Документ1С <> Неопределено Тогда
		СписокДокументов1С.Добавить(Документ1С);
	КонецЕсли;

	ПараметрыВФорму = Новый Структура("СписокДокументовСБИС, СписокДокументов1С, МожноПереотправитьВСБИС, МожноОбновитьВСБИС", 
	СписокДокументовСБИС, СписокДокументов1С, СписокДокументов1С.Количество() > 0, Истина);
	ОткрытьФорму("Обработка.SABY.Форма.ВыполнитьДействие", ПараметрыВФорму, ЭтаФорма, Новый УникальныйИдентификатор(), , , );
		
КонецПроцедуры

//&НаКлиенте
//Процедура ОбработкаОповещенияВыбораКнопки(ЗначениеВыбора, ДопПараметры) Экспорт
//	
//	Если ЗначениеВыбора = Неопределено Тогда 
//		Возврат;
//	КонецЕсли;
//	
//	СтруктураТекущегоДействия(ЗначениеВыбора);
//	
//КонецПроцедуры 

//&НаКлиенте
//Процедура СтруктураТекущегоДействия(ЗначениеВыбора)
//	
//	ДанныеДействия = ДействияЗадачи.Получить(ЗначениеВыбора.Значение);	
//	
//	СтруктураДействия = Новый Структура;
//	СтруктураДействия.Вставить("ТребуетРасшифровки", 	ДанныеДействия.ТребуетРасшифровки);
//	СтруктураДействия.Вставить("ТребуетПодписания", 	ДанныеДействия.ТребуетПодписания);
//	СтруктураДействия.Вставить("ТребуетКомментария", 	ДанныеДействия.ТребуетКомментария);
//	СтруктураДействия.Вставить("ТребуетИсполнителя", 	ДанныеДействия.ТребуетИсполнителя);
//	СтруктураДействия.Вставить("ТипПодписи", 	ДанныеДействия.ТипПодписи);
//	СтруктураДействия.Вставить("Название", 		ДанныеДействия.Название);
//	СтруктураДействия.Вставить("Комментарий", 	ДанныеДействия.Комментарий);
//	СтруктураДействия.Вставить("Идентификатор", ДанныеДействия.Идентификатор);
//	СтруктураДействия.Вставить("ИД", Идентификатор);
//	СтруктураДействия.Вставить("Этап", Этап);
//	
//	ОткрытьФорму("ОбщаяФорма.Saby_ВыполнениеДействия", СтруктураДействия, ЭтаФорма);
//		
//КонецПроцедуры
//	 
//&НаКлиенте
//Процедура ЗаполнитьДоступныеДействия()

//	МассивЭтапов = ДокументСБИС.Получить("Этап");
//	
//	Если МассивЭтапов = Неопределено Тогда 
//		Возврат;	
//	КонецЕсли;
//	
//	Для Каждого ЭлементМассива Из МассивЭтапов Цикл 
//		
//		МассивДействий = ЭлементМассива.Получить("Действие");	
//		Для Каждого ЭлементДействия Из МассивДействий Цикл 	
//			
//			СтрокаТаблицыДействий = ДействияЗадачи.Добавить(); 
//			
//			СтрокаТаблицыДействий.Идентификатор = ЭлементДействия.Получить("Идентификатор");
//			СтрокаТаблицыДействий.Комментарий 	= ЭлементДействия.Получить("Комментарий"); 
//			СтрокаТаблицыДействий.Название 		= ЭлементДействия.Получить("Название");
//			СтрокаТаблицыДействий.ТипПодписи = ЭлементДействия.Получить("ТипПодписи");
//			СтрокаТаблицыДействий.ТребуетИсполнителя 	= ЭлементДействия.Получить("ТребуетИсполнителя");
//			СтрокаТаблицыДействий.ТребуетКомментария 	= ЭлементДействия.Получить("ТребуетКомментария");
//			СтрокаТаблицыДействий.ТребуетПодписания 	= ЭлементДействия.Получить("ТребуетПодписания");
//			СтрокаТаблицыДействий.ТребуетРасшифровки 	= ЭлементДействия.Получить("ТребуетРасшифровки");
//			
//		КонецЦикла;	
//		Возврат;	
//	КонецЦикла;
//	
//КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВ1С(Команда)

	СписокКнопок = Новый СписокЗначений();	
    СписокКнопок.Добавить(0, "Выгрузить в 1С");
    СписокКнопок.Добавить(1, "Выгрузить в 1С вложения");
		
	ОписаниеОповещения = Новый ОписаниеОповещения("МенюВыгрузитьВ1СОбработкаОповещения", ЭтаФорма);
	ПоказатьВыборИзМеню(ОписаниеОповещения, СписокКнопок, Элементы.ВыгрузитьВ1С);
	
КонецПроцедуры

&НаКлиенте
Процедура МенюВыгрузитьВ1СОбработкаОповещения(ЗначениеВыбора, ДопПараметры) Экспорт
	
	Если ЗначениеВыбора = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеВыбора.Значение = 0 Тогда 	
		ВыгрузитьОбъектВ1С();		
	ИначеЕсли ЗначениеВыбора.Значение = 1 Тогда 	
		ВыгрузитьВложенияНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОбъектВ1С()
	ОбрабатываемыеОбъекты = Новый Массив();
	context_params	= Saby_Core.ПроверитьНаличиеПараметровПодключения();	
	мИсполнители = Новый Массив;
	
	ИмяСБИС = get_prop(ДокументСБИС,"Тип");
	ПримечаниеСБИС = get_prop(ДокументСБИС, "Примечание");
	ИдентификаторДокумента = get_prop(ДокументСБИС, "Идентификатор");
	ИмяИзСБИСвАПИ3(ИмяСБИС, ПримечаниеСБИС, ИдентификаторДокумента);
	
	
	API3_ref = Новый Структура; 
	API3_ref.Вставить("SbisId",		ИдСБИС);
	API3_ref.Вставить("SbisType",	ИмяСБИС);
	API3_ref.Вставить("Type",		ИмяСБИС);
	API3_ref.Вставить("Title",		ДокументСБИС.Получить("Название"));
	
	ОбрабатываемыеОбъекты.Добавить(API3_ref);
	
	Saby_ФоновыеЗаданияКлиент.ЗапуститьINIФоновымЗаданием("Документы_update", ОбрабатываемыеОбъекты, context_params, ЭтаФорма.ВладелецФормы, "Выгрузка в 1С");
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВложенияНаКлиенте()
	Если Не ЗначениеЗаполнено(Документ1С) Тогда 
		ВыгрузитьОбъектВ1С();		
 	КонецЕсли;
	Если Не ЗначениеЗаполнено(Документ1С) Тогда Возврат; КонецЕсли;//Значит выгрузка не увенчалась успехом
	ВыгружаемыеДокументы	= Новый Массив;
	ВыгружаемыеДокументы.Добавить(Документ1С);
	ПроверкаОбмена = Saby_ВстраиваниеВСтандартныеФормы.ПроисходилЛиОбменДокументов(ВыгружаемыеДокументы);
	Saby_КомандыОбменаДляФормыКлиент.ВыгрузитьВложенияИзСБИС( ПроверкаОбмена.БылОбмен, Новый Структура("Форма", Неопределено) );
КонецПроцедуры

Процедура ИмяИзСБИСвАПИ3(ИмяСБИС, ПримечаниеСБИС, ИдентификаторДокумента)
	Если ИмяСБИС = "СлужЗап" Тогда
		ИмяСБИС = "Задача";	
	ИначеЕсли ИмяСБИС = "АвансОтчёт" Тогда
		ИмяСБИС = "АвансовыйОтчёт";
	ИначеЕсли ИмяСБИС = "АвансОтчет" Тогда
		ИмяСБИС = "АвансовыйОтчет";
	ИначеЕсли ИмяСБИС = "ВнутрПрм" Тогда
		ИмяСБИС = "ВнутреннееПеремещение";
	ИначеЕсли ИмяСБИС = "PayoutDoc" Тогда
		ИмяСБИС = "ВыдачаЗарплаты";
	ИначеЕсли ИмяСБИС = "ДоговорДок" Тогда
		ИмяСБИС = "Договор";
	ИначеЕсли ИмяСБИС = "PriceChange" Тогда
		ИмяСБИС = "ИзменениеЦен";
	ИначеЕсли ИмяСБИС = "Allowance" Тогда
		Если Найти(ПримечаниеСБИС, "уход") > 0 Тогда
			МодульОбъекта = ПолучитьМодульОбъекта();
			context_param = МодульОбъекта.НастройкиПодключенияПрочитать();
			ДокументСБИС = МодульОбъекта.local_helper_read_document(context_param, Новый Структура("Идентификатор", ИдентификаторДокумента));
			Если Найти(ДокументСБИС["Регламент"]["Название"], "уход") > 0 И Найти(ДокументСБИС["Регламент"]["Название"], "Больничный") = 0 Тогда 
				ИмяСБИС = "ОтпускПоУходу";
			Иначе
				ИмяСБИС = "Больничный";        
			КонецЕсли;
		Иначе
			ИмяСБИС = "Больничный";   
		КонецЕсли;
	ИначеЕсли ИмяСБИС = "Номенклатура" Тогда
		ИмяСБИС = "ПоказательОстатокНаСкладе";
	ИначеЕсли ИмяСБИС = "ДокОтгрВх" Тогда
		ИмяСБИС = "Поступление";
	ИначеЕсли ИмяСБИС = "Прайсы" Тогда
		ИмяСБИС = "Прайс";
	ИначеЕсли ИмяСБИС = "ДокОтгрИсх" Тогда
		ИмяСБИС = "Реализация";
	ИначеЕсли ИмяСБИС = "СчетИсх" Тогда
		ИмяСБИС = "СчетНаОплату";
	ИначеЕсли ИмяСБИС = "УдержанияПоЗарплате" Тогда
		ИмяСБИС = "УдержаниеПоЗарплате";
	ИначеЕсли ИмяСБИС = "ШтатнаяДолжность" Тогда
		ИмяСБИС = "ШтатноеРасписание";
	ИначеЕсли ИмяСБИС = "Согласование" Тогда
		ИмяСБИС = "ГрафикОтпусков";
	ИначеЕсли ИмяСБИС = "CadresOther" Тогда
		ИмяСБИС = "ПрочийКадровыйДокумент";
	ИначеЕсли ИмяСБИС = "НачисленияПоЗарплате" Тогда
		ИмяСБИС = "НачислениеПоЗарплате";
	ИначеЕсли ИмяСБИС = "PlanVacationScheduleChange" Тогда
		ИмяСБИС = "ПереносОтпусков";
	ИначеЕсли ИмяСБИС = "ТабельДокумент" Тогда
		ИмяСБИС = "Табель";
	ИначеЕсли ИмяСБИС = "ИзмененияОклада" Тогда
		ИмяСБИС = "ИзменениеУсловийОплаты";
	ИначеЕсли ИмяСБИС = "Indexation" Тогда
		ИмяСБИС = "ИндексацияЗаработка";
	ИначеЕсли ИмяСБИС = "GphAct" Тогда
		ИмяСБИС = "АктПриемки";	
	ИначеЕсли ИмяСБИС = "CombinationPositions" Тогда
		ИмяСБИС = "СовмещениеДолжностей";
	ИначеЕсли ИмяСБИС = "BusinessTrip" Тогда
		ИмяСБИС = "СписочнаяКомандировка";
	ИначеЕсли ИмяСБИС = "GphContract" Тогда
		ИмяСБИС = "ПриемНаРаботуГПХ"
	ИначеЕсли ИмяСБИС = "CombinationCancel" Тогда
		ИмяСБИС = "ОтменаСовмещенияДолжностей";
	ИначеЕсли ИмяСБИС = "BTCorrection" Тогда
		ИмяСБИС = "КорректировкаСписочнойКомандировки";
	ИначеЕсли ИмяСБИС = "TimesheetCorrection" Тогда 
		ИмяСБИС = "КорректировкаТабеля";
	ИначеЕсли ИмяСБИС = "РеалВх" Тогда 
		ИмяСБИС = "Поступление";
	ИначеЕсли ИмяСБИС = "StaffStatements" Тогда 
		ИмяСБИС = "Заявление";
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВСБИС(Команда)
	//ПерейтиПоНавигационнойСсылке(СсылкаСБИС);
		
	ПараметрыФормы = Новый Структура( "Заголовок, АдресСтраницы", ДокументСБИС["Название"], ДокументСБИС["СсылкаДляНашаОрганизация"]);
	ОткрытьФорму("Обработка.SABY.Форма.Browser", ПараметрыФормы, ЭтаФорма, "Структура" );
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "SabySignOut" Тогда
		Закрыть();
	ИначеЕсли ИмяСобытия <> "Saby_ЗавершениеДлительнойОперации" И ИмяСобытия <> "Saby_ЗавершениеВыполнитьДействие" Тогда
		Возврат; 
	КонецЕсли;
	Документ1С = ПолучитьДокумент1С(ДокументСБИС["Идентификатор"]);
	УстановитьДоступностьРеквизитовФормы();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьВложения(Команда)
	Если Не ЗначениеЗаполнено(Документ1С) Тогда Возврат; КонецЕсли;
	
	ДокументПереотправить = Новый Массив();
	ДокументПереотправить.Добавить(СтруктураВыгрузкиДокумента(Документ1С));
	ПараметрыВФорму = Новый Структура("Источник", ДокументПереотправить);
	ОткрытьФорму("Обработка.SABY.Форма.ЗагрузкаДокументов",ПараметрыВФорму,ЭтаФорма.ВладелецФормы, Новый УникальныйИдентификатор(),,,,);
КонецПроцедуры

&НаСервере
Функция СтруктураВыгрузкиДокумента(Документ1С)
	Возврат Новый Структура("Ссылка,UID,ТипМетаданных,ТипОбъекта,ИмяИни", 
							Документ1С.Ссылка,
							Неопределено,
							Документ1С.Ссылка.Метаданные().Имя,
							Неопределено,
							Неопределено); 	
КонецФункции	

#Область include_core_base_Helpers_FormGetters
#КонецОбласти


#Область include_core_base_Helpers_РаботаСоСвойствамиСтруктуры
#КонецОбласти

#Область include_core_base_ExtException
#КонецОбласти

#Область include_base_НазваниеПродукта
#КонецОбласти
                             
#Область include_core_base_ЭДО_Form_ПросмотрДокументаСБИС_ОсобенностиПриложения
#КонецОбласти


#Область include_core_base_ПроверкаВерсии_ПолучитьИмяФайлаИНомерТекущейВерсии
#КонецОбласти

#Область include_core_base_ПроверкаВерсии_НаФорме
#КонецОбласти

#Область include_core_base_ОсобенностиПлатформы_МодульФормы
#КонецОбласти

#Область include_core_base_ЭДО_Form_ПросмотрДокументаСБИС_ПоказатьВложение
#КонецОбласти


#Область include_core_base_БазовыеКомпоненты_Формы_Browser_BrowserEventsHandler
#КонецОбласти

#Область include_core_base_БазовыеКомпоненты_Формы_Browser_ProductEventsHandler
#КонецОбласти


#Область include_core_base_Helpers
#КонецОбласти


#Область include_core_base_Helpers_XDTO
#КонецОбласти

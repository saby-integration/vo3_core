//&НаКлиенте
//Перем КомандыПечатиФормы;
//&НаКлиенте
//Перем Документы;

&НаКлиенте
Перем МенеджерыКриптографии;
&НаКлиенте
Перем ФормаОткрыта;

#Область include_core_base_Авторизация_Form_Вход_НеобходимоВвестиКодПодтверждения
#КонецОбласти

#Область include_core_base_ЭДО_Form_ЗагрузкаДокументов_ОсобенностиПродуктаПриОткрытии
#КонецОбласти

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "SabySignOut" Тогда
		Закрыть();
	ИначеЕсли ИмяСобытия = "AddonActionResponse" Тогда
		ОбработатьРезультатСобытия(Параметр);	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СкрытьПФЕслиНеДокумент()
	ТипМетаданных = ПолучитьТипМетаданных(Объекты[0].Объект);
	Если Не ТипМетаданных = "Документы" Тогда 
		ВидимостьЭлементаФормы("ВложенияТипаДокумента", Ложь);
		ВидимостьЭлементаФормы("грДобавитьФайл", Ложь);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьРегламентПоНаименованию(ТекРегламент, ВидОбъекта)
	НайденныйРегламент = Неопределено;
	Отбор = Новый Структура("ВидОбъекта", ВидОбъекта);
    СтрокиРегламента = РегламентПоТипамДокументов.НайтиСтроки(Отбор);
	Для каждого Регламента из СтрокиРегламента Цикл
		Если Регламента.Регламент.Значение = ТекРегламент Тогда
			НайденныйРегламент = Регламента.Регламент;
			Прервать;
		КонецЕсли;	
	КонецЦикла;
	Возврат НайденныйРегламент;
КонецФункции

&НаКлиенте
Процедура УстановитьВидимостьПроизвольногоНазванияРегламента(ТекРегламент, ВидОбъекта)
	НайденныйРегламент = ПолучитьРегламентПоНаименованию(ТекРегламент, ВидОбъекта);
	ВидимостьПроизвольногоНаименования	= get_prop(НайденныйРегламент, "ПроизвольноеНазваниеРегламента", Ложь);
	ВидимостьЭлементаФормы("ПроизвольноеНазваниеРегламента", ВидимостьПроизвольногоНаименования);
	ВидимостьЭлементаФормы("ПроизвольноеНазваниеРегламентаВидимость", Не ВидимостьПроизвольногоНаименования);
	ЭлементыФормочки = ПолучитьЭлементыФормы();
	Если ЭлементыФормочки.Найти("НадписьПроизвольноеНазваниеРегламента") <> Неопределено Тогда
		ВидимостьЭлементаФормы("НадписьПроизвольноеНазваниеРегламента", ВидимостьПроизвольногоНаименования);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьКомандВложения(СсылкаНаОбъект, ТекРегламент)
	ТипМетаданных = ПолучитьТипМетаданных(СсылкаНаОбъект);
	Если ТипМетаданных = "Документы" или Найти(ТекРегламент, "ПрочийКадровыйДокумент") > 0 Тогда
		ВидимостьЭлементаФормы("ВложенияТипаДокумента", Истина);
		ВидимостьЭлементаФормы("грДобавитьФайл", Истина);
		ВидимостьЭлементаФормы("ПростойЗапросПодписи", Истина);
	Иначе
		ВидимостьЭлементаФормы("ВложенияТипаДокумента", Ложь);
		ВидимостьЭлементаФормы("грДобавитьФайл", Ложь);
		ВидимостьЭлементаФормы("ПростойЗапросПодписи", Ложь);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПроизвольноеНазваниеРегламента(ТекРегламент, ВидОбъекта)
	ПроизвольноеНазваниеРегламента = "";
	//Дадим произвольному названию регламента название первой отмеченной ПФ
	Отбор = Новый Структура("ВидОбъекта", ВидОбъекта);
	
	//Представление из таблицы сохраненных регламентов
	СписокРегламентов = РегламентТекущегоТипаДокумента.НайтиСтроки(Отбор);
	Для каждого Регл из СписокРегламентов Цикл
	 	ПроизвольноеНазваниеРегламента = Регл.ПроизвольноеНазваниеРегламента;
		Прервать;
	КонецЦикла;
	
	Если ПустаяСтрока(ПроизвольноеНазваниеРегламента) Тогда
	    СтрокиПФ = ВложенияПоТипамОбъектов1С.НайтиСтроки(Отбор);
		Для каждого Влож из СтрокиПФ Цикл
			Если Влож.ОтметкаВыбора Тогда
				ПроизвольноеНазваниеРегламента = Влож.Представление;
				Возврат;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Возврат;
	КонецЕсли;
КонецПроцедуры	

&НаКлиенте
Процедура ВидимостьЭлементаФормы(НазваниеЭлемента, ВидимостьЭлемента)
	ЭлементыФормочки = ПолучитьЭлементыФормы();
	ЭлементыФормочки[НазваниеЭлемента].Видимость = ВидимостьЭлемента;		
КонецПроцедуры

#Область include_core_base_ЭДО_Form_ЗагрузкаДокументов_УстановитьЛокализацию
#КонецОбласти

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЭлементыФормочки = ПолучитьЭлементыФормыНаСервере();
	ДобавитьИнформациюОВерсии(ЭлементыФормочки.ВерсияПродукта);
	мДокументы = Неопределено;
	Объекты.Очистить();
	Если Параметры.Свойство("Источник", мДокументы) Тогда
		Если мДокументы.Количество() > 0 Тогда
			ПервыйДок = мДокументы[0];
		Иначе
			//Закроем форму при отсутствии документов
			Отказ = Истина;
			Возврат;
		КонецЕсли;

		УстановитьЗаголовокФормы(мДокументы.Количество(), ПервыйДок);
		Для Каждого ОтпДокумент Из мДокументы Цикл
			нСтрока 				= Объекты.Добавить();
			нСтрока.Объект			= ОтпДокумент.Ссылка;
			нСтрока.Представление	= ОтпДокумент.Ссылка;
			нСтрока.СтатусОшибки	= 0;
			нСтрока.ВидОбъекта		= ОтпДокумент.Ссылка.Метаданные().Имя;
			нСтрока.ИмяИни			= ОтпДокумент.ИмяИни;
		КонецЦикла;

		ЭлементыФормочки.ПростойЗапросПодписи.Видимость = НЕ ОбщегоНазначения.ЭтоСправочник(
																ПервыйДок.Ссылка.Метаданные());
	Иначе
		//Закроем форму при отсутствии документов
		Отказ = Истина;
	КонецЕсли;
	
	ПерезапуститьДО = Ложь;
	Если Параметры.Свойство("Источник", мДокументы) Тогда
		ЭлементыФормочки.ПерезапуститьДО.Видимость = has_prop(Параметры, "ПерезапуститьДО");
	КонецЕсли;
	// Установим видимость если есть запись в состояниях объекта
	Для каждого СтрокаОбъекта Из Объекты Цикл
		// Есть ли запись об объекте ?
		МодульОбъекта	= ПолучитьМодульОбъекта();
		context_params	= МодульОбъекта.ПроверитьНаличиеПараметровПодключения();
		Сервис	= get_prop(context_params, "service", "");
		Аккаунт	= get_prop(context_params, "account", "");
		ЗаписиОбОбъекте = РегистрыСведений.Saby_Состояние.ПрочитатьПоОбъекту(СтрокаОбъекта.Объект, Сервис, Аккаунт);
		Если ЗаписиОбОбъекте <> Неопределено Тогда
			ЭлементыФормочки.ПерезапуститьДО.Видимость = Истина;
		КонецЕсли;
		Прервать;
	КонецЦикла;
	
	ПростойЗапрос = Ложь; //Пока убрано с формы
	УстановитьУсловноеОформление(ЭтаФорма);
	ПростойЗапросПодписи = Ложь;
	ЭлементыФормочки.ДобавитьСотрудника.Видимость = ПростойЗапросПодписи;
	ЭлементыФормочки.СписокИсполнителей.Видимость = ПростойЗапросПодписи;
	ЭлементыФормочки.КаналИнформации.Видимость = ПростойЗапросПодписи;
	ЭлементыФормочки.МаршрутОзнакомления.Видимость = ПростойЗапросПодписи;
	УстановитьЛокализацию();
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление(ЭтаФорма_)
	
	//Оптправляем все виды документов. поэтому раскарска уже не нужна, код оставлен на будущее, 
	//ли вдруг нужно будет раскрасить таблицу документов по каким то другим условиям
	
	//мПоляОформления		= Новый Массив();
	//мПоляОформления.Добавить("ДокументыКОтправке");
	//
	//ПутьКПолюОтбора		= "ДокументыКОтправке.СтатусОшибки";
	//ПутьКПолюСравнения	= "ДокументыКОтправке.СтатусОшибки";
	//
	//
	////*******************************
	////Еще собрать
	//Элемент = УсловноеОформление.Элементы.Добавить();
	//Для Каждого ИмяПоля Из мПоляОформления Цикл
	//	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	//	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяПоля].Имя);
	//КонецЦикла;
	//
	//ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбора);
	//ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	//ОтборЭлемента.ПравоеЗначение = 1;//Новый ПолеКомпоновкиДанных(ПутьКПолюСравнения);
	//
	//Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Красный);	
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьВыборПФДляВидаДокумента( ВидОбъекта )
	МассивПечатныхФорм	= Новый Массив();
	мВыбрПечатныхФорм = ВложенияТекущегоТипаОбъекта1С.НайтиСтроки(
		Новый Структура("ОтметкаВыбора, ВидОбъекта", Истина, ВидОбъекта));
	Для Каждого ПФорма из мВыбрПечатныхФорм Цикл
		МассивПечатныхФорм.Добавить( ПФорма.Представление );
	КонецЦикла;
	
	//Обновим отметки в глобальной таблице ПечатныхФорм
	мВыбрПечатныхФорм = ВложенияТекущегоТипаОбъекта1С.НайтиСтроки(Новый Структура("ВидОбъекта", ВидОбъекта));
	Для Каждого ПФорма из мВыбрПечатныхФорм Цикл
		мПФ	= ВложенияПоТипамОбъектов1С.НайтиСтроки(
			Новый Структура("Представление, ВидОбъекта", ПФорма.Представление, ВидОбъекта));
		Для Каждого СтрокаВл Из мПФ Цикл
			СтрокаВл.ОтметкаВыбора = ПФорма.ОтметкаВыбора;
			Прервать;
		КонецЦикла;
	КонецЦикла;
	ХранилищеОбщихНастроек.Сохранить("Saby_ПФ_КОтправке", ВидОбъекта, МассивПечатныхФорм,,);
КонецПроцедуры

&НаСервере
Функция ПрочитатьВыборПФДляВидаДокумента( ВидОбъекта )
 	МассивПечатныхФорм = ХранилищеОбщихНастроек.Загрузить("Saby_ПФ_КОтправке", ВидОбъекта,,);
	Если ТипЗнч(МассивПечатныхФорм) = Тип("Массив") Тогда
		Для Каждого ПФорма из МассивПечатныхФорм Цикл
			//Обновим общие данные
			мПФ	= ВложенияПоТипамОбъектов1С.НайтиСтроки(
				Новый Структура("Представление, ВидОбъекта", ПФорма, ВидОбъекта));
			Для Каждого СтрокаВл Из мПФ Цикл
				СтрокаВл.ОтметкаВыбора = Истина;
			КонецЦикла;
			//Обновим данные на форме
			мПФ	= ВложенияТекущегоТипаОбъекта1С.НайтиСтроки(
				Новый Структура("Представление, ВидОбъекта", ПФорма, ВидОбъекта));
			Для Каждого СтрокаВл Из мПФ Цикл
				СтрокаВл.ОтметкаВыбора = Истина;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
КонецФункции

&НаСервере
Процедура ЗаписатьРегламентыПоУмолчанию( ВидОбъекта, ТекРегламент, ПроизвольноеНазвание)
	ХранилищеОбщихНастроек.Сохранить("Saby_Регламенты", ВидОбъекта,
		Новый Структура("Регламент ,ПроизвольноеНазвание", ТекРегламент, ПроизвольноеНазвание),,);
КонецПроцедуры

&НаСервере
Функция ПрочитатьРегламентПоУмолчанию( ВидОбъекта )
 	РегламентПоУмолчанию = ХранилищеОбщихНастроек.Загрузить("Saby_Регламенты", ВидОбъекта,,);
    Возврат РегламентПоУмолчанию;
КонецФункции

&НаКлиенте
Процедура ЗаполнитьСписокРегламентовВыбранногоВидаОбъекта(ВидОбъекта)
	ЭлементыФормочки = ПолучитьЭлементыФормы();
	ЭлементыФормочки.Регламент.СписокВыбора.Очистить();
	Отбор = Новый Структура("ВидОбъекта", ВидОбъекта);
    СтрокиРегламента = РегламентПоТипамДокументов.НайтиСтроки(Отбор);
	Для Каждого Регл Из СтрокиРегламента Цикл
 		_Строка = ЭлементыФормочки.Регламент.СписокВыбора.Добавить();
 		_Строка.Значение = Регл.Регламент.Значение;
		_Строка.Представление = Регл.Регламент.Представление;	
	КонецЦикла;
КонецПроцедуры	

&НаКлиенте
Функция ПолучитьРанееВыбранныйРегламент(ВидОбъекта)
	Если НЕ ФормаОткрыта Тогда
		Возврат Неопределено;
	КонецЕсли;
	//Выбренем запомненый Регламент
	Отбор = Новый Структура("ВидОбъекта", ВидОбъекта);
	СтрокиРегл = РегламентТекущегоТипаДокумента.НайтиСтроки(Отбор);
	Если СтрокиРегл.Количество() > 0 Тогда
		Для каждого Регл из СтрокиРегл Цикл
			ВремРегламент = Регл.Регламент;
			Прервать;
		КонецЦикла;
	Иначе
		//Этого быть не может но пусть отработает этот вариант
		ЭлементыФормочки = ПолучитьЭлементыФормы();
		ВремРегламент = ЭлементыФормочки.Регламент.СписокВыбора[0].Значение;
	КонецЕсли;	
	
	Возврат ВремРегламент;
КонецФункции	

&НаСервере
Функция ПолучитьСписокРегламентов(ВидОбъекта) 
	МодульОбъекта	= ПолучитьМодульОбъекта();
	context_params	= МодульОбъекта.ПроверитьНаличиеПараметровПодключения();
	
	ТипыДокументов	= ПолучитьИзОбъекта1СОбъектСБИС(ВидОбъекта);
		
	Возврат МодульОбъекта.local_helper_regl_get_by_types(context_params, ТипыДокументов);
КонецФункции

&НаСервере
Процедура ДобавитьПараметрыВОбщиеНастройки(context_params, СтруктураПараметров)
	МодульОбъекта = ПолучитьМодульОбъекта();
	ОбщиеНастройки	= МодульОбъекта.ОбщиеНастройкиПрочитать();
	ПубличныеОбщиеНастройки	= get_prop(ОбщиеНастройки, "public", Новый Структура);
	Для каждого ЭлемСтруктуры из СтруктураПараметров Цикл
		ПубличныеОбщиеНастройки.Вставить(ЭлемСтруктуры.Ключ, ЭлемСтруктуры.Значение);
	КонецЦикла;
	ОбщиеНастройки.Вставить("public", ПубличныеОбщиеНастройки);
	МодульОбъекта.ОбщиеНастройкиЗаписать(ОбщиеНастройки);
	context_params["public"] = ПубличныеОбщиеНастройки;
КонецПроцедуры
	
&НаСервере
Функция ПолучитьИзОбъекта1СОбъектСБИС(ВидОбъекта)
	СписокОбъектов = Новый Массив();
	Если ВидОбъекта = "БольничныйЛист" Тогда
		СписокОбъектов.Добавить("Allowance");
	ИначеЕсли ВидОбъекта = "ГрафикОтпусков" Тогда
		СписокОбъектов.Добавить("Согласование");
	ИначеЕсли ВидОбъекта = "ГрафикОтпусковОрганизаций" Тогда
		СписокОбъектов.Добавить("Согласование");
	ИначеЕсли ВидОбъекта = "ДоговорРаботыУслуги" Тогда
		СписокОбъектов.Добавить("GphContract");
	ИначеЕсли ВидОбъекта = "ИзменениеГрафикаРаботыСписком" Тогда
		СписокОбъектов.Добавить("ИзмененияОклада");
	ИначеЕсли ВидОбъекта = "ИзменениеОплатыТруда" Тогда
		СписокОбъектов.Добавить("ИзмененияОклада");
	ИначеЕсли ВидОбъекта = "ИзменениеПлановыхНачислений" Тогда
		СписокОбъектов.Добавить("ИзмененияОклада");
	ИначеЕсли ВидОбъекта = "ИндексацияЗаработка" Тогда
		СписокОбъектов.Добавить("Indexation");
	ИначеЕсли ВидОбъекта = "КадровыйПеревод" Тогда
		СписокОбъектов.Добавить("ИзмененияДолжности");
	ИначеЕсли ВидОбъекта = "КадровыйПереводСписком" Тогда
		СписокОбъектов.Добавить("ИзмененияДолжности");
	ИначеЕсли ВидОбъекта = "КадровоеПеремещение" Тогда
		СписокОбъектов.Добавить("ИзмененияДолжности");
	ИначеЕсли ВидОбъекта = "КадровоеПеремещениеОрганизаций" Тогда
		СписокОбъектов.Добавить("ИзмененияДолжности");
	ИначеЕсли ВидОбъекта = "Изменения" Тогда
		СписокОбъектов.Добавить("ИзмененияДолжности");
	ИначеЕсли ВидОбъекта = "Командировка" Тогда
		СписокОбъектов.Добавить("BusinessTrip");
	ИначеЕсли ВидОбъекта = "КомандировкиСотрудников" Тогда
		СписокОбъектов.Добавить("BusinessTrip");
	ИначеЕсли ВидОбъекта = "КомандировкиОрганизаций" Тогда
		СписокОбъектов.Добавить("BusinessTrip");
	ИначеЕсли ВидОбъекта = "ОплатаПоСреднемуЗаработку" Тогда
		СписокОбъектов.Добавить("Отпуск");
	ИначеЕсли ВидОбъекта = "ОплатаПоСреднемуЗаработкуСписком" Тогда
		СписокОбъектов.Добавить("Отпуск");
	ИначеЕсли ВидОбъекта = "Отгул" Тогда
		СписокОбъектов.Добавить("Отгул");
	ИначеЕсли ВидОбъекта = "ОтгулСписком" Тогда
		СписокОбъектов.Добавить("Отгул");
	ИначеЕсли ВидОбъекта = "Отпуск" Тогда
		СписокОбъектов.Добавить("Отпуск");
	ИначеЕсли ВидОбъекта = "ОтпускаСотрудников" Тогда
		СписокОбъектов.Добавить("Отпуск");
	ИначеЕсли ВидОбъекта = "ОтпускБезСохраненияОплаты" Тогда
		СписокОбъектов.Добавить("Отпуск");
	ИначеЕсли ВидОбъекта = "ОтпускБезСохраненияОплатыСписком" Тогда
		СписокОбъектов.Добавить("Отпуск");
	ИначеЕсли ВидОбъекта = "ОплатаДнейУходаЗаДетьмиИнвалидами" Тогда
		СписокОбъектов.Добавить("Отпуск");
	ИначеЕсли ВидОбъекта = "ОтпускаОрганизаций" Тогда
		СписокОбъектов.Добавить("Отпуск");
	ИначеЕсли ВидОбъекта = "ОтпускПоУходуЗаРебенком" Тогда
		СписокОбъектов.Добавить("Allowance");
	ИначеЕсли ВидОбъекта = "ПереводНаРаботуСКоронавирусом" Тогда
		СписокОбъектов.Добавить("ИзмененияДолжности");
	ИначеЕсли ВидОбъекта = "ПеремещениеВДругоеПодразделение" Тогда
		СписокОбъектов.Добавить("ИзмененияДолжности");
	ИначеЕсли ВидОбъекта = "ПеремещениеМеждуТерриториями" Тогда
		СписокОбъектов.Добавить("ИзмененияДолжности");
	ИначеЕсли ВидОбъекта = "ПереносОтпуска" Тогда
		СписокОбъектов.Добавить("PlanVacationScheduleChange");
	ИначеЕсли ВидОбъекта = "ПриемНаРаботу" Тогда
		СписокОбъектов.Добавить("ПриемНаРаботу");
	ИначеЕсли ВидОбъекта = "ПриемНаРаботуСписком" Тогда
		СписокОбъектов.Добавить("ПриемНаРаботу");
	ИначеЕсли ВидОбъекта = "ПриемНаРаботуВОрганизацию" Тогда
		СписокОбъектов.Добавить("ПриемНаРаботу");
	ИначеЕсли ВидОбъекта = "Прием" Тогда
		СписокОбъектов.Добавить("ПриемНаРаботу");
	ИначеЕсли ВидОбъекта = "НачислениеПоБольничномуЛисту" Тогда
		СписокОбъектов.Добавить("Allowance");
	ИначеЕсли ВидОбъекта = "ПрогулНеявка" Тогда
		СписокОбъектов.Добавить("Прогул");
		СписокОбъектов.Добавить("Allowance");
	ИначеЕсли ВидОбъекта = "ПрогулНеявкаСписком" Тогда
		СписокОбъектов.Добавить("Прогул");
		СписокОбъектов.Добавить("Allowance");
	ИначеЕсли ВидОбъекта = "НеявкиИБолезниОрганизаций" Тогда
		СписокОбъектов.Добавить("Прогул");
		СписокОбъектов.Добавить("Allowance");
	ИначеЕсли ВидОбъекта = "ОтсутствияНаРабочемМесте" Тогда
		СписокОбъектов.Добавить("Прогул");
		СписокОбъектов.Добавить("Allowance");
	ИначеЕсли ВидОбъекта = "РаботаВВыходныеИПраздничныеДни" Тогда
		СписокОбъектов.Добавить("Переработка");
	ИначеЕсли ВидОбъекта = "ОплатаПраздничныхИВыходныхДнейОрганизаций" Тогда
		СписокОбъектов.Добавить("Переработка");
	ИначеЕсли ВидОбъекта = "РаботаСверхурочно" Тогда
		СписокОбъектов.Добавить("Переработка");
	ИначеЕсли ВидОбъекта = "ОплатаСверхурочныхЧасов" Тогда
		СписокОбъектов.Добавить("Переработка");
	ИначеЕсли ВидОбъекта = "РегистрацияПереработок" Тогда
		СписокОбъектов.Добавить("Переработка");
	ИначеЕсли ВидОбъекта = "ТабельУчетаРабочегоВремени" Тогда
		СписокОбъектов.Добавить("ТабельДокумент");
	ИначеЕсли ВидОбъекта = "ТабельУчетаРабочегоВремениОрганизации" Тогда
		СписокОбъектов.Добавить("ТабельДокумент");
	ИначеЕсли ВидОбъекта = "Увольнение" Тогда
		СписокОбъектов.Добавить("ПриказНаУвольнение");
	ИначеЕсли ВидОбъекта = "УвольнениеСписком" Тогда
		СписокОбъектов.Добавить("ПриказНаУвольнение");
	ИначеЕсли ВидОбъекта = "УвольнениеИзОрганизаций" Тогда
		СписокОбъектов.Добавить("ПриказНаУвольнение");
	ИначеЕсли ВидОбъекта = "МатериальнаяПомощь" Тогда
		СписокОбъектов.Добавить("НачисленияПоЗарплате");
	ИначеЕсли ВидОбъекта = "Премия" Тогда
		СписокОбъектов.Добавить("Поощрение");
	ИначеЕсли ВидОбъекта = "ПремииРаботниковОрганизаций" Тогда
		СписокОбъектов.Добавить("Поощрение");
	ИначеЕсли ВидОбъекта = "ПриказОПоощрении" Тогда
		СписокОбъектов.Добавить("Поощрение");
	ИначеЕсли ВидОбъекта = "Совмещение" Тогда
		СписокОбъектов.Добавить("CombinationPositions");
	ИначеЕсли ВидОбъекта = "АктПриемкиВыполненныхРаботОказанныхУслуг" Тогда
		СписокОбъектов.Добавить("GphAct");
	ИначеЕсли ВидОбъекта = "АктыПриемкиВыполненныхРабот" Тогда
		СписокОбъектов.Добавить("GphAct");
	ИначеЕсли ВидОбъекта = "Договор" Тогда
		СписокОбъектов.Добавить("GphContract");
	ИначеЕсли ВидОбъекта = "ПростойСотрудников" Тогда
		СписокОбъектов.Добавить("Простой");
	ИначеЕсли ВидОбъекта = "ОтменаСовмещения" Тогда
		СписокОбъектов.Добавить("CombinationCancel");
	ИначеЕсли ВидОбъекта = "АвансовыйОтчет" Тогда
		СписокОбъектов.Добавить("АвансОтчет");
	Иначе
		СписокОбъектов.Добавить(ВидОбъекта);
	КонецЕсли;
	Возврат СписокОбъектов;
КонецФункции	

&НаСервере
Процедура УстановитьЗаголовокФормы(КоличествоДок, ПервыйДок)
	//Элементы.ГрПредпросмотр.Видимость = (КоличествоДок = 1);
	//Элементы.ГрСписокДокументов.Видимость = НЕ (КоличествоДок = 1);
	Если КоличествоДок = 1 Тогда 
		ЭтаФорма.Заголовок	= "Отправка в "+ ЛокализацияНазваниеПродукта() +" "+ СокрЛП(ПервыйДок.Ссылка);
	Иначе
		ЭтаФорма.Заголовок	= "Отправка документов в "+ЛокализацияНазваниеПродукта();
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьПроизвольноеНазваниеИзПолногоНазванияРегламента(ПолноеНазваниеРегламента);
	Возврат Лев(ПолноеНазваниеРегламента, Найти(ПолноеНазваниеРегламента,"[/") - 1);
КонецФункции

&НаСервере
Процедура ЗаполнитьТЗДоступныхРегламентов()
	ПоискСовпаденийТипаОбъекта = "";
	ОбработанныеТипыОбъектов = Новый Массив;
	
	//Регламенты общие для всех Объектов
	РегламентовКадровыеПрочие = ВызовПолученияСпискаРегламентов("CadresOther");
	
	Для Каждого СтрДокум Из Объекты Цикл
		ИмяТипаДокумента = СтрДокум.ВидОбъекта;
		
		Если ОбработанныеТипыОбъектов.Найти(ИмяТипаДокумента) = Неопределено Тогда
			ОбработанныеТипыОбъектов.Добавить(ИмяТипаДокумента);	
		Иначе
			//Перейдем к следующему объекту
			Продолжить;
		КонецЕсли;	
		
		НовыйРегл = РегламентПоТипамДокументов.Добавить();
		НовыйРегл.Регламент = Новый Структура("Значение, Представление, ПроизвольноеНазваниеРегламента",
			"", 
			Новый ФорматированнаяСтрока("По умолчанию", Новый Шрифт(,, Истина)),
			Ложь);
		НовыйРегл.ВидОбъекта = ИмяТипаДокумента;
		
		мРегламентыОбъекта = Новый Массив();
		СписокРегламентов = ВызовПолученияСпискаРегламентов(ИмяТипаДокумента);
		Для каждого Регл из СписокРегламентов Цикл
			НовыйРегл = РегламентПоТипамДокументов.Добавить();
			НовыйРегл.Регламент = Новый Структура("Значение, Представление, ПроизвольноеНазваниеРегламента",
													Регл["Name"] + "[/" + Регл["DocType"] + "/]",
													Новый ФорматированнаяСтрока(Регл["Name"], Новый Шрифт(,, Истина)),
													Ложь);
			НовыйРегл.ВидОбъекта = ИмяТипаДокумента;
			мРегламентыОбъекта.Добавить(Регл["Name"] + "[/" + Регл["DocType"] + "/]");
		КонецЦикла;
		
		
		Для каждого Регл из РегламентовКадровыеПрочие Цикл		
			НовыйРегл = РегламентПоТипамДокументов.Добавить();
			НовыйРегл.Регламент = Новый Структура("Значение, Представление, ПроизвольноеНазваниеРегламента",
													Регл["Name"] + "[/ПрочийКадровыйДокумент/]",
													Новый ФорматированнаяСтрока(Регл["Name"], Новый Шрифт(,, Ложь)),
													get_prop(get_prop(Регл,"AdditionalData", Новый Соответствие), "DocOtherCustomTitle", Ложь));
			НовыйРегл.ВидОбъекта = ИмяТипаДокумента; 
			мРегламентыОбъекта.Добавить(Регл["Name"] + "[/ПрочийКадровыйДокумент/]");
		КонецЦикла;
		
		//*********************************************
		
		//Получим первый по списку регламент
		ПервыйРегламент = "";
		Если мРегламентыОбъекта.Количество() > 0 Тогда
			ПервыйРегламент = мРегламентыОбъекта[0];
		КонецЕсли;
		
		//Получим Регламент по умолчанию для Объекта
		ВремРегламент = "";
		РегламентПоУмолчанию = ПрочитатьРегламентПоУмолчанию(ИмяТипаДокумента);
		Если РегламентПоУмолчанию <> Неопределено Тогда
			ВремРегламент = get_prop(РегламентПоУмолчанию, "Регламент", ПервыйРегламент);
		КонецЕсли;
		
		//Установить значение в таблице выбраных Регламентов
		Отбор = Новый Структура("ВидОбъекта", ИмяТипаДокумента);
    	СписокРегламентов = РегламентТекущегоТипаДокумента.НайтиСтроки(Отбор);
		Если СписокРегламентов.Количество() = 0 Тогда
			РедактируемаСтрока = РегламентТекущегоТипаДокумента.Добавить();
		Иначе
			Для Каждого РедактируемаСтрока Из СписокРегламентов Цикл
				Прервать;
			КонецЦикла;
		КонецЕСли ;
		РедактируемаСтрока.ВидОбъекта	= ИмяТипаДокумента;
		РедактируемаСтрока.Регламент	= ВремРегламент;
	 	РедактируемаСтрока.ПроизвольноеНазваниеРегламента	= get_prop(
			РегламентПоУмолчанию,
			"ПроизвольноеНазвание", 
			ПолучитьПроизвольноеНазваниеИзПолногоНазванияРегламента(ВремРегламент));
		
	КонецЦикла;
	
КонецПроцедуры	

&НаСервере
Процедура ПослеВыполненияЗадания(Результат, ДопПараметры) Экспорт
	Сообщить("ПослеВыполненияЗадания");
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьВСБИС_ПослеАутентификации(Результат, Параметры) Экспорт 
	Если Результат <> Неопределено Тогда
		ЗагрузитьВСБИС( Параметры.Команда );
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ЗаполнитьСтруктуруПечатныхФормДляПередачиНаСервере()
	МодульОбработки = ПолучитьМодульОбъекта();
	Возврат МодульОбработки.ЗаполнитьСтруктуруПечатныхФормДляПередачи(ВложенияПоТипамОбъектов1С);
КонецФункции

#Область ЗагрузитьВСБИС

&НаКлиенте
Процедура ЗагрузитьВСБИС(Команда)

	Отказ	= Ложь;
	context_params = ПроверитьНаличиеПараметровПодключенияНаСервере();

	Если context_params = Неопределено Тогда
		ВходяшиеПараметры	= Новый Структура("Команда",Команда);
		ПроверкаВведенныхДанныхАутентификации = Новый ОписаниеОповещения("ЗагрузитьВСБИС_ПослеАутентификации",
														ЭтаФорма, ВходяшиеПараметры);
		ОткрытьФормуОбработки("Вход",, ЭтаФорма,, ПроверкаВведенныхДанныхАутентификации);
		Возврат;
	КонецЕсли;

	мИсполнители = Новый Массив;
	Если ПростойЗапросПодписи Тогда
		Для Каждого Исполнитель Из СписокИсполнителей Цикл
			Если НЕ ЗначениеЗаполнено(Исполнитель.Сотрудник) Тогда
				Продолжить;
			КонецЕсли;
			мИсполнители.Добавить(Новый Структура("ФИО, ТабельныйНомер, Роль",
				СокрЛП(Исполнитель.Сотрудник),
				get_prop(НайтиСотрудника(Исполнитель.Сотрудник), "Код"),
				?(ЗначениеЗаполнено(Исполнитель.Роль), Исполнитель.Роль, "Сотрудник")));
		КонецЦикла;
	КонецЕсли;

	ОбрабатываемыеОбъекты = ПолучитьОбрабатываемыеОбъекты();

	ПараметрыВызова = Новый Структура;
	ПараметрыВызова.Вставить("МассивОбъектов",       ОбрабатываемыеОбъекты);
	ПараметрыВызова.Вставить("Исполнители",          мИсполнители);
	ПараметрыВызова.Вставить("ПростойЗапросПодписи", ПростойЗапросПодписи);
	ПараметрыВызова.Вставить("КаналИнформации",      ?(ЗначениеЗаполнено(КаналИнформации), КаналИнформации, 0));
	ПараметрыВызова.Вставить("МаршрутОзнакомления",  ?(ЗначениеЗаполнено(МаршрутОзнакомления), МаршрутОзнакомления, 0));

	Контекст = Новый Структура;
	Контекст.Вставить("ПараметрыВызова", ПараметрыВызова);
	Контекст.Вставить("context_params", context_params);
	ОбработчикРезультата = Новый ОписаниеОповещения(
		"ЗагрузитьВСБИСПослеОбновленияКэшаЛокальныхСертификатов", ЭтаФорма, Контекст);

	ОбновитьКэшЛокальныхСертификатов(ОбработчикРезультата);

КонецПроцедуры

&НаКлиенте
Функция ПолучитьОбрабатываемыеОбъекты()
	ОбрабатываемыеОбъекты = Новый Массив;
	ВыбранныеПечатныеФормы = ЗаполнитьСтруктуруПечатныхФормДляПередачиНаСервере();

	ТипМетаданных = ПолучитьТипМетаданных(Объекты[0].Объект);
	Для Каждого ВыгружаемыйДокумент Из Объекты Цикл

		Отбор = Новый Структура("ВидОбъекта", ВыгружаемыйДокумент.ВидОбъекта);
    	СписокРегламентов = РегламентТекущегоТипаДокумента.НайтиСтроки(Отбор);
		Для каждого Регл из СписокРегламентов Цикл
		 	ПолноеНазваниеРегламента = Регл.Регламент;
		КонецЦикла;
		НазваниеРегламента = ПолучитьПроизвольноеНазваниеИзПолногоНазванияРегламента(ПолноеНазваниеРегламента);

		Если ЗначениеЗаполнено(ВыгружаемыйДокумент.ИмяИни) Тогда
			ИмяИни = "СинхВыгрузка_" + ВыгружаемыйДокумент.ИмяИни;
		ИначеЕсли Найти(ПолноеНазваниеРегламента, "ПрочийКадровыйДокумент") > 0 Тогда
			ИмяИни = "СинхВыгрузка_ПрочийКадровыйДокумент" + ВыгружаемыйДокумент.ВидОбъекта;
		Иначе
			ИмяИни = "СинхВыгрузка_" + ВыгружаемыйДокумент.ВидОбъекта;
		КонецЕсли;

		API3_ref = Новый Структура;
		API3_ref.Вставить("ИдИС",			СокрЛП(ВыгружаемыйДокумент.Объект.УникальныйИдентификатор()));
		API3_ref.Вставить("ТипИС",			ТипМетаданных);
		API3_ref.Вставить("ИмяИС",			ВыгружаемыйДокумент.ВидОбъекта);
		API3_ref.Вставить("ini_name",		ИмяИни);
		API3_ref.Вставить("ПерезапуститьДО",ПерезапуститьДО);
		API3_ref.Вставить("Название",		СокрЛП(ВыгружаемыйДокумент.Объект));
		API3_ref.Вставить("Регламент",		?(ЗначениеЗаполнено(НазваниеРегламента), НазваниеРегламента, Неопределено));
		API3_ref.Вставить("ПроизвольноеНазваниеРегламента",	Регл.ПроизвольноеНазваниеРегламента );
		API3_ref.Вставить("_print_forms",	?(ВыбранныеПечатныеФормы.Свойство(ВыгружаемыйДокумент.ВидОбъекта),
			ВыбранныеПечатныеФормы[ВыгружаемыйДокумент.ВидОбъекта], Неопределено));
		ОбрабатываемыеОбъекты.Добавить(API3_ref);
	КонецЦикла;

	Возврат ОбрабатываемыеОбъекты;
КонецФункции

&НаКлиенте
Процедура ЗагрузитьВСБИСПослеОбновленияКэшаЛокальныхСертификатов(РезультатОбновленияКеша, Контекст) Экспорт
	ЗапуститьINI(Контекст);
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ЗаполнитьКоментарииДокументовКОтправке()

	//ТД_ПФ = Элементы.ТаблицаВложений.ТекущиеДанные;
	//МДокументов = ДокументыКОтправке.НайтиСтроки( Новый СТруктура("ВидОбъекта"), ТД_ПФ.ВидОбъекта );
	//Если МДокументов.Количество() > 0 Тогда
	//	ТипПервогоДокумента = МДокументов.Документ.Метаданные().Имя;
	//Иначе
	//	//Э... так быть не должОн.
	//	Возврат;
	//КонецЕсли;
	//СписокПФСтрокой	= "";
	//мВыбрПечатныхФорм = ТаблицаВложений.НайтиСтроки( Новый Структура("ОтметкаВыбора", Истина) );
	//Для Каждого ПФорма из мВыбрПечатныхФорм Цикл
	//	СписокПФСтрокой	= СписокПФСтрокой + ПФорма.Представление + ",";
	//КонецЦикла;
	//Для Каждого УказательДок Из ДокументыКОтправке Цикл
	//	Если ТипПервогоДокумента <> УказательДок.Документ.Метаданные().Имя Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	УказательДок.Комментарий	= СписокПФСтрокой;
	//КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФильтрПФПоТипуДокумента(ВидОбъекта = Неопределено)
	ВложенияТекущегоТипаОбъекта1С.Очистить();
	Отбор = Новый Структура("ВидОбъекта", ВидОбъекта);
    СтрокиПФ = ВложенияПоТипамОбъектов1С.НайтиСтроки(Отбор);
	Для Каждого СтрокаДокПФ Из СтрокиПФ Цикл
		ЗаполнитьЗначенияСвойств(ВложенияТекущегоТипаОбъекта1С.Добавить(), СтрокаДокПФ);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКОтправкеПриАктивизацииСтроки(Элемент)
	Если НЕ ФормаОткрыта ТОгда
		Возврат;
	КонецЕсли;
	ЭлементыФормочки = ПолучитьЭлементыФормы();
	ТД = ЭлементыФормочки.Объекты.ТекущиеДанные;
	ВложенияТекущегоТипаОбъекта1С.Очистить();
	Если ТД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПрочитатьВыборПФДляВидаДокумента(ТД.ВидОбъекта);
	УстановитьФильтрПФПоТипуДокумента(ТД.ВидОбъекта);
	//ЗаполнитьСписокРегламентов(ТД.ВидОбъекта);
	
	ЗаполнитьСписокРегламентовВыбранногоВидаОбъекта(ТД.ВидОбъекта);
	Регламент = ПолучитьРанееВыбранныйРегламент(ТД.ВидОбъекта);
	УстановитьПроизвольноеНазваниеРегламента(Регламент, ТД.ВидОбъекта);
	УстановитьВидимостьПроизвольногоНазванияРегламента(Регламент, ТД.ВидОбъекта);
	
	//После выбора регламента для тек объекта
	УстановитьВидимостьКомандВложения(ТД.Объект, Регламент);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОтветНаВопросОбУдаленииВыгружаемыхОбъектов(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если Объекты.Количество() = Параметры.Количество() Тогда
			//Удалены все объекты, имеет смысл сразу же закрыть форму
			Закрыть();
		Иначе
			Если Параметры.Количество() > 0 Тогда
				УдалитьСтрокуВыбранногоОбъекта(Параметры);	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	ИдентификаторыСтрок = Новый Массив;
	Для Каждого ИдСтроки Из Элемент.ВыделенныеСтроки Цикл
		ИдентификаторыСтрок.Добавить(ИдСтроки);
	КонецЦикла;
	Оповещение = Новый ОписаниеОповещения(
		"ПроверитьОтветНаВопросОбУдаленииВыгружаемыхОбъектов",
		ЭтаФорма,
		ИдентификаторыСтрок);
	ПоказатьВопрос(
		Оповещение,
		"Удалить выбранные объекты из списка отправляемых?",
		РежимДиалогаВопрос.ДаНет,
		0,
		КодВозвратаДиалога.Нет,
		"Удаление объектов из списка.");
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВложениеНаСервере(ИмяТаблицы, ВидОбъекта, ТипВложения, Представление)
	мСтрокКУдалению = ЭтотОбъект[ИмяТаблицы].НайтиСтроки(
		Новый Структура("ВидОбъекта, ТипВложения, Представление", ВидОбъекта, ТипВложения, Представление));
	Если мСтрокКУдалению.Количество() > 0 Тогда
		//удаляем обратным перебором, т.к. индекс строк меняется
		ВсегоСтрок = мСтрокКУдалению.Количество() - 1;
		Для СчетСтрок = 0 По ВсегоСтрок Цикл
			СтрокаКУдалению = мСтрокКУдалению[ВсегоСтрок - СчетСтрок];
			СтрокаКУдалению = ЭтаФорма[ИмяТаблицы].НайтиПоИдентификатору(СтрокаКУдалению.ПолучитьИдентификатор());
			ЭтаФорма[ИмяТаблицы].Удалить(СтрокаКУдалению);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры	

&НаКлиенте
Процедура УдалитьВложение(Команда)
	ЭлементыФормочки = ПолучитьЭлементыФормы();
	ДанныеСтроки = ЭлементыФормочки.ВложенияТипаДокумента.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено ИЛИ ДанныеСтроки.ТипВложения = "ПечатнаяФорма" Тогда
		Возврат;
	КонецЕсли;
	//Удаление из общей таблицы
	УдалитьВложениеНаСервере("ВложенияПоТипамОбъектов1С", ДанныеСтроки.ВидОбъекта, ДанныеСтроки.ТипВложения,
		ДанныеСтроки.Представление);
	//Удаление из таблицы на форме
	УдалитьВложениеНаСервере("ВложенияТекущегоТипаОбъекта1С", ДанныеСтроки.ВидОбъекта, ДанныеСтроки.ТипВложения,
		ДанныеСтроки.Представление);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеОВыбранномРегламенте(ВыбРегламент, НазваниеРегламентаПользоваателя)
	ЭлементыФормочки = ПолучитьЭлементыФормы();
	ТД = ЭлементыФормочки.Объекты.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура("ВидОбъекта", ТД.ВидОбъекта);
	СписокРегламентов = РегламентТекущегоТипаДокумента.НайтиСтроки(Отбор);
	Для каждого Регл из СписокРегламентов Цикл
	 	Регл.Регламент	= Регламент;
	 	Регл.ПроизвольноеНазваниеРегламента	= НазваниеРегламентаПользоваателя;
		//В таблице должна быть только одна запись по отобранному ВидуОбъекта
		Прервать;
	КонецЦикла;
	ЗаписатьРегламентыПоУмолчанию( ТД.ВидОбъекта, ВыбРегламент, НазваниеРегламентаПользоваателя);
КонецПроцедуры

&НаКлиенте
Процедура РегламентПриИзменении(Элемент)
	ЭлементыФормочки = ПолучитьЭлементыФормы();
	ТД = ЭлементыФормочки.Объекты.ТекущиеДанные;
	Если ТД = Неопределено Тогда Возврат; КонецЕсли;
	УстановитьПроизвольноеНазваниеРегламента(Регламент, ТД.ВидОбъекта);
	ОбновитьДанныеОВыбранномРегламенте(Регламент, ПроизвольноеНазваниеРегламента);
	УстановитьПроизвольноеНазваниеРегламента(Регламент, ТД.ВидОбъекта);
	УстановитьВидимостьПроизвольногоНазванияРегламента(Регламент, ТД.ВидОбъекта);
	УстановитьВидимостьКомандВложения(ТД.Объект, Регламент);
КонецПроцедуры

&НаКлиенте
Процедура ПроизвольноеНазваниеРегламентаПриИзменении(Элемент)
	ОбновитьДанныеОВыбранномРегламенте(Регламент, ПроизвольноеНазваниеРегламента);
КонецПроцедуры

#Область include_core_base_Helpers_ОпределениеТиповКонтента
#КонецОбласти

#Область include_core_base_ЭДО_ВыборФайлаЗавершение_МетодыФормыЗагрузкаДокумента
#КонецОбласти

#Область include_core_base_ЭДО_ВыборФайлаЗавершение_ОбщийМетод
#КонецОбласти

&НаСервере
Функция ПолучитьИмяПрисоединенногоФайла(СсылкаНаПрисоединенныйФайл) Экспорт
	Возврат СсылкаНаПрисоединенныйФайл.Наименование;
КонецФункции

&НаКлиенте
Процедура ОбработкаВыбораВложения(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ТипЗнч(ВыбранныеФайлы) = Тип("Массив") Тогда
		ЭлементыФормочки = ПолучитьЭлементыФормы();
		Для Каждого СсылкаНаПрисоединенныйФайл Из ВыбранныеФайлы Цикл
			ВидОбъекта				= ЭлементыФормочки.Объекты.ТекущиеДанные.ВидОбъекта;
			
			НоваяПФ					= ВложенияПоТипамОбъектов1С.Добавить();
			НоваяПФ.ОтметкаВыбора	= Истина;
			НоваяПФ.Представление	= ПолучитьИмяПрисоединенногоФайла(СсылкаНаПрисоединенныйФайл);
			НоваяПФ.ТипВложения     = "ПрисоединенныйФайл";
			НоваяПФ.ИндексКартинки	= 0;
			НоваяПФ.ВидОбъекта		= ВидОбъекта;
			НоваяПФ.Команда			= Новый Структура("Ссылка",СсылкаНаПрисоединенныйФайл);
			УстановитьФильтрПФПоТипуДокумента(ВидОбъекта);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьФизЛицоСотрудника(Сотрудник)
	Возврат	Сотрудник.ФизическоеЛицо;
КонецФункции

&НаКлиенте
Процедура ДобавитьВложениеИзПрикреплёныхФайлов(Команда)
	СтандартнаяОбработка = Ложь;
	ЭлементыФормочки = ПолучитьЭлементыФормы();
	ТД = ЭлементыФормочки.Объекты.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ВладелецФайла = ТД.Объект;
	Если ТипЗнч(ВладелецФайла) = Тип("СправочникСсылка.Сотрудники") Тогда
		ВладелецФайла = ПолучитьФизЛицоСотрудника(ВладелецФайла);
	КонецЕсли;	
	ПараметрыФормы.Вставить("ВладелецФайла",	 	ВладелецФайла);
	ПараметрыФормы.Вставить("ТолькоПросмотр",		Истина);
	ПараметрыФормы.Вставить("РежимВыбора",			Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор",	Истина);
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("ОбработкаВыбораВложения", ЭтаФорма);
	ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы",
         ПараметрыФормы,
         ЭтаФорма,
         Новый УникальныйИдентификатор,,,
		 ОповещениеЗавершения,
		 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ПростойЗапросПодписиПриИзменении(Элемент)
	ЭлементыФормочки = ПолучитьЭлементыФормы();
	Если ЭлементыФормочки.Найти("НадписьКаналИнформации") <> Неопределено Тогда
		ЭлементыФормочки.НадписьКаналИнформации.Видимость = ПростойЗапросПодписи;
	КонецЕсли;
	Если ЭлементыФормочки.Найти("НадписьМаршрутОзнакомления") <> Неопределено Тогда
		ЭлементыФормочки.НадписьМаршрутОзнакомления.Видимость = ПростойЗапросПодписи;
	КонецЕсли;
	ЭлементыФормочки.ДобавитьСотрудника.Видимость = ПростойЗапросПодписи;
	ЭлементыФормочки.СписокИсполнителей.Видимость = ПростойЗапросПодписи;
	ЭлементыФормочки.КаналИнформации.Видимость = ПростойЗапросПодписи;
	ЭлементыФормочки.МаршрутОзнакомления.Видимость = ПростойЗапросПодписи;
	Если ПростойЗапросПодписи Тогда
		СписокИсполнителей.Очистить();
		Если Объекты.Количество() = 1 Тогда
			ПростойЗапросПодписиПриИзмененииДобавитьСотрудникаПоРоли("Сотрудник");
			ПростойЗапросПодписиПриИзмененииДобавитьСотрудникаПоРоли("Руководитель");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПростойЗапросПодписиПриИзмененииДобавитьСотрудникаПоРоли(Роль)
	СправочникСотрудник = get_prop(Объекты[0].Объект, Роль);
	Если ЗначениеЗаполнено(СправочникСотрудник) Тогда
		СправочникСотрудник = СокрЛП(СправочникСотрудник);
		Если ЗначениеЗаполнено(СправочникСотрудник) Тогда
			НоваяСтрока = СписокИсполнителей.Добавить();
			НоваяСтрока.Сотрудник = СправочникСотрудник;
			НоваяСтрока.Роль = Роль;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция НайтиСотрудника(ИмяСотрудника)
	Попытка
		Возврат Справочники["Сотрудники"].НайтиПоНаименованию(ИмяСотрудника);
	Исключение
		Попытка
			Возврат Справочники["СотрудникиОрганизаций"].НайтиПоНаименованию(ИмяСотрудника);	
		Исключение	
			Возврат Неопределено;
		КонецПопытки	
	КонецПопытки;
КонецФункции

#Область include_core_base_ПроверкаВерсии_НаФорме
#КонецОбласти

#Область include_core_base_Helpers_FormGetters
#КонецОбласти

#Область include_core_base_ЭДО_РаботаСТаблицейИсполнителей
#КонецОбласти

#Область include_core_base_Криптография_НаКлиенте1С
#КонецОбласти

#Область include_core_base_ОсобенностиПлатформы_МодульФормы
#КонецОбласти

#Область include_core_base_Helpers_НастройкиПодключенияНаСервере
#КонецОбласти

#Область include_core_base_ЭДО_Form_ЗагрузкаДокументов_ОсобенностиПриложения
#КонецОбласти

#Область include_core_base_ЭДО_Form_ЗагрузкаДокументов_ОсобенностиПродукта
#КонецОбласти

#Область include_core_base_ЭДО_Form_ЗагрузкаДокументов_ОсобенностиПродуктаЗапуститьINI
#КонецОбласти



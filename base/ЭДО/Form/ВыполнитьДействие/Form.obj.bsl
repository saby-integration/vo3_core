
#Область include_core_base_ЭДО_Form_ВыполнитьДействие_ОсобенностиПродукта
#КонецОбласти

#Область include_core_base_ЭДО_Form_ВыполнитьДействие_УстановитьЛокализацию
#КонецОбласти

#Область include_core_base_ЭДО_Form_ВыполнитьДействие_ОсобенностиПродуктаМетодыФормы
#КонецОбласти

#Область МетодыФормы

&НаКлиенте
Процедура ДобавитьИсполнителя(Команда)
	ДобавитьСотрудника(Команда);
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокДействийСБИС(Документ)
	МодульОбъекта = ПолучитьМодульОбъекта(); 
	СписокДействий = ПолучитьСписокДействийИзОбъектаДокументСБИС(Документ);
	Если СписокДействий = Неопределено Тогда
		Если context_params = Неопределено Тогда
			Параметры.Свойство("context_params", context_params);
			Если context_params = Неопределено Тогда
				context_params	= МодульОбъекта.ПроверитьНаличиеПараметровПодключения();
			КонецЕсли;
		КонецЕсли;
		ДокументСБИС =  ПрочитатьДокумент(context_params, Документ);
		ТипСБИС	= get_prop(ДокументСБИС, "Тип", "");
		СписокДействий = ПолучитьСписокДействийИзОбъектаДокументСБИС(ДокументСБИС);
	КонецЕсли;
	Возврат СписокДействий;
КонецФункции

&НаСервере
Функция ПолучитьСписокДействийИзОбъектаДокументСБИС(Документ)
	Попытка
		Возврат Документ["Этап"][0]["Действие"];
	Исключение
		Возврат Неопределено;
	КонецПопытки
КонецФункции

&НаКлиенте
Процедура ПереотправитьДокумент(Команда)
	//TODO обновить списко после зартытия - ЗагрузкаДокументов
	//ДопПараметры = Новый Структура("ПараметрКоманды", ПараметрКоманды);
	//ОповешениеОЗакрытии = Новый ОписаниеОповещения("ПослеОтправитьВСБИС", Saby_КомандыОбменаДляФормыКлиент, ДопПараметры);
		
	ДокументПереотправить = Новый Массив;
	Для Каждого ДокументДляДействия Из ПараметрыВызова["Документы"] Цикл
		Если ДокументДляДействия["Документ1С"] <> Неопределено Тогда
			ДокументПереотправить.Добавить(СтруктураВыгрузкиДокумента(ДокументДляДействия["Документ1С"]));
		КонецЕсли;
	КонецЦикла;
	ПараметрыВФорму = Новый Структура();
	ПараметрыВФорму.Вставить("Источник", ДокументПереотправить);
	ПараметрыВФорму.Вставить("ПерезапуститьДО", Истина);
	ОткрытьФормуОбработки("ЗагрузкаДокументов", ПараметрыВФорму,ЭтаФорма.ВладелецФормы);
	Закрыть();
КонецПроцедуры

&НаСервере
Функция СтруктураВыгрузкиДокумента(Документ1С)
	Возврат Новый Структура("Ссылка,UID,ТипМетаданных,ВидОбъекта,ИмяИни", 
							Документ1С.Ссылка,
							Неопределено,
							Документ1С.Ссылка.Метаданные().Имя,
							Неопределено,
							Неопределено); 	
КонецФункции	

&НаСервере
Процедура ОтправитьВложенияНаСервере(context_params)
       МодульОбработки = ПолучитьМодульОбъекта();
   
	Если ТипЗнч(Параметры.СписокДокументовСБИС) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
    Для Каждого ОбновлДок Из Параметры.СписокДокументовСБИС Цикл
		ВидОбъекта = Неопределено;
		ВложенияДляДокумента = Новый Массив();
	    //ПечатныеФормы    = МодульОбработки.ЗаполнитьСтруктуруПечатныхФормДляПередачи(ВложенияПоТипамОбъектов1С);
	     
        Попытка
			ИмяЗапроса = "";
			// ВложенияПоТипамОбъектов1С - Это имя реквизита формы
			ВыбранныеПечатныеФормы = ЗаполнитьСтруктуруПечатныхФормДляПередачиНаСервере(ВложенияПоТипамОбъектов1С, ИмяЗапроса);
			Документ1СОбновлДок = get_prop(ОбновлДок,"Документ1С",Неопределено);
			Если Документ1СОбновлДок <> Неопределено Тогда
				ВидОбъекта = Документ1СОбновлДок.Метаданные().Имя;
			Иначе			
				ВидОбъекта = "БезОбъекта";
			КонецЕсли;
			ВложенияДляДокумента = ?(ВыбранныеПечатныеФормы.Свойство(ВидОбъекта),ВыбранныеПечатныеФормы[ВидОбъекта],Новый Массив);
        
			ДокИВложения    = Новый Структура;
            Идентификатор = get_prop(ОбновлДок,"Идентификатор","");
			ДокИВложения.Вставить("Идентификатор", Идентификатор);
			ДокИВложения.Вставить("Вложение", Новый Массив);
			ВложенияДляДокумента = МодульОбработки.ПолучитьПечатныеФормы(Документ1СОбновлДок, ВложенияДляДокумента);
			Для Каждого ПФ_ Из ВложенияДляДокумента Цикл
                
                ВложениеДок = Новый Структура;
                //ВложениеДок.Вставить("Тип", "ДокументОж");
                ВложениеДок.Вставить("Название", ПФ_.Название);
                ВложениеДок.Вставить("Файл", ПФ_.Файл);        
                
                ДокИВложения.Вложение.Добавить(ВложениеДок);
            КонецЦикла;
            ИмяЗапроса = "Вложения_"+Идентификатор;	
            Результат = ЗаписатьВложенияНаСайт(context_params, ДокИВложения, ИмяЗапроса);
        Исключение
            ИнфОбОшибке = ИнформацияОбОшибке();
			ОшибкаСтруктура = NewExtExceptionСтруктура(ИнфОбОшибке);
			Если ОшибкаСтруктура.type = "AddonRequest" Тогда  
				ОшибкаСтруктура.dump.Вставить("ИмяЗапроса", ИмяЗапроса);
				ВызватьИсключение NewExtExceptionСтрока(,"AddonRequest",,,ОшибкаСтруктура.dump, "AddonRequest");;
			КонецЕсли;
            СтруктураОшибки    = ExtExceptionAnalyse(ИнфОбОшибке);
            ExtExceptionToJournal(СтруктураОшибки);
            ВызватьИсключение(NewExtExceptionСтрока(ИнфОбОшибке));
        КонецПопытки;
    КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область РасчётINI

&НаСервере
Функция Saby_Команда_ВыполнитьINI(ПараметрыМетода, ДополнительныеПараметры )
	МодульОбъекта = ПолучитьМодульОбъекта();
	context_params	= get_prop(ПараметрыМетода, "context_params");
	ini_name 		= get_prop(ПараметрыМетода, "ini_name", "");
	ДанныеОбъекта	= get_prop(ПараметрыМетода, "ДанныеОбъекта");
	Результат = Неопределено;
	Если context_params = Неопределено Тогда
		context_params	= МодульОбъекта.ПроверитьНаличиеПараметровПодключения();
	КонецЕсли;
	
	ПараметрыВызоваБлокли	= Новый Соответствие();
	ПараметрыВызоваБлокли.Вставить("params", context_params );
	ПараметрыВызоваБлокли.Вставить("commands_result", get_prop(ДополнительныеПараметры, "commands_result", Новый Массив));
	ПараметрыВызоваБлокли.Вставить("current_block", get_prop(ДополнительныеПараметры, "step", Неопределено));
	ПараметрыВызоваБлокли.Вставить("endpoint","");
	ПараметрыВызоваБлокли.Вставить("operation_uuid", СокрЛП(Новый УникальныйИдентификатор));
	ПараметрыВызоваБлокли.Вставить("algorithm",ini_name);
	ConnectionId	= Неопределено;
	context_params.Свойство("ConnectionId", ConnectionId);
	ПараметрыВызоваБлокли.Вставить("connection_uuid", ConnectionId);
	ПараметрыВызоваБлокли.Вставить("object",Новый Соответствие());
	ВидОбъекта = Неопределено;
	Если ini_name	= "Документы_execute" Тогда
		action_ref		= Новый Структура;
		КомандаСБИС		= ДополнительныеПараметры["Название"];
		Документ		= ПараметрыВызова["Документы"][0]["Документ1С"];
		ВидОбъекта		= ?(ВложенияПоТипамОбъектов1С.Количество() > 0,ВложенияПоТипамОбъектов1С[0]["ВидОбъекта"], Неопределено);
		
		ВыбранныеПечатныеФормы = МодульОбъекта.ЗаполнитьСтруктуруПечатныхФормДляПередачи(ВложенияПоТипамОбъектов1С);
		Если Документ = Неопределено Тогда
			
			action_ref.Вставить("ИдИС", "");
			action_ref.Вставить("ТипИС", "");
			action_ref.Вставить("ИмяИС", "");
			action_ref.Вставить("ini_name", "");
			action_ref.Вставить("Название", СокрЛП(Документ));
			action_ref.Вставить("_print_forms", Неопределено);
			
		Иначе
			
			ТипМетаданных = ПолучитьТипМетаданных(Документ);
			action_ref.Вставить("ИдИС", СокрЛП(Документ.УникальныйИдентификатор()) );
			action_ref.Вставить("ТипИС", ТипМетаданных);
			action_ref.Вставить("ИмяИС", ВидОбъекта);
			action_ref.Вставить("ini_name", "СинхВыгрузка_"+ВидОбъекта);
			action_ref.Вставить("Название", СокрЛП(Документ) );
			
		КонецЕсли;		
		Если ВидОбъекта <> Неопределено Тогда
			Если ПустаяСтрока(ВидОбъекта) Тогда
				ВидОбъекта = "БезОбъекта";
			КонецЕсли;
			action_ref.Вставить("_print_forms", 
				?(ВыбранныеПечатныеФормы.Свойство(ВидОбъекта),ВыбранныеПечатныеФормы[ВидОбъекта],Новый Массив));
		КонецЕсли;
		
		ПараметрыВызоваБлокли.Вставить("Документы", ПараметрыВызова.Документы );
		ПараметрыВызоваБлокли.Вставить("Действие", ПараметрыВызова.Действие );
		ПараметрыВызоваБлокли.Вставить("Формы", get_prop(action_ref,"_print_forms", Новый Массив) );
		
	КонецЕсли;	
	
	Результат = МодульОбъекта.API_BLOCKLY_RUN(ПараметрыВызоваБлокли);
	
	Если get_prop(Результат["data"],"ОбъектовСОшибками", 0) > 0 Тогда
		Результат.status = "error";
		Результат["data"].Вставить("message", "Не удалось выполнить действие. Возникла ошибка");
	КонецЕсли;
	
	code			= 500;
	data			= get_prop(Результат, "data");
	error_detail	= get_prop(data, "detail");
	error_name	= get_prop(data, "message", "");
 	ВсегоОбъектов	= get_prop(data, "ВсегоОбъектов", 0);
	НаименованиеДействия = "EdoAction";
	ЭтоОшибка	= (Результат.status ="error");

	МассивОшибок	= Новый Массив;
	МассивУспехов	= Новый Массив;
	
	ДокументыМассив	= get_prop(data, "Результат");
	Если ДокументыМассив = Неопределено Тогда
		//Ошибка
		ЭлементСтатистики	= МодульОбъекта.local_helper_element_err(НаименованиеДействия, ТипСБИС, error_name, error_detail, data, code, ВсегоОбъектов);
    	МассивОшибок.Добавить(ЭлементСтатистики);
    ИначеЕсли ТипЗнч(ДокументыМассив) = Тип("Массив") Тогда
        //Корректное завершение
        Для каждого ДокЭлемент Из ДокументыМассив Цикл
        	ДанныеДокументаСБИС	= get_prop(ДокЭлемент, "ДокументСБИС");
        	ТипСБИС	= get_prop(ДанныеДокументаСБИС, "Тип", "");
			ЭлементСтатистики	= МодульОбъекта.local_helper_element_action(НаименованиеДействия, ТипСБИС, Новый Структура(), 1);
 			МассивУспехов.Добавить(ЭлементСтатистики);
		КонецЦикла;
	КонецЕсли;
	
	Если МассивОшибок.Количество() > 0 Тогда
		МодульОбъекта.local_helper_register_actions(context_params, МассивОшибок);
 	КонецЕсли;
	Если МассивУспехов.Количество() > 0 Тогда
		МодульОбъекта.local_helper_register_actions(context_params, МассивУспехов);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область ДействияОбъекта

#Область КомандаВыполнитьДействие

&НаКлиенте
Процедура КомандаВыполнитьДействиеЗавершение(Результат, Контекст) экспорт
	
	ЭтаФорма.Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область ПоказатьРезультатВыполнения

&НаКлиенте
Процедура ПоказатьРезультатВыполнения(ОбработчикРезультата, Результат, context_params, ПараметрыДействия)
	
	Если ТипЗнч(Результат) = Тип("Структура") или ТипЗнч(Результат) = Тип("Соответствие") Тогда
		Если Результат.status = "complete" Тогда
			ЗаголовокСообщения = "Фаза """ + ПараметрыДействия["Название"] + """";
			message = "выполнена успешно";
			КартинкаСообщения = КартинкаУспешно();
		ИначеЕсли Результат.status = "run" Тогда
			// Выполняем команду через оповещение
			Контекст = Новый Структура;
			Контекст.Вставить("Результат", Результат);
			Контекст.Вставить("context_params", context_params);
			Контекст.Вставить("ПараметрыДействия", ПараметрыДействия);
			Контекст.Вставить("ОбработчикРезультата", ОбработчикРезультата);
			
			ОбработчикСледующегоШага = Новый ОписаниеОповещения("ПерезапуститьВыполнениеНаСервереПослеВыполненияКомандыНаКлиенте", ЭтотОбъект, Контекст);
			ВыполнитьКоманды_Клиент(ОбработчикСледующегоШага, Результат.commands, Результат.commands_data);
			Возврат;
		ИначеЕсли Результат.status = "error" Тогда
			ЗаголовокСообщения = "Ошибка при выполнении "+ПараметрыДействия["Название"];
			КартинкаСообщения = КартинкаОшибка();
			Если Результат["data"] <> Неопределено Тогда
				message = Результат.data["message"];
				detail = Результат.data["detail"];
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Оповестить("Saby_ЗавершениеВыполнитьДействие", Результат, ЭтаФорма.ВладелецФормы);
	
	ПоказатьОповещениеПользователя(
		ЗаголовокСообщения,
		,
		СокрЛП(message)+" "+СокрЛП(detail),
		КартинкаСообщения,
		СтатусОповещенияПользователя.Важное,
		Новый УникальныйИдентификатор);
		
	ВыполнитьОбработкуОповещения(ОбработчикРезультата);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезапуститьВыполнениеНаСервереПослеВыполненияКомандыНаКлиенте(commands_result, Контекст) Экспорт
	
	Контекст.ПараметрыДействия.Вставить("commands_result", commands_result);
	Контекст.ПараметрыДействия.Вставить("step", Контекст.Результат.step);
	
	Контекст.Результат = ВыполнитьДействиеНаСервере("Документы_execute", Контекст.context_params, Контекст.ПараметрыДействия);
	
    ПоказатьРезультатВыполнения(Контекст.ОбработчикРезультата, Контекст.Результат, Контекст.context_params, Контекст.ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция ВыполнитьДействиеНаСервере(ini_name, context_params, ДополнительныеПараметры)
	ПараметрыМетода = Новый Структура("ДанныеОбъекта, ini_name, context_params", "", ini_name, context_params ); 
	
	Результат = Saby_Команда_ВыполнитьINI(ПараметрыМетода, ДополнительныеПараметры);
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область ПрикрепляемыеФайлы

#Область include_core_base_ЭДО_ВыборФайлаЗавершение_МетодыФормыВыполнитьДействие
#КонецОбласти

#Область include_core_base_ЭДО_ВыборФайлаЗавершение_ОбщийМетод
#КонецОбласти

&НаСервере
Функция ПолучитьИмяПрисоединенногоФайла(СсылкаНаПрисоединенныйФайл) Экспорт
	Возврат СсылкаНаПрисоединенныйФайл.Наименование;
КонецФункции

&НаКлиенте
Процедура ОбработкаВыбораВложения(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ТипЗнч(ВыбранныеФайлы) = Тип("Массив") Тогда
		Для Каждого СсылкаНаПрисоединенныйФайл Из ВыбранныеФайлы Цикл
			ВидОбъекта				= ПолучитьВидОбъекта();
			НоваяПФ					= ВложенияПоТипамОбъектов1С.Добавить();
			НоваяПФ.ОтметкаВыбора	= Истина;
			НоваяПФ.Представление	= ПолучитьИмяПрисоединенногоФайла(СсылкаНаПрисоединенныйФайл);
			НоваяПФ.ТипВложения     = "ПрисоединенныйФайл";
			НоваяПФ.ИндексКартинки	= 0;
			НоваяПФ.ВидОбъекта		= ВидОбъекта;
			НоваяПФ.Команда			= Новый Структура("Ссылка",СсылкаНаПрисоединенныйФайл);
			ЗаполнитьВложенияТекущегоТипаОбъекта(ВидОбъекта);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьФизЛицоСотрудника(Сотрудник)
	Возврат	Сотрудник.ФизическоеЛицо;
КонецФункции

&НаКлиенте
Процедура ДобавитьВложениеИзПрикреплёныхФайлов(Команда)
	
	СтандартнаяОбработка = Ложь;
	
	ВладелецФайла = ПараметрыВызова["Документы"][0]["Документ1С"];
	
	ЕстьСотрудники = ЕстьМетаданные("Справочники", "Сотрудники");
	Если ЕстьСотрудники И ТипЗнч(ВладелецФайла) = Тип("СправочникСсылка.Сотрудники") Тогда
		ВладелецФайла = ПолучитьФизЛицоСотрудника(ВладелецФайла);		
	КонецЕсли;
	
	Если ВладелецФайла = Неопределено Тогда
		//Владелеца нет.
		Возврат;
	КонецЕСли;
	// ???           
	
	ИмяДокумента      = ВРег(СокрЛП(ТипЗнч(ВладелецФайла)));   
	ФайлыИзРасширения = Найти(ИмяДокумента, "SABY") > 0;
	
	Если ФайлыИзРасширения Тогда 
		ИмяФормыВыбораФайла = "Обработка.Saby_РаботаСФайлами.Форма.ПрисоединенныеФайлы";
	Иначе 
		ИмяФормыВыбораФайла = "Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы"; 
	КонецЕсли;
			
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВладелецФайла",      ВладелецФайла);
	ПараметрыФормы.Вставить("ТолькоПросмотр",     Истина);
	ПараметрыФормы.Вставить("РежимВыбора",        Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор", Истина);

	ОповещениеЗавершения = Новый ОписаниеОповещения("ОбработкаВыбораВложения", ЭтаФорма);
	ОткрытьФорму(ИмяФормыВыбораФайла,
         ПараметрыФормы,
         ЭтаФорма,
         Новый УникальныйИдентификатор,
         ,,
		 ОповещениеЗавершения,
		 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВложениеНаСервере(ИмяТаблицы, ВидОбъекта, ТипВложения, Представление)
	мСтрокКУдалению = ЭтотОбъект[ИмяТаблицы].НайтиСтроки(Новый Структура("ВидОбъекта, ТипВложения, Представление", ВидОбъекта, ТипВложения, Представление));
	Если мСтрокКУдалению.Количество() > 0 Тогда
		//удаляем обратным перебором, т.к. индекс строк меняется
		ВсегоСтрок = мСтрокКУдалению.Количество() - 1;
		Для СчетСтрок = 0 По ВсегоСтрок Цикл
			СтрокаКУдалению = мСтрокКУдалению[ВсегоСтрок-СчетСтрок];
			СтрокаКУдалению = ЭтаФорма[ИмяТаблицы].НайтиПоИдентификатору(СтрокаКУдалению.ПолучитьИдентификатор());
			ЭтаФорма[ИмяТаблицы].Удалить(СтрокаКУдалению);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры	

&НаКлиенте
Процедура УдалитьВложение(Команда)
	ДанныеСтроки = ПолучитьЭлементыФормы().ВложенияТипаДокумента.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено ИЛИ ДанныеСтроки.ТипВложения = "ПечатнаяФорма" Тогда
		Возврат;
	КонецЕсли;
	//Удаление из общей таблицы
	УдалитьВложениеНаСервере("ВложенияПоТипамОбъектов1С", ДанныеСтроки.ВидОбъекта, ДанныеСтроки.ТипВложения, ДанныеСтроки.Представление);
	//Удаление из таблицы на форме
	УдалитьВложениеНаСервере("ВложенияТекущегоТипаОбъекта1С", ДанныеСтроки.ВидОбъекта, ДанныеСтроки.ТипВложения, ДанныеСтроки.Представление);
	ВложенияТипаДокументаПриИзменении(Неопределено);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьМетаданные(Тип, Имя)

	Возврат Метаданные[Тип].Найти(Имя) <> Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "AddonActionResponse" Тогда
		ОбработатьРезультатСобытия(Параметр);	
	КонецЕсли;

КонецПроцедуры
	
#КонецОбласти

#Область include_core_base_ЭДО_РаботаСТаблицейИсполнителей
#КонецОбласти

#Область include_core_base_Helpers_FormGetters
#КонецОбласти

#Область include_core_base_ФоновыеЗадания_МодульФоновогоЗаданияСерверСКлиента
#КонецОбласти

#Область include_BlocklyExecutor_base_Commands
#КонецОбласти

#Область include_core_base_Криптография_НаКлиенте1С_МодульФормы
#КонецОбласти

#Область include_core_base_Криптография_НаКлиенте1С
#КонецОбласти

#Область include_core_base_Helpers_Картинки
#КонецОбласти

#Область include_core_base_ОсобенностиПлатформы_МодульФормы
#КонецОбласти

#Область include_core_base_ЭДО_Form_ВыполнитьДействие_ОсобенностиПриложения
#КонецОбласти

#Область include_core_base_ФоновыеЗадания_МодульФоновогоЗаданияКлиент
#КонецОбласти

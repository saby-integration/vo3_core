
#Область include_core_base_Helpers_Константы
#КонецОбласти

&НаКлиенте
Процедура АвтоматическиеОперации(Команда) 
	ОткрытьФормуОбработки("РоботСписок",, ЭтаФорма);	
КонецПроцедуры


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// только для обработки
	МодульОбъекта = ПолучитьМодульОбъекта();
	ОбщиеПараметры = МодульОбъекта.ПриНачалеРаботы();	
	ЭлемФормы = ПолучитьЭлементыФормыНаСервере();
	
	ДобавитьИнформациюОВерсии(ЭлемФормы.ВерсияПродукта);
	Параметры.Свойство("Заголовок", Заголовок);
	АдресСтраницы	= "";
	АдресСтраницыССлужебнымиПараметрами = "";
	Параметры.Свойство("АдресСтраницы", АдресСтраницы);
	
	context_param = МодульОбъекта.НастройкиПодключенияПрочитать();
	Если Параметры.Свойство("context_param") Тогда
		// При авторизхации НастройкиПодключенияПрочитать может вернуть НЕОПРЕДЕЛЕНО, да и выбранный домен на форме авторизации отличается
		context_param = Параметры.context_param;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//60 секнд * 30 минут
	ПериодМеждуЗапрсамиТокенов = 60*15;
	
	//Проверить открытые окна, если они есть то и тикет получать не нужно
	Если context_param <> Неопределено Тогда
		ВремяПредыдущегоЗапросаТокена = get_prop(context_param, "last_token_time");
		Если ВремяПредыдущегоЗапросаТокена = Неопределено Тогда
			ВремяПредыдущегоЗапросаТокена = ТекущаяДата();
		КонецЕсли;
		Если НЕ ПроверитьЕстьЛиЕщеОткрытыеОкнаБраузера() И ТекущаяДата() - ВремяПредыдущегоЗапросаТокена >= ПериодМеждуЗапрсамиТокенов Тогда
			//Если Нет открытых окнон и прошло более 30 минут с момента открытия окна браузера
			context_param.Вставить("last_token_time", Неопределено);
		КонецЕсли;
	КонецЕсли;
	
	//1. Вначале это код исполняется!!!.
	
	// TODO в обработках делается по команде SETCONNECTIONINFO
	СтатусВерсии = ПолучитьИнформациюОВерсииПоУмолчанию();
	СтатусВерсии = ПолучитьСтатусВерсииНаФорме(Ложь, СтатусВерсии);
	ОбновитьИнформациюОВерсии(СтатусВерсии);
	
	//2. Затем этот. Хватит затирать.
	Если НЕ ПустаяСтрока(АдресСтраницы) Тогда
		СформироватьАдресСоСлужебнымиПараметрами()
	Иначе
		СформироватьАдресАддона();
	КонецЕсли;

	#Если ВебКлиент Тогда
		УстановитьРежимWebInWeb();
	#КонецЕсли
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ЭлементыФормы.ПолеHTMLДокумента.Перейти(АдресСтраницыССлужебнымиПараметрами);	
	#КонецЕсли 
КонецПроцедуры

&НаКлиенте
Функция ПроверитьЕстьЛиЕщеОткрытыеОкнаБраузера()
	ФормаНайдена = Ложь;

	//В режиме запуска ОбычноеПриложение возвращает Неопределено.
	ОкнаПриложения		= ПолучитьОкна();
	Если ОкнаПриложения <> Неопределено Тогда 
		Для каждого ОкноПриложения Из ОкнаПриложения Цикл
			//При открытии формы окна в ПолучитьОкна
			Для Каждого ФормаОкна Из ОкноПриложения.Содержимое Цикл
				Попытка 
					//Пока тут только выбранная итератором форма - форма, но воизбежание в дальнейшем ошибок
					//обернём в исключением. Мы же не знаем, что туда может 1ц положить
					ФормаНайдена = Найти(ФормаОкна.ИмяФормы, ".Browser") > 0;
					Если ФормаНайдена Тогда Прервать; КонецЕсли;
				Исключение
				КонецПопытки;
			КонецЦикла;
			Если ФормаНайдена Тогда Прервать; КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ФормаНайдена;
КонецФункции

#Область include_core_base_ОсобенностиПлатформы_УстановитьРежимWebInWeb
#КонецОбласти

&НаСервере
Функция СформироватьАдресАддона()
	МодульОбъекта = ПолучитьМодульОбъекта();
	api_url = get_prop(context_param, "api_url", МодульОбъекта.ПолучитьСервисПоУмолчанию());
	
	connection_info = МодульОбъекта.API_ADDON_READSYSTEMINFO(Неопределено);		
	АдресСтраницы = api_url+"/integration_config/1CBlockly/page/";
	// АдресСтраницы = АдресСтраницы + "ПриемНаРаботу?";
	АдресСтраницы = АдресСтраницы + "КадровыйУчет?";
	АдресСтраницыССлужебнымиПараметрами = АдресСтраницы;
	Для Каждого Элемент из connection_info Цикл 
		Если Не ЗначениеЗаполнено(Элемент.Значение) Тогда
			Продолжить;
		КонецЕсли;
		АдресСтраницыССлужебнымиПараметрами = АдресСтраницыССлужебнымиПараметрами + "&"+Элемент.Ключ + "=" + Элемент.Значение; 
	КонецЦикла;	
	АдресСтраницыССлужебнымиПараметрами = АдресСтраницыССлужебнымиПараметрами + "&debug=1";
	АдресСтраницыССлужебнымиПараметрами = АдресСтраницыССлужебнымиПараметрами + "&nocheck=1";
	//todo избавиться от типа объекта	
	//АдресСтраницыССлужебнымиПараметрами = АдресСтраницы;
	АдресСтраницы = АдресСтраницыССлужебнымиПараметрами; // для отладки
	Параметры.Свойство("Заголовок", ЛокализацияНазваниеПродукта());
КонецФункции

&НаСервере
Процедура СформироватьАдресСоСлужебнымиПараметрами()
	//60 секнд * 30 минут
	ПериодМеждуЗапрсамиТокенов = 60*15;
	
	МодульОбъекта = ПолучитьМодульОбъекта();
	
	АдресСтраницыССлужебнымиПараметрами = АдресСтраницы;
	Если Не ЭтоАдресСБИС(АдресСтраницы) Тогда
		Возврат;
	КонецЕсли;
	РазрешитьЗакрытиеФормы = Истина;//Установить в лож когда будет открыт редактор BLOKLY
	Если Найти(АдресСтраницыССлужебнымиПараметрами,"?") = 0 Тогда
		АдресСтраницыССлужебнымиПараметрами = АдресСтраницыССлужебнымиПараметрами + "?";
	КонецЕсли;
	Если Найти(АдресСтраницыССлужебнымиПараметрами,"&nocheck=1") = 0 Тогда
		АдресСтраницыССлужебнымиПараметрами = АдресСтраницыССлужебнымиПараметрами + "&nocheck=1";
	КонецЕсли;
	
	//Тикет получаем при открытии формы если нет других открытых форм браузера
	Если context_param <> Неопределено Тогда
		ВремяПредыдущегоЗапросаТокена = get_prop(context_param, "last_token_time");
		НеобходимТикет = Ложь;
		Если ВремяПредыдущегоЗапросаТокена = Неопределено Тогда
			НеобходимТикет = Истина;
			ВремяПредыдущегоЗапросаТокена = ТекущаяДата();
		КонецЕсли;
		Если ТекущаяДата() - ВремяПредыдущегоЗапросаТокена >= ПериодМеждуЗапрсамиТокенов  Тогда
			НеобходимТикет = Истина;
		КонецЕсли;
		
		Если НеобходимТикет Тогда
			Попытка
			   Тикет = МодульОбъекта.ПолучитьТикетТекущейСессии( context_param ); // если сессия не живая, значит пользователь получит окно аунтентификации
			Исключение
				ИнфоОбОшибке = ИнформацияОбОшибке();
				СтруктураОшибки = ExtExceptionAnalyse(ИнфоОбОшибке);
			КонецПопытки;
			АдресСтраницыССлужебнымиПараметрами = АдресСтраницыССлужебнымиПараметрами + ?(ЗначениеЗаполнено(Тикет), "&ticket=" + Тикет, "");
		КонецЕсли;
		//Обновим время обращения за тикетом
		context_param.Вставить("last_token_time", ВремяПредыдущегоЗапросаТокена);
		МодульОбъекта.НастройкиПодключенияЗаписать(context_param);
	КонецЕсли;
	
	ПолучитьЭлементыФормыНаСервере().АдресСтраницы.Подсказка = АдресСтраницыССлужебнымиПараметрами;
КонецПроцедуры


&НаКлиенте
Процедура ПоказатьЛог(Команда)
	ЭлементыФормочки = ПолучитьЭлементыФормы();
	ЭлементыФормочки.Лог.Видимость = НЕ ЭлементыФормочки.Лог.Видимость;
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьВБуфферОбмена(Данные)
	ЭлементыФормочки = ПолучитьЭлементыФормы();
	Окно = ЭлементыФормочки.Поле_HTML_Документа.Документ.ParentWindow;
	Окно.ClipboardData.SetData("Text", Данные);
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЛог(Команда)
	Лог.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКСправке(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "SabySignOut" Тогда
		Закрыть();
	ИначеЕсли ИмяСобытия = "Saby_ЗавершениеДлительнойОперации" Тогда
		Если Параметр <> Неопределено Тогда
			Результат = ПодготовитьРезультат(Параметр);
			ВернутьРезультат(Результат);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#Область include_core_base_Helpers_XDTO
#КонецОбласти

#Область include_core_base_БазовыеКомпоненты_Формы_Browser_FormEventsHandler
#КонецОбласти

#Область include_core_base_БазовыеКомпоненты_Формы_Browser_ProductEventsHandler
#КонецОбласти

#Область include_core_base_БазовыеКомпоненты_Формы_Browser_BrowserEventsHandler
#КонецОбласти

#Область include_core_base_ПроверкаВерсии_НаФорме
#КонецОбласти

#Область include_core_base_БазовыеКомпоненты_Формы_Browser_ОсобенностиПлатформы
#КонецОбласти

#Область include_core_base_Helpers_FormGetters
#КонецОбласти

#Область include_core_base_ОсобенностиПлатформы_МодульФормы
#КонецОбласти


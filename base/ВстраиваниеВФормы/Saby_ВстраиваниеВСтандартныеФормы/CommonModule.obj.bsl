#Область include_base_CommonModule_ИмяМодуляCore
#КонецОбласти

#Область include_base_ИмяОбработки
#КонецОбласти

#Область include_base_InformationRegister_ИмяРегистраСостояние
#КонецОбласти

#Область include_core_base_locale_ЛокализацияНазваниеПродукта
#КонецОбласти


#Область include_base_CommonModule_ИмяМодуляКомандыОбменаДляФормыКлиентНаСервере
#КонецОбласти

#Область include_core_base_ВстраиваниеВФормы_ЗахваченныеОбъекты
#КонецОбласти

#Область ОбщиеИСервисныеМетоды

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьТипСсылкиПоМетаданным(ОбъектМетаданных) 
	ТипСсылки = Неопределено;
	Если ОбщегоНазначения.ЭтоДокумент(ОбъектМетаданных) Тогда
		ТипСсылки = Тип("ДокументСсылка."+ОбъектМетаданных.Имя);
	ИначеЕсли ОбщегоНазначения.ЭтоСправочник(ОбъектМетаданных) Тогда
		ТипСсылки = Тип("СправочникСсылка."+ОбъектМетаданных.Имя);
	КонецЕсли;
	Возврат ТипСсылки;
КонецФункции // ПолучитьТипСсылкиПоМетаданным()

Функция ОпределитьТипМетаданныхИсточника(Контекст) Экспорт
	ТипОбъекта	= Неопределено;
	//Определяем по первому элементу. т.к. смешанных списков быть не должно то и
	//документы не могут быть по определению в одном списке со справочниками
	Для Каждого ТипИсточника Из Контекст.ТипыИсточников Цикл
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипИсточника); 
		ТипОбъекта	= ?(Метаданные.Справочники.Содержит(ОбъектМетаданных), "Справочник", ТипОбъекта);
		ТипОбъекта	= ?(ТипОбъекта = Неопределено И Метаданные.Документы.Содержит(ОбъектМетаданных), "Документ", ТипОбъекта);
		Прервать;
	КонецЦикла;	
	Возврат ТипОбъекта;
КонецФункции

#Область include_base_ОбъектыФормыИзПодсистемыКадры
#КонецОбласти


Функция ПринадлежитОбъектМетаданныхПодсистеме(ТипОбъекта, Подсистема)
	Возврат Подсистема.Состав.Содержит( Метаданные.НайтиПоТипу(ТипОбъекта) );
КонецФункции


//**** ФОРМА *****
Процедура ИзменитьЗапросДинамическогоСписка(Форма, ОтборыСписка, ДляВыбораСотрудников, ИмяРеквизитаСписок) Экспорт
	МодульCore = МодульCore();
	Если
		ЭтоФормаИсключения(Форма) 
		ИЛИ Не МодульCore.ТекущемуПользователюМожноРаботатьСРасширением() 
		ИЛИ Не МодульCore.ВключеноИспользованиеПодсистемыКЕДО()
		Тогда 
		Возврат; 
	КонецЕсли;
	//А затем наш код	
	ДобавитьКолонкиВДинамическийСписокПриИзмененииЗапроса(Форма, ИмяРеквизитаСписок);
КонецПроцедуры

Процедура ЗаполнитьТипыОбъектовОповещения(Форма)
	//Для конфигурация без полного использования функций БСП
	Если МодульCore().get_prop(Форма, "ТипыОбъектовОповещения") = Неопределено Тогда
		ДобавляемыеРеквизиты = Новый Массив;
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ТипыОбъектовОповещения", Новый ОписаниеТипов("СписокЗначений")));
		Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты,);
	Иначе
		Возврат;
	КонецЕсли;

	ТипОбъекта = ТипЗнч(ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(Форма.ИмяФормы));
	МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипОбъекта);

	Для Каждого РегистрируемыйДокумент Из МетаданныеОбъекта.РегистрируемыеДокументы Цикл
		Форма.ТипыОбъектовОповещения.Добавить(
			ТипЗнч(ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(РегистрируемыйДокумент.ПолноеИмя()).ПустаяСсылка()));
	КонецЦикла;
КонецПроцедуры

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПодготовитьСтруктуруОписанияФормы(Форма) Экспорт
	ОписаниеФормы = Новый Структура;
	ОписаниеФормы.Вставить("ИмяФормы",			Форма.ИмяФормы);
	ОписаниеФормы.Вставить("ТипыИсточников",	Новый Массив);
	ОписаниеФормы.Вставить("Форма",				Форма);

	ТипОбъекта			= ТипЗнч(ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(Форма.ИмяФормы));
	ОбъектМетаданных	= Метаданные.НайтиПоТипу(ТипОбъекта);
	ЭтоЖурналДокументов	= ОбщегоНазначения.ЭтоЖурналДокументов(ОбъектМетаданных);
	
	Если ЭтоЖурналДокументов Тогда
		ЗаполнитьТипыОбъектовОповещения(Форма);

		Попытка
			ТипыОбъектовОповещения = Форма.ТипыОбъектовОповещения;
		Исключение
			ТипыОбъектовОповещения = Новый Массив;
		КонецПопытки;
		Для каждого ТипМетаданных Из ТипыОбъектовОповещения Цикл
			ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипМетаданных.Значение);
            Если ОбъектМетаданных <> Неопределено Тогда
				ТипСсылки = ПолучитьТипСсылкиПоМетаданным(ОбъектМетаданных);
				Если ТипСсылки <> Неопределено Тогда
					ОписаниеФормы.ТипыИсточников.Добавить(ТипСсылки);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ТипСсылки = ПолучитьТипСсылкиПоМетаданным(ОбъектМетаданных);
		Если ТипСсылки <> Неопределено Тогда
			ОписаниеФормы.ТипыИсточников.Добавить(ТипСсылки);
		Иначе
			// КОРП 
			Если Форма.ИмяФормы = "Обработка.СписокСотрудников.Форма.ФормаСпискаСотрудников" Тогда
				// если мы тут то и тип справочника присутсвует
				ОписаниеФормы.ТипыИсточников.Добавить(Тип("СправочникСсылка.Сотрудники"));
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОписаниеФормы;
КонецФункции // ПодготовитьСтруктуруОписанияФормы()

//Ищем в элементах формы таблицу значений с типом данных Динамический список
Функция ПолучитьНаименованиеРеквизитаСписка(Форма) Экспорт
	КоличествоДинамическийхСписков = 0;
	ИмяЭлементаСписка = "";
	ИменаСписков = Новый Массив;
	
	Для Каждого ЭлементФормы Из Форма.Элементы Цикл
		Если ТипЗнч(ЭлементФормы) = Тип("ТаблицаФормы") Тогда
			Если НЕ ЭлементФормы.Видимость ИЛИ Найти(ЭлементФормы.ПутьКДанным, ".") > 0 Тогда Продолжить; КонецЕсли;
			Если ТипЗнч(Форма.ЭтотОбъект[ЭлементФормы.ПутьКДанным]) = Тип("ДинамическийСписок") Тогда
				ИменаСписков.Добавить(ЭлементФормы.Имя);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	//Мы договорились, что колонки добавляются только на форму с одним динамическим списком
	Если ИменаСписков.Количество() > 0 Тогда
		ИмяЭлементаСписка = ИменаСписков[0];
		Если ИменаСписков.Количество() > 1 Тогда
			//Ести видимых динамических списков на форме несколько 
			//отдадим предпочтение первому у кого в названии встречается слово - "Список"
			Для каждого ИмяСписка Из ИменаСписков Цикл
				Если Найти(ИмяСписка, "Список") > 0 Тогда
					ИмяЭлементаСписка = ИмяСписка;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Возврат ИмяЭлементаСписка;
КонецФункции // ПолучитьНаименованиеРеквизитаСписка()

Функция ЭтоФормаИсключения(Форма) Экспорт
	ИмяОбработки = ИмяОбработки();
	ФормыИсключения = Новый Массив();
 	ФормыИсключения.Добавить("ОбщаяФорма.ОсновнаяФормаРабочегоСтола");
 	ФормыИсключения.Добавить("Справочник.Сотрудники.ФормаСписка");
 	ФормыИсключения.Добавить("Справочник.Сотрудники.ФормаВыбора");
 	ФормыИсключения.Добавить("ЖурналДокументов.Взаимодействия.Форма.ФормаСписка"); //ERP на главном экране
 	ФормыИсключения.Добавить("Обработка."+ИмяОбработки+".Форма.ДокументыКЭДО");
	Результат = ФормыИсключения.Найти(Форма.ИмяФормы) <> Неопределено;
	Возврат Результат;
КонецФункции

Функция ЭтоФормаСписка(Форма) Экспорт
	Результат = Найти(Форма.ИмяФормы, ".ФормаСписка") > 0;
	Возврат Результат;
КонецФункции

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ИнициализироватьСтруктуруДопТаблицы()
	НазваниеПродукта = ЛокализацияНазваниеПродукта();
	СтруктураДопТаблицы = Новый Структура;
	СтруктураДопТаблицы.Вставить("ВременнаяТаблица", 	"");
	СтруктураДопТаблицы.Вставить("ТаблицаДанных");
	СтруктураДопТаблицы.Вставить("Псевдоним");
	СтруктураДопТаблицы.Вставить("СтруктураКолонок");
	СтруктураДопТаблицы.Вставить("ПостфиксКолонок",		НазваниеПродукта+"_Колонки_");
	СтруктураДопТаблицы.Вставить("ПоляСоединения",		Новый Структура());
	СтруктураДопТаблицы.Вставить("ИмяСпискаНаФорме",	"Список");
	
	Возврат СтруктураДопТаблицы;
КонецФункции

#КонецОбласти

#Область Команды

//*************************************
//Группа комманд 

// См. ПодключаемыеКомандыПереопределяемый.ПриОпределенииКомандПодключенныхКОбъекту
Процедура ДобавитьКоманды(НастройкиФормы, Источники, ПодключенныеОтчетыИОбработки, Команды) Экспорт

	ПолучитьСписокКоманд(НастройкиФормы["ТипыИсточников"], Команды);
	
	КлючиПараметровОбработчика = "Обработчик, МенеджерПечати, ЗаголовокФормы, СразуНаПринтер, ФорматСохранения,
	|ПереопределитьПользовательскиеНастройкиКоличества, ДополнитьКомплектВнешнимиПечатнымиФормами,
	|ФиксированныйКомплект, ДополнительныеПараметры";
	
КонецПроцедуры

Процедура ПолучитьСписокКоманд( Источники, Команды ) Экспорт 

	ЕстьКомандыДляСправочников = Ложь;
	ЕстьКомандыДляСпрСотрудники = Ложь;
	ЕстьКомандыДляДокументов   = Ложь;
	ВставитьКнопку	         = Ложь;
	Порядок = 1;
	
	Для Каждого ТипЗначения Из Источники Цикл
		
		ОбъектМетаданных			= Метаданные.НайтиПоТипу(ТипЗначения);
		ЕстьКомандыДляСправочников	= ЕстьКомандыДляСправочников ИЛИ Метаданные.Справочники.Содержит(ОбъектМетаданных);
		Если ЕстьКомандыДляСправочников Тогда
			ЕстьКомандыДляСпрСотрудники = ЕстьКомандыДляСпрСотрудники ИЛИ Найти(ОбъектМетаданных.Имя, "Сотрудники") > 0;
		КонецЕсли;
		ЕстьКомандыДляДокументов	= ЕстьКомандыДляДокументов ИЛИ Метаданные.Документы.Содержит(ОбъектМетаданных);
		Если ЕстьКомандыДляСправочников или ЕстьКомандыДляДокументов Тогда
			ВставитьКнопку = Истина;	
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	МассивТиповДокументов = Новый Массив();
	Для Каждого ТипДок Из Метаданные.Документы Цикл
		МассивТиповДокументов.Добавить(ТипДок);
	КонецЦикла;
	
	НазваниеПродукта = ЛокализацияНазваниеПродукта();
	ИмяКомандыОбменаДляФормыКлиент = ИмяКомандыОбменаДляФормыКлиент();
	
	Если ВставитьКнопку Тогда
		
		Порядок = Порядок + 1;			
		НоваяКоманда = Новый Структура;
		НоваяКоманда.Вставить("Имя",       НазваниеПродукта+"_ЗагрузкаДокументов");
		НоваяКоманда.Вставить("Заголовок", "Загрузить в "+ЛокализацияНазваниеПродукта()); 
		НоваяКоманда.Вставить("Действие",  ИмяКомандыОбменаДляФормыКлиент+".ЗагрузитьВСБИС");
		НоваяКоманда.Вставить("Отключена", Ложь);
		НоваяКоманда.Вставить("Порядок",   Неопределено);
		НоваяКоманда.Вставить("ИмяИни",    Неопределено);
			
		ДобавитьКомандуНаФорму1С(НоваяКоманда, Команды, МассивТиповДокументов, Порядок);

		Порядок = Порядок + 1;
		НоваяКоманда = Новый Структура;
		НоваяКоманда.Вставить("Имя",       НазваниеПродукта+"_ОткрытьВСБИС");
		НоваяКоманда.Вставить("Заголовок", "Открыть в "+ЛокализацияНазваниеПродукта()); 
		НоваяКоманда.Вставить("Действие",  ИмяКомандыОбменаДляФормыКлиент+".ПриНажатииОткрытьВСБИСПолучитьUID");
		НоваяКоманда.Вставить("Отключена", Ложь);
		НоваяКоманда.Вставить("Порядок",   Неопределено);
		НоваяКоманда.Вставить("ИмяИни",    Неопределено);

		ДобавитьКомандуНаФорму1С(НоваяКоманда, Команды, МассивТиповДокументов, Порядок);		
		
		Порядок = Порядок + 1;
		НоваяКоманда = Новый Структура;			
		НоваяКоманда.Вставить("Имя",       НазваниеПродукта+"_ВыгрузитьВложенияИзСБИС");
		НоваяКоманда.Вставить("Заголовок", "Выгрузить вложения из "+ЛокализацияНазваниеПродукта()); 
		НоваяКоманда.Вставить("Действие",  ИмяКомандыОбменаДляФормыКлиент+".ПриНажатииВыгрузитьВложенияИзСБИС");
		НоваяКоманда.Вставить("Отключена", Ложь);
		НоваяКоманда.Вставить("Порядок",   Неопределено);
		НоваяКоманда.Вставить("ИмяИни",    Неопределено);
		
		ДобавитьКомандуНаФорму1С(НоваяКоманда, Команды, МассивТиповДокументов, Порядок);
		
		Если ЕстьКомандыДляДокументов Тогда
		
			
			Порядок = Порядок + 1;
			НоваяКоманда = Новый Структура;			
			НоваяКоманда.Вставить("Имя",       НазваниеПродукта+"_ОбновитьСтатусы");
			НоваяКоманда.Вставить("Заголовок", "Обновить статусы"); 
			НоваяКоманда.Вставить("Действие",  ИмяКомандыОбменаДляФормыКлиент+".ПриНажатииОбновитьСтатусы");
			НоваяКоманда.Вставить("Отключена", Ложь);
			НоваяКоманда.Вставить("Порядок",   Неопределено);
			НоваяКоманда.Вставить("ИмяИни",    Неопределено);
					
			ДобавитьКомандуНаФорму1С(НоваяКоманда, Команды, МассивТиповДокументов, Порядок);
			
		КонецЕсли;	
		
		Если ЕстьКомандыДляСпрСотрудники Тогда
			Порядок = Порядок + 1;	
					НоваяКоманда = Новый Структура;
			НоваяКоманда.Вставить("Имя",       НазваниеПродукта+"_УчаствуетВКЭДО");
			НоваяКоманда.Вставить("Заголовок", "Установить/Снять признак КЭДО"); 
			НоваяКоманда.Вставить("Действие",  ИмяКомандыОбменаДляФормыКлиент+".УстановитьПризнакУчаствуетВКЭДО");
			НоваяКоманда.Вставить("Отключена", Ложь);
			НоваяКоманда.Вставить("Порядок",   Неопределено);
			НоваяКоманда.Вставить("ИмяИни",    Неопределено);
				
			ДобавитьКомандуНаФорму1С(НоваяКоманда, Команды, МассивТиповДокументов, Порядок);
			
			Порядок = Порядок + 1;	
					НоваяКоманда = Новый Структура;
			НоваяКоманда.Вставить("Имя",       НазваниеПродукта+"_ПолучитьПризнакКЭДО");
			НоваяКоманда.Вставить("Заголовок", "Получить признак КЭДО из "+ НазваниеПродукта); 
			НоваяКоманда.Вставить("Действие",  ИмяКомандыОбменаДляФормыКлиент+".ПолучитьПризнакУчаствуетВКЭДО");
			НоваяКоманда.Вставить("Отключена", Ложь);
			НоваяКоманда.Вставить("Порядок",   Неопределено);
			НоваяКоманда.Вставить("ИмяИни",    Неопределено);
				
			ДобавитьКомандуНаФорму1С(НоваяКоманда, Команды, МассивТиповДокументов, Порядок);
		КонецЕсли;
		
		Порядок = Порядок + 1;		
		НоваяКоманда = Новый Структура;			
		НоваяКоманда.Вставить("Имя",       НазваниеПродукта+"_Задачи");
		НоваяКоманда.Вставить("Заголовок", "Задачи"); 
		НоваяКоманда.Вставить("Действие",  ИмяКомандыОбменаДляФормыКлиент+".ПриНажатииЗадачи");
		НоваяКоманда.Вставить("Отключена", Ложь);
		НоваяКоманда.Вставить("Порядок",   Неопределено);
		НоваяКоманда.Вставить("ИмяИни",    Неопределено);
		
		ДобавитьКомандуНаФорму1С(НоваяКоманда, Команды, МассивТиповДокументов, Порядок);		

		
		Если ЕстьКомандыДляСпрСотрудники Тогда
			Порядок = Порядок + 1;	
					НоваяКоманда = Новый Структура;
			НоваяКоманда.Вставить("Имя",       НазваниеПродукта+"_ОткрытьЖурналДокументовКЭДОСФильтромПоОбъектам");
			НоваяКоманда.Вставить("Заголовок", "Документы КЭДО"); 
			НоваяКоманда.Вставить("Действие",  ИмяКомандыОбменаДляФормыКлиент+".ОткрытьЖурналДокументовКЭДОСФильтромПоОбъектам");
			НоваяКоманда.Вставить("Отключена", Ложь);
			НоваяКоманда.Вставить("Порядок",   Неопределено);
			НоваяКоманда.Вставить("ИмяИни",    Неопределено);
				
			ДобавитьКомандуНаФорму1С(НоваяКоманда, Команды, МассивТиповДокументов, Порядок);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры
	
Процедура ДобавитьКомандуНаФорму1С(Команда, Команды, МассивТиповДокументов, Порядок)
	
	НазваниеПродукта = ЛокализацияНазваниеПродукта();
	ПодключаемаяКоманда = Команды.Добавить();
	ПодключаемаяКоманда.Вид                      = НазваниеПродукта+"_КОМАНДЫ"; //ВидПодключаемойКоманды();
	ПодключаемаяКоманда.Представление            = Команда.Заголовок;
	ПодключаемаяКоманда.Порядок                  = Порядок;
	ПодключаемаяКоманда.ТолькоВоВсехДействиях    = Ложь;
	ПодключаемаяКоманда.ТипПараметра             = Новый ОписаниеТипов(МассивТиповДокументов);
	ПодключаемаяКоманда.Назначение               = НазваниеПродукта;
	ПодключаемаяКоманда.ФункциональныеОпции      = "";
	ПодключаемаяКоманда.УсловияВидимости         = Новый Массив(); 
	ПодключаемаяКоманда.ИзменяетВыбранныеОбъекты = Ложь;
	ПодключаемаяКоманда.МножественныйВыбор       = Истина;
	ПодключаемаяКоманда.РежимЗаписи              = "НеЗаписывать";
	ПодключаемаяКоманда.ТребуетсяРаботаСФайлами  = Ложь;
	ПодключаемаяКоманда.ИзменяетВыбранныеОбъекты = Ложь;
	ПодключаемаяКоманда.Менеджер                 = "";
	ПодключаемаяКоманда.ИмяФормы                 = "";
	ПодключаемаяКоманда.ИмяПараметраФормы        = "";
	ПодключаемаяКоманда.ПараметрыФормы           = Новый Структура("ИмяИни", Команда.ИмяИни);

	ПодключаемаяКоманда.Обработчик               = Команда.Действие;
	ПодключаемаяКоманда.ДополнительныеПараметры  = Новый Структура();
	
КонецПроцедуры	

Функция ПроисходилЛиОбменДокументов( МассивСсылокНаДокументы, ДопПараметры=Неопределено) Экспорт 
	Обработка = Обработки[ИмяОбработки()].Создать();	
	Результат = Обработка.ПроисходилЛиОбменДокументов(МассивСсылокНаДокументы, ДопПараметры);	
	Возврат Результат; 
	
КонецФункции

Функция ПрочитатьСписокИнишекПоТипуИС(ТипИС, Действие = Неопределено) Экспорт 
	
	// Метод на вход будет получать ИмяИС и искать все инишки согласно блоку WORKSPACE META.
	// в нем будет передаваться title с красивым названием и в дальнейшем это название будет пришиваться к кнопке
	// например "Загрузить в СБИС", "Загрузить в СБИС как сотрудник 
	
	Результат = Новый Массив;
	Если ТипИС = "Сотрудники" Тогда
		ТранспортБлокли = Обработки[ИмяОбработки()].Создать();
		
		context_params = ТранспортБлокли.НастройкиПодключенияПрочитать();
		мИниФайлов	= Новый Массив();
		мИниФайлов.Добавить(Новый Структура("type, name", "Blockly", "Blockly_Сотрудники_read")); 
		мИниФайлов.Добавить(Новый Структура("type, name", "Blockly", "Blockly_ПрочийКадровыйДокументСотрудники_read"));
		
		params	= Новый Структура("props, ini",Новый Структура("id, type_data", context_params.ConnectionId, 1),мИниФайлов,);
		res = ТранспортБлокли.local_helper_integration_api(context_params, "IntegrationConnection.ReadConnection", params);
		
		Для Каждого _ини Из res["data"] Цикл
			title = СтрЗаменить(СтрЗаменить(_ини.Значение["data_name"],"Blockly_",""),"_read","");
			ini_name = СтрЗаменить(СтрЗаменить(_ини.Значение["data_name"],"Blockly_",""),"_read","");
			Результат.Добавить(Новый Структура("title,ini_name,xml",title,ini_name,_ини.Значение["data"] ));
		КонецЦикла;	 
		
	Иначе
		Результат.Добавить(Новый Структура); // здесь будут инишки в случае документов. Сейчас такого нет.
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции	

Функция СформироватьУРЛСТикетом(УрлРесурса, Тикет)
	
	ПосОРГ3 = СтрНайти(УрлРесурса, "&org=3");
	Если ПосОРГ3 > 0 Тогда
		УрлРесурса	= Сред(УрлРесурса, 1, ПосОРГ3 - 1);
	КонецЕсли;				
	
	УрлРесурса = УрлРесурса + ?(ЗначениеЗаполнено(Тикет), "&ticket=" + Тикет, "");
	
	Возврат УрлРесурса;
	
КонецФункции

Функция ПолучитьТикет(context_params = Неопределено ) Экспорт
	
	Если context_params = Неопределено Тогда
		context_params = МодульCore().НастройкиПодключенияПрочитать();
	КонецЕсли;
	
	ТокенSID	= Новый Структура("sid", context_params.session );
	Обработка = Обработки[ИмяОбработки()].Создать();
	Тикет_ = Обработка.local_helper_api(context_params, "САП.GetTicketForCurrentSid", ТокенSID );
	Тикет	= "";
	
	Если ТипЗнч(Тикет_) = Тип("Строка") Тогда
		Тикет	= Тикет_;
	КонецЕсли;
	
	Возврат Тикет; 
	
КонецФункции

Функция ПолучитьССылкиНаДокументыВИнтеграции(МассивИсточникДанных, ПолучитьТикет = Ложь ) Экспорт
	
	Обработка	= Обработки[ИмяОбработки()].Создать();
	Результат = Обработка.ПолучитьССылкиНаДокументыВИнтеграции(МассивИсточникДанных, ПолучитьТикет);

	Возврат Результат;
	
КонецФункции

Функция ПолучитьAPI3СсылкуИзСсылкиНаОбъект(СсылкаНаОбъект, API3Объект = Неопределено)
	
	Если Не ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		Возврат неопределено;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(API3Объект) Тогда
		API3Объект = Новый Структура("ИдИС, ИмяИС, _Представление");
	КонецЕсли; 
	
	ТипЗначения = ТипЗнч(СсылкаНаОбъект);
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗначения); 
	
	Если ОбъектМетаданных <> Неопределено Тогда
		
		Если Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
			ТипМетаданных = "Справочники";
			API3Объект["ИдИС"] = XMLСтрока(СсылкаНаОбъект.УникальныйИдентификатор());
		ИначеЕсли Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
			ТипМетаданных = "Документы";
			API3Объект["ИдИС"] = XMLСтрока(СсылкаНаОбъект.УникальныйИдентификатор());
		ИначеЕсли Метаданные.Перечисления.Содержит(ОбъектМетаданных) Тогда
			ТипМетаданных = "Перечисления";
			API3Объект["ИдИС"] = XMLСтрока(СсылкаНаОбъект);
		КонецЕсли;  
		
		API3Объект["ИмяИС"] = ТипМетаданных + "."  + ОбъектМетаданных.Имя;
		API3Объект["_Представление"] = СокрЛП(СсылкаНаОбъект); 
		
	КонецЕсли;  
	
	Возврат API3Объект;
	
КонецФункции

Функция ПолучитьДействияДляОбъекта(СсылкаНаОбъект, context_params) Экспорт
	
	Обработка = Обработки[ИмяОбработки()].Создать();
	Результат = Обработка.ПолучитьДействияДляОбъекта(СсылкаНаОбъект, context_params);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСписокРегламентов(ВидОбъекта) Экспорт 
	МодульОбъекта = Обработки[ИмяОбработки()].Создать();
	context_params	= МодульОбъекта.ПроверитьНаличиеПараметровПодключения();
	
	ТипыДокументов = ПолучитьИзОбъекта1СОбъектИнтеграции(ВидОбъекта);
		
	Возврат МодульОбъекта.local_helper_regl_get_by_types(context_params, ТипыДокументов);
КонецФункции 

Функция ПолучитьИзОбъекта1СОбъектИнтеграции(ВидОбъекта)
	СписокОбъектов = Новый Массив();
	Если ВидОбъекта = "БольничныйЛист" Тогда
		СписокОбъектов.Добавить("Allowance");
	ИначеЕсли ВидОбъекта = "ГрафикОтпусков" Тогда
		СписокОбъектов.Добавить("Согласование");
	ИначеЕсли ВидОбъекта = "ГрафикОтпусковОрганизаций" Тогда
		СписокОбъектов.Добавить("Согласование");
	ИначеЕсли ВидОбъекта = "ДоговорРаботыУслуги" Тогда
		СписокОбъектов.Добавить("GphContract");
	ИначеЕсли ВидОбъекта = "ИзменениеГрафикаРаботыСписком" Тогда
		СписокОбъектов.Добавить("ИзмененияОклада");
	ИначеЕсли ВидОбъекта = "ИзменениеОплатыТруда" Тогда
		СписокОбъектов.Добавить("ИзмененияОклада");
	ИначеЕсли ВидОбъекта = "ИзменениеПлановыхНачислений" Тогда
		СписокОбъектов.Добавить("ИзмененияОклада");
	ИначеЕсли ВидОбъекта = "ИндексацияЗаработка" Тогда
		СписокОбъектов.Добавить("Indexation");
	ИначеЕсли ВидОбъекта = "КадровыйПеревод" Тогда
		СписокОбъектов.Добавить("ИзмененияДолжности");
	ИначеЕсли ВидОбъекта = "КадровыйПереводСписком" Тогда
		СписокОбъектов.Добавить("ИзмененияДолжности");
	ИначеЕсли ВидОбъекта = "КадровоеПеремещение" Тогда
		СписокОбъектов.Добавить("ИзмененияДолжности");
	ИначеЕсли ВидОбъекта = "КадровоеПеремещениеОрганизаций" Тогда
		СписокОбъектов.Добавить("ИзмененияДолжности");
	ИначеЕсли ВидОбъекта = "Изменения" Тогда
		СписокОбъектов.Добавить("ИзмененияДолжности");
	ИначеЕсли ВидОбъекта = "Командировка" Тогда
		СписокОбъектов.Добавить("BusinessTrip");
	ИначеЕсли ВидОбъекта = "КомандировкиСотрудников" Тогда
		СписокОбъектов.Добавить("BusinessTrip");
	ИначеЕсли ВидОбъекта = "ОплатаПоСреднемуЗаработку" Тогда
		СписокОбъектов.Добавить("Отпуск");
	ИначеЕсли ВидОбъекта = "ОплатаПоСреднемуЗаработкуСписком" Тогда
		СписокОбъектов.Добавить("Отпуск");
	ИначеЕсли ВидОбъекта = "Отгул" Тогда
		СписокОбъектов.Добавить("Отгул");
	ИначеЕсли ВидОбъекта = "ОтгулСписком" Тогда
		СписокОбъектов.Добавить("Отгул");
	ИначеЕсли ВидОбъекта = "Отпуск" Тогда
		СписокОбъектов.Добавить("Отпуск");
	ИначеЕсли ВидОбъекта = "ОтпускаСотрудников" Тогда
		СписокОбъектов.Добавить("Отпуск");
	ИначеЕсли ВидОбъекта = "ОтпускБезСохраненияОплаты" Тогда
		СписокОбъектов.Добавить("Отпуск");
	ИначеЕсли ВидОбъекта = "ОтпускБезСохраненияОплатыСписком" Тогда
		СписокОбъектов.Добавить("Отпуск");
	ИначеЕсли ВидОбъекта = "ОплатаДнейУходаЗаДетьмиИнвалидами" Тогда
		СписокОбъектов.Добавить("Отпуск");
	ИначеЕсли ВидОбъекта = "ОтпускаОрганизаций" Тогда
		СписокОбъектов.Добавить("Отпуск");
	ИначеЕсли ВидОбъекта = "ОтпускПоУходуЗаРебенком" Тогда
		СписокОбъектов.Добавить("Allowance");
	ИначеЕсли ВидОбъекта = "ПереводНаРаботуСКоронавирусом" Тогда
		СписокОбъектов.Добавить("ИзмененияДолжности");
	ИначеЕсли ВидОбъекта = "ПеремещениеВДругоеПодразделение" Тогда
		СписокОбъектов.Добавить("ИзмененияДолжности");
	ИначеЕсли ВидОбъекта = "ПеремещениеМеждуТерриториями" Тогда
		СписокОбъектов.Добавить("ИзмененияДолжности");
	ИначеЕсли ВидОбъекта = "ПереносОтпуска" Тогда
		СписокОбъектов.Добавить("PlanVacationScheduleChange");
	ИначеЕсли ВидОбъекта = "ПриемНаРаботу" Тогда
		СписокОбъектов.Добавить("ПриемНаРаботу");
	ИначеЕсли ВидОбъекта = "ПриемНаРаботуСписком" Тогда
		СписокОбъектов.Добавить("ПриемНаРаботу");
	ИначеЕсли ВидОбъекта = "ПриемНаРаботуВОрганизацию" Тогда
		СписокОбъектов.Добавить("ПриемНаРаботу");
	ИначеЕсли ВидОбъекта = "Прием" Тогда
		СписокОбъектов.Добавить("ПриемНаРаботу");
	ИначеЕсли ВидОбъекта = "НачислениеПоБольничномуЛисту" Тогда
		СписокОбъектов.Добавить("Allowance");
	ИначеЕсли ВидОбъекта = "ПрогулНеявка" Тогда
		СписокОбъектов.Добавить("Прогул");
		СписокОбъектов.Добавить("Allowance");
	ИначеЕсли ВидОбъекта = "ПрогулНеявкаСписком" Тогда
		СписокОбъектов.Добавить("Прогул");
		СписокОбъектов.Добавить("Allowance");
	ИначеЕсли ВидОбъекта = "НеявкиИБолезниОрганизаций" Тогда
		СписокОбъектов.Добавить("Прогул");
		СписокОбъектов.Добавить("Allowance");
	ИначеЕсли ВидОбъекта = "ОтсутствияНаРабочемМесте" Тогда
		СписокОбъектов.Добавить("Прогул");
		СписокОбъектов.Добавить("Allowance");
	ИначеЕсли ВидОбъекта = "РаботаВВыходныеИПраздничныеДни" Тогда
		СписокОбъектов.Добавить("Переработка");
	ИначеЕсли ВидОбъекта = "РаботаСверхурочно" Тогда
		СписокОбъектов.Добавить("Переработка");
	ИначеЕсли ВидОбъекта = "РегистрацияПереработок" Тогда
		СписокОбъектов.Добавить("Переработка");
	ИначеЕсли ВидОбъекта = "ТабельУчетаРабочегоВремени" Тогда
		СписокОбъектов.Добавить("ТабельДокумент");
	ИначеЕсли ВидОбъекта = "Увольнение" Тогда
		СписокОбъектов.Добавить("ПриказНаУвольнение");
	ИначеЕсли ВидОбъекта = "УвольнениеСписком" Тогда
		СписокОбъектов.Добавить("ПриказНаУвольнение");
	ИначеЕсли ВидОбъекта = "УвольнениеИзОрганизаций" Тогда
		СписокОбъектов.Добавить("ПриказНаУвольнение");
	ИначеЕсли ВидОбъекта = "МатериальнаяПомощь" Тогда
		СписокОбъектов.Добавить("НачисленияПоЗарплате");
	ИначеЕсли ВидОбъекта = "Премия" Тогда
		СписокОбъектов.Добавить("Поощрение");
	ИначеЕсли ВидОбъекта = "ПремииРаботниковОрганизаций" Тогда
		СписокОбъектов.Добавить("Поощрение");
	ИначеЕсли ВидОбъекта = "ПриказОПоощрении" Тогда
		СписокОбъектов.Добавить("Поощрение");
	ИначеЕсли ВидОбъекта = "Совмещение" Тогда
		СписокОбъектов.Добавить("CombinationPositions");
	ИначеЕсли ВидОбъекта = "АктПриемкиВыполненныхРаботОказанныхУслуг" Тогда
		СписокОбъектов.Добавить("GphAct");
	ИначеЕсли ВидОбъекта = "АктыПриемкиВыполненныхРабот" Тогда
		СписокОбъектов.Добавить("GphAct");
	ИначеЕсли ВидОбъекта = "Договор" Тогда
		СписокОбъектов.Добавить("GphContract");
	ИначеЕсли ВидОбъекта = "ПростойСотрудников" Тогда
		СписокОбъектов.Добавить("Простой");
	ИначеЕсли ВидОбъекта = "ОтменаСовмещения" Тогда
		СписокОбъектов.Добавить("CombinationCancel");
	ИначеЕсли ВидОбъекта = "АвансовыйОтчет" Тогда
		СписокОбъектов.Добавить("АвансОтчет");
	ИначеЕсли ВидОбъекта = "ПоступлениеТоваровУслуг" Тогда
		СписокОбъектов.Добавить("ДокОтгрВх");
	ИначеЕсли ВидОбъекта = "ПриобретениеТоваровУслуг" Тогда
		СписокОбъектов.Добавить("ДокОтгрВх");
	ИначеЕсли ВидОбъекта = "НевыходыВОрганизациях" Тогда
		СписокОбъектов.Добавить("Прогул");
		СписокОбъектов.Добавить("Allowance");
		СписокОбъектов.Добавить("Отпуск");
	Иначе
		СписокОбъектов.Добавить(ВидОбъекта);
	КонецЕсли;
	Возврат СписокОбъектов;
КонецФункции	

Процедура ДобавитьКнопкуВСправочники() Экспорт
	
КонецПроцедуры

Процедура ДобавитьКнопкуВДокументы() Экспорт
	
КонецПроцедуры

Процедура ДобавитьКнопкуВЖурналДокументов() Экспорт
	
КонецПроцедуры

#Область include_kedo_base_ПодготовкаДанных_РасчетныйЛисток
#КонецОбласти

#КонецОбласти

#Область КолонкиСостояния

/////********************************************
// КОЛОНКИ СОСТОЯНИ

//Точка Входа - ДобавитьКолонкиВДинамическийСписок


Процедура ЗаполнитьСтруктуруПолейДляКолонкиКЭДО(Контекст, НаименованиеРеквизитаСписок, ПарамтерыДопТаблицы)
	ПоляСоединения = Новый Соответствие;
	ПоляСоединения.Вставить(ПарамтерыДопТаблицы.ИмяКолонкиЛевогоСоединения, "Сотрудник");
	ПарамтерыДопТаблицы.Вставить("ПоляСоединения", ПоляСоединения);
	НазваниеПродукта = ЛокализацияНазваниеПродукта();

	МассивКолонок = Новый Массив;
	КолонкаДопТаблицы = Новый Структура;
	КолонкаДопТаблицы.Вставить("Имя",				"КЭДО");
	КолонкаДопТаблицы.Вставить("ПутьКДанным",		"ЕСТЬNULL("+ПарамтерыДопТаблицы.Псевдоним+".ИндексКартинки, 0)" );
	КолонкаДопТаблицы.Вставить("Заголовок",			"КЭДО");
	КолонкаДопТаблицы.Вставить("Картинка",			БиблиотекаКартинок[НазваниеПродукта+"_Bird"]);
	КолонкаДопТаблицы.Вставить("ОтображатьНаФорме",Истина);
	МассивКолонок.Добавить(КолонкаДопТаблицы);
	
	//КолонокаДопТаблицы = Новый Структура;
	//КолонокаДопТаблицы.Вставить("Имя",				"КЭДО");
	//КолонокаДопТаблицы.Вставить("ПутьКДанным",		"ЕСТЬNULL("+ПарамтерыДопТаблицы.Псевдоним+".КЭДО, Ложь)");
	//КолонокаДопТаблицы.Вставить("Заголовок",			"КЭДО");
	//КолонокаДопТаблицы.Вставить("ОтображатьНаФорме",	Истина);
	//МассивКолонок.Добавить(КолонокаДопТаблицы);

	ПарамтерыДопТаблицы.Вставить("СтруктураКолонок", МассивКолонок);
КонецПроцедуры

Процедура ДобавитьКолонкиСтатусаКЕДО(Контекст, НаименованиеРеквизитаСписок, ИмяКолонкиЛевогоСоединения="Сотрудник", context_params=Неопределено)
	ТекстЗапросаКЭДО = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|ДС.Объект КАК Сотрудник,
	|ВЫБОР КОГДА ДС.Значение = ИСТИНА
	|	ТОГДА 1
	|	ИНАЧЕ 0
	|КОНЕЦ КАК ИндексКартинки,
	|ДС.Значение КАК КЭДО
	|ПОМЕСТИТЬ СвойстваКЭДО
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ДС
	|ГДЕ
	|	ДС.Свойство.Имя = ""КЭДО""
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
    |";
	
	ПарамтерыДопТаблицы = ИнициализироватьСтруктуруДопТаблицы();
	ПарамтерыДопТаблицы.Вставить("ТаблицаДанных",		"СвойстваКЭДО");
	ПарамтерыДопТаблицы.Вставить("Псевдоним",			"СвойстваКЭДО");
	ПарамтерыДопТаблицы.Вставить("ИмяСпискаНаФорме",	НаименованиеРеквизитаСписок);
	ПарамтерыДопТаблицы.Вставить("ВременнаяТаблица",	ТекстЗапросаКЭДО);
	ПарамтерыДопТаблицы.Вставить("ИмяКолонкиЛевогоСоединения",	ИмяКолонкиЛевогоСоединения);
	ЗаполнитьСтруктуруПолейДляКолонкиКЭДО(Контекст, НаименованиеРеквизитаСписок, ПарамтерыДопТаблицы);
	УспешноеВыполнение = ИзменитьЗапросДинамическогоСписока(Контекст.Форма, ПарамтерыДопТаблицы);
	Если УспешноеВыполнение Тогда
		УспешноеВыполнение = ДобавитьКолонкиНаФорму(Контекст.Форма, ПарамтерыДопТаблицы);
	КонецЕсли;
КонецПроцедуры


//Подготовка структуры объединяемых данных
Процедура ЗаполнитьСтруктуруПолейДляКолонокСостоянияОбъектов(Контекст, НаименованиеРеквизитаСписок, ПарамтерыДопТаблицы)
	ПоляСоединения		= Новый Соответствие;
	ПоляСоединения.Вставить(ПарамтерыДопТаблицы.ИмяКолонкиЛевогоСоединения, "Объект");
	ПарамтерыДопТаблицы.Вставить("ПоляСоединения", ПоляСоединения);
	
	МассивКолонок		= Новый Массив;
	НазваниеПродукта = ЛокализацияНазваниеПродукта();
	
	КолонкаДопТаблицы	= Новый Структура;
	КолонкаДопТаблицы.Вставить("Имя",				"СостояниеКартинка");
	КолонкаДопТаблицы.Вставить("ПутьКДанным",		"ЕСТЬNULL("+ПарамтерыДопТаблицы.Псевдоним+".Состояние.ИндексКартинки, 10)" );
	КолонкаДопТаблицы.Вставить("Заголовок",			НазваниеПродукта);
	КолонкаДопТаблицы.Вставить("Картинка",			БиблиотекаКартинок[НазваниеПродукта+"_Состояния"]);
	КолонкаДопТаблицы.Вставить("ОтображатьНаФорме",	Истина);
	МассивКолонок.Добавить(КолонкаДопТаблицы);
	
	КолонкаДопТаблицы	= Новый Структура;
	КолонкаДопТаблицы.Вставить("Имя",				"Состояние");
	КолонкаДопТаблицы.Вставить("ПутьКДанным",		"ЕСТЬNULL("+ПарамтерыДопТаблицы.Псевдоним+".Состояние, НЕОПРЕДЕЛЕНО)" );
	КолонкаДопТаблицы.Вставить("Заголовок",			"Состояние "+НазваниеПродукта);
	КолонкаДопТаблицы.Вставить("ОтображатьНаФорме",	Ложь);
	МассивКолонок.Добавить(КолонкаДопТаблицы);

	КолонкаДопТаблицы = Новый Структура;
	КолонкаДопТаблицы.Вставить("Имя",				"АктивныйЭтап");
	КолонкаДопТаблицы.Вставить("ПутьКДанным",		"ЕСТЬNULL("+ПарамтерыДопТаблицы.Псевдоним+".АктивныйЭтап, НЕОПРЕДЕЛЕНО)" );
	КолонкаДопТаблицы.Вставить("Заголовок",			"Активный этап");
	КолонкаДопТаблицы.Вставить("ОтображатьНаФорме",	Истина);
	МассивКолонок.Добавить(КолонкаДопТаблицы);
	
	ПарамтерыДопТаблицы.Вставить("СтруктураКолонок", МассивКолонок);
КонецПроцедуры

Процедура ДобавитьКолонкиСтатусаСостояния(Контекст, НаименованиеРеквизитаСписок, ИмяКолонкиЛевогоСоединения="Документ", context_params=Неопределено)
	ИмяРегистра = ИмяРегистраСостояние(); 
	ТекстЗапросаКЭДО = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПраваяДанные.Объект КАК Объект,
	|	ПраваяДанные.Сервис КАК Сервис,
	|	ПраваяДанные.Аккаунт КАК Аккаунт,
	|	ПраваяДанные.АктивныйЭтап КАК АктивныйЭтап,
	|	ПраваяДанные.Состояние КАК Состояние,
	|	ПраваяДанные.UID КАК UID,
	|	ПраваяДанные.SbisId КАК SbisId
	|ПОМЕСТИТЬ Integration_States
	|ИЗ
	|	(ВЫБРАТЬ
	|		Integration_Левая.Объект КАК Объект,
	|		МАКСИМУМ(Integration_Левая.Сервис) КАК Сервис,
	|		МАКСИМУМ(Integration_Левая.Аккаунт) КАК Аккаунт
	|	ИЗ
	|		РегистрСведений." + ИмяРегистра + " КАК Integration_Левая
	|	ГДЕ
	|		(Integration_Левая.Сервис = &Сервис
	|					И Integration_Левая.Аккаунт = &Аккаунт
	|				ИЛИ Integration_Левая.Сервис = """"
	|					И Integration_Левая.Аккаунт = ""---undefine---""
	|				ИЛИ Integration_Левая.Сервис = """"
	|					И Integration_Левая.Аккаунт = """")
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Integration_Левая.Объект) КАК ЛеваяОтбор
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений."+ИмяРегистра+" КАК ПраваяДанные
	|		ПО (ЛеваяОтбор.Объект = ПраваяДанные.Объект
	|				И ЛеваяОтбор.Сервис = ПраваяДанные.Сервис
	|				И ЛеваяОтбор.Аккаунт = ПраваяДанные.Аккаунт);
    |
	|////////////////////////////////////////////////////////////////////////////////
    |";
	
	ПарамтерыДопТаблицы = ИнициализироватьСтруктуруДопТаблицы();
	ПарамтерыДопТаблицы.Вставить("ТаблицаДанных",		"Integration_States");
	ПарамтерыДопТаблицы.Вставить("Псевдоним",			"Integration_States");
	ПарамтерыДопТаблицы.Вставить("ИмяСпискаНаФорме",	НаименованиеРеквизитаСписок);
	ПарамтерыДопТаблицы.Вставить("ВременнаяТаблица",	ТекстЗапросаКЭДО);
	ПарамтерыДопТаблицы.Вставить("ИмяКолонкиЛевогоСоединения",	ИмяКолонкиЛевогоСоединения);
	
	МодульCore = МодульCore();

	Фильтр	= Новый Массив();
	//Сервис
	ЗначениеОтбора = Новый Массив();
	Фильтр.Добавить(Новый Структура("Параметр, Значение", "Сервис", МодульCore.get_prop(context_params,"service","") ));
	//Аккаунт
	Фильтр.Добавить(Новый Структура("Параметр, Значение", "Аккаунт", МодульCore.get_prop(context_params,"account","") ));
	//Отбор временной талицы
	ПарамтерыДопТаблицы.Вставить("Фильтр",	Фильтр);
	
	ЗаполнитьСтруктуруПолейДляКолонокСостоянияОбъектов(Контекст, НаименованиеРеквизитаСписок, ПарамтерыДопТаблицы);
	УспешноеВыполнение = ИзменитьЗапросДинамическогоСписока(Контекст.Форма, ПарамтерыДопТаблицы);
	Если УспешноеВыполнение Тогда
		УспешноеВыполнение = ДобавитьКолонкиНаФорму(Контекст.Форма, ПарамтерыДопТаблицы);
	КонецЕсли;

КонецПроцедуры


// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ДобавитьКолонкиВДинамическийСписокПриИзмененииЗапроса(Форма, ИмяРеквизитаСписок) Экспорт
	//ИмяРеквизитаСписок	= ПолучитьНаименованиеРеквизитаСписка(Форма);
	Если НЕ ЗначениеЗаполнено(ИмяРеквизитаСписок) Тогда Возврат; КонецЕсли;
	СтруктураОписаниеФормы		= ПодготовитьСтруктуруОписанияФормы(Форма);
	Если НЕ ЭтотОбъектМетаданныхЗахвачен(СтруктураОписаниеФормы) Тогда 
			//Обънект с которым мы не поддерживаем обмен
		Возврат;
	КонецЕсли;
	context_params= МодульCore().НастройкиПодключенияПрочитать();
	
	ТипОбъекта	= ОпределитьТипМетаданныхИсточника(СтруктураОписаниеФормы);
	Если ТипОбъекта	= "Справочник" Тогда
		ДобавитьКолонкиВСправочники(СтруктураОписаниеФормы, ИмяРеквизитаСписок, context_params);
	ИначеЕсли ТипОбъекта = "Документ" Тогда
		ДобавитьКолонкиВДокументы(СтруктураОписаниеФормы, ИмяРеквизитаСписок, context_params);
	КонецЕсли;
КонецПроцедуры

Процедура ДобавитьКолонкиВДинамическийСписок(Форма) Экспорт
	ИмяРеквизитаСписок	= ПолучитьНаименованиеРеквизитаСписка(Форма);
	Если НЕ ЗначениеЗаполнено(ИмяРеквизитаСписок) Тогда Возврат; КонецЕсли;
	СтруктураОписаниеФормы		= ПодготовитьСтруктуруОписанияФормы(Форма);
	Если НЕ ЭтотОбъектМетаданныхЗахвачен(СтруктураОписаниеФормы) Тогда 
			//Обънект с которым мы не поддерживаем обмен
		Возврат;
	КонецЕсли;
	context_params= МодульCore().НастройкиПодключенияПрочитать();
	
	//Запрос списка Формы списка справочника сотрудников меняется динамически и от сюда работать не будет
	//Пока закоментирован, Код оставлен для других справочников
	ТипОбъекта	= ОпределитьТипМетаданныхИсточника(СтруктураОписаниеФормы);
	Если ТипОбъекта	= "Справочник" Тогда
		ДобавитьКолонкиВСправочники(СтруктураОписаниеФормы, ИмяРеквизитаСписок, context_params);
	ИначеЕсли ТипОбъекта = "Документ" Тогда
		ДобавитьКолонкиВДокументы(СтруктураОписаниеФормы, ИмяРеквизитаСписок, context_params);
	КонецЕсли;
КонецПроцедуры

#Область include_core_base_ВстраиваниеВФормы_ДобавитьКолонкиВСправочники
#КонецОбласти

#Область include_core_base_ВстраиваниеВФормы_ДобавитьКолонкиВДокументы
#КонецОбласти

Функция ЛевоеПолеСоединенияНайдено(Знач ДоступныеПоля, Знач ПолноеИмяПоля)
	ПолеНайдено 	= Ложь;
	мПолей			= СтрРазделить(ПолноеИмяПоля, ".", Ложь);
	НайденноеПоле	= ДоступныеПоля.Найти(мПолей[0]);
	Если НайденноеПоле <> Неопределено Тогда
		ПолеНайдено		= Истина;
		ВырезаемоеПоле	= мПолей[0] + ?(мПолей.Количество()>0,".","");
		ПолеДляПроверки	= Прав(ПолноеИмяПоля, СтрДлина(ПолноеИмяПоля) - СтрДлина(ВырезаемоеПоле));
		Если Не ПустаяСтрока(ПолеДляПроверки) Тогда
			ПолеНайдено = ЛевоеПолеСоединенияНайдено(НайденноеПоле.Поля, ПолеДляПроверки);
		КонецЕсли;
	КонецЕсли;
	Возврат ПолеНайдено;
КонецФункции

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Функция ИзменитьЗапросДинамическогоСписока(Контекст, СтруктураПараметров)
	УспешноеВыполнение = Ложь;
	ЭлементФормы				= Контекст.Элементы.Найти(СтруктураПараметров.ИмяСпискаНаФорме);
	Если ЭлементФормы  = Неопределено Тогда
		//Заглушка от падения при переходе по ссылкам формы
		Возврат УспешноеВыполнение;
	Иначе
		Список	= Контекст[СтруктураПараметров.ИмяСпискаНаФорме];
	КонецЕсли;
	Если ТипЗнч(Список) <> Тип("ДинамическийСписок") Тогда
		Возврат УспешноеВыполнение;
	КонецЕсли;
	ОсновнаяТаблица 	= Список.ОсновнаяТаблица;
	
	Схема = Новый СхемаЗапроса();
	Если Найти(Список.ТекстЗапроса, СтруктураПараметров.ТаблицаДанных) = 0 Тогда
		Если НЕ Список.ПроизвольныйЗапрос Тогда
			Схема.УстановитьТекстЗапроса(СтруктураПараметров.ВременнаяТаблица+"ВЫБРАТЬ * ИЗ " + Список.ОсновнаяТаблица);
		Иначе
			Схема.УстановитьТекстЗапроса(СтруктураПараметров.ВременнаяТаблица+Список.ТекстЗапроса);
		КонецЕсли;
	Иначе
		Схема.УстановитьТекстЗапроса(Список.ТекстЗапроса);
	КонецЕСли;
	Если Схема.ПакетЗапросов.Количество()=0 Тогда Возврат УспешноеВыполнение; КонецЕсли;
	
	Запрос = Схема.ПакетЗапросов[Схема.ПакетЗапросов.Количество()-1];
	Если Запрос.Операторы.Количество()=0 Тогда Возврат УспешноеВыполнение; КонецЕсли;
	
	ОператорВыбрать = Запрос.Операторы[0];
		
	ОсновнойИсточник = Неопределено;
	КорневыеИсточники = ОператорВыбрать.Источники.ПолучитьКорневыеИсточники();
	Для каждого Источник Из КорневыеИсточники Цикл
		Если ТипЗнч(Источник.Источник)=Тип("ТаблицаСхемыЗапроса")
			И ВРег(Источник.Источник.ИмяТаблицы)=ВРег(Список.ОсновнаяТаблица)
			Тогда
			ОсновнойИсточник = Источник;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ОсновнойИсточник=Неопределено И КорневыеИсточники.Количество() > 0 Тогда
		ОсновнойИсточник = КорневыеИсточники[0];
	КонецЕсли;
	Если ОсновнойИсточник=Неопределено Тогда
		Возврат УспешноеВыполнение;
	КонецЕсли;
	
	ДопТаблицаДанных	= СтруктураПараметров.ТаблицаДанных;
	ПсевдонимДопТаблицы	= СтруктураПараметров.Псевдоним;
	ПостфиксКолонок		= СтруктураПараметров.ПостфиксКолонок;
	
	ИсточникДопДанные	= ОператорВыбрать.Источники.НайтиПоИмени(ДопТаблицаДанных);
	Если ИсточникДопДанные = Неопределено Тогда
		//Обход ошибки повторных вызовов
		ИсточникДопДанные	= ОператорВыбрать.Источники.Добавить(ДопТаблицаДанных, ПсевдонимДопТаблицы);
	КонецЕсли;
	ИсточникДопДанные.Соединения.Очистить();
	
	//Условие = СтрШаблон("%1.Ссылка = ДопДанные.СкладскоеЗадание",ОсновнойИсточник.Источник.Псевдоним);
	Условие = "";
	Для каждого ИменаПолей Из СтруктураПараметров.ПоляСоединения Цикл
		Если Не ЛевоеПолеСоединенияНайдено(ОсновнойИсточник.Источник.ДоступныеПоля, ИменаПолей.Ключ) Тогда
			Возврат УспешноеВыполнение;
		КонецЕсли;
		Условие = ?(ЗначениеЗаполнено(Условие), Условие + " И ", "") + СтрШаблон("%1."+ИменаПолей.Ключ+" = "+ПсевдонимДопТаблицы+"."+ИменаПолей.Значение, ОсновнойИсточник.Источник.Псевдоним);
	КонецЦикла;
	
	Если Не ОсновнойИсточник.Соединения.Добавить(ИсточникДопДанные, Условие) Тогда
		Возврат УспешноеВыполнение;
	КонецЕсли;

	Соединение					= ОсновнойИсточник.Соединения.НайтиПоПсевдониму(ПсевдонимДопТаблицы);
	Соединение.ТипСоединения	= ТипСоединенияСхемыЗапроса.ЛевоеВнешнее;

	Для каждого ДопКолонка Из СтруктураПараметров.СтруктураКолонок Цикл
		Если ОператорВыбрать.ВыбираемыеПоля.Найти(ДопКолонка.ПутьКДанным) = Неопределено Тогда
			Поле				= ОператорВыбрать.ВыбираемыеПоля.Добавить(ДопКолонка.ПутьКДанным);
			Колонка				= Запрос.Колонки.Найти(Поле);
			Колонка.Псевдоним	= ПостфиксКолонок+ДопКолонка.Имя;
		КонецЕсли;
	КонецЦикла;
	
	//Исправление псевдонимов полей СКД после обработки запроса через объект "СхемаЗапроса"
	Для каждого ВыражениеОтбораСКД Из ОператорВыбрать.ВыраженияОтбораКомпоновкиДанных Цикл
		ПсевдонимПоле = СтрНайти(ВыражениеОтбораСКД.Псевдоним, "Поле");
		Если ПсевдонимПоле = 1 Тогда
			ПостфиксПсевдонима = СтрЗаменить(ВыражениеОтбораСКД.Псевдоним, "Поле", "");
			Попытка
				НомерПоля = Число(ПостфиксПсевдонима);
				ВыражениеОтбораСКД.Псевдоним = "";
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	Соединение				= ОсновнойИсточник.Соединения.НайтиПоПсевдониму(ПсевдонимДопТаблицы);
	Соединение.ТипСоединения= ТипСоединенияСхемыЗапроса.ЛевоеВнешнее;
	Список.ТекстЗапроса		= Схема.ПолучитьТекстЗапроса();
	Список.ОсновнаяТаблица	= ОсновнаяТаблица;
	//Установим фильтр при наличии такого
	Фильтр = МодульCore().get_prop(СтруктураПараметров, "Фильтр", Новый Массив);
	Для Каждого ЭлементФильтра Из Фильтр Цикл
		ПараметрОтбора = Список.Параметры.Элементы.Найти(ЭлементФильтра.Параметр);
		Если ПараметрОтбора <> Неопределено Тогда
			ПараметрОтбора.Значение = ЭлементФильтра.Значение;
			ПараметрОтбора.Использование = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если Контекст.ИмяФормы = "Обработка.СписокСотрудников.Форма.ФормаСпискаСотрудников" Тогда
		// КОРП, // необходимо включить для этой формы
		Список.АвтоЗаполнениеДоступныхПолей  = Истина;
	КонецЕсли;
	Для каждого ДопКолонка Из СтруктураПараметров.СтруктураКолонок Цикл
		Список.УстановитьОбязательноеИспользование(ПостфиксКолонок+ДопКолонка.Имя, Истина);
	КонецЦикла;
	
	УспешноеВыполнение		= Истина;
	Возврат УспешноеВыполнение;
КонецФункции

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Функция ДобавитьКолонкиНаФорму(Контекст, СтруктураПараметров)
	КолонкиУспешноДобавлены = Ложь;
	ПостфиксКолонок = СтруктураПараметров.ПостфиксКолонок;
	
	Для каждого ДопКолонка Из СтруктураПараметров.СтруктураКолонок Цикл
		Если Не ДопКолонка.ОтображатьНаФорме Тогда Продолжить; КонецЕсли;
		Попытка
			Если Контекст.Элементы.Найти(ПостфиксКолонок+ДопКолонка.Имя) = Неопределено Тогда
				Элемент = Контекст.Элементы.Добавить(ПостфиксКолонок+ДопКолонка.Имя,Тип("ПолеФормы"),Контекст.Элементы[СтруктураПараметров.ИмяСпискаНаФорме]);
			Иначе
				//Поле уже существует
				Продолжить;
			КонецЕСли;
		Исключение
			КолонкиУспешноДобавлены = Ложь;
			Прервать;
		КонецПопытки;
		Если ДопКолонка.Свойство("Картинка") Тогда 
			Элемент.Вид					= ВидПоляФормы.ПолеКартинки;
			Элемент.Ширина				= 1;
			Элемент.ПоложениеЗаголовка	= ПоложениеЗаголовкаЭлементаФормы.Нет;
			Элемент.КартинкаЗначений	= ДопКолонка.Картинка;
		КонецЕсли;
		Элемент.ПутьКДанным			= СтруктураПараметров.ИмяСпискаНаФорме+"."+ПостфиксКолонок+ДопКолонка.Имя;
		Элемент.Заголовок			= ДопКолонка.Заголовок;
		Элемент.ПоложениеЗаголовка	= ПоложениеЗаголовкаЭлементаФормы.Авто;
		КолонкиУспешноДобавлены = Истина;
	КонецЦикла;
	Возврат КолонкиУспешноДобавлены; 
КонецФункции

#КонецОбласти

#Область ФильтрыДинамическогоСписка

// Фильтр на форме динамического списка
//Добавляет действия на панель задач формы
Процедура УстановитьФильтры(Форма, НаименованиеРеквизитаСписок, ГруппаНастроек, ПараметрыКритерияОтбора, ГруппаПараметровКритерияОтбора, КолонкиДобавлены) Экспорт
//Код оставлен на будущее!
//	дСписок	= Форма[НаименованиеРеквизитаСписок];
//	
//	ЭлементОтбора =  дСписок.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
//	ЭлементОтбора.ИдентификаторПользовательскойНастройки = Новый УникальныйИдентификатор();
//	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
//	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СостояниеСБИС");
//	ЭлементОтбора.ПравоеЗначение = Неопределено;
//	ЭлементОтбора.Использование = Ложь;
КонецПроцедуры

#КонецОбласти

#Область УсловноеОформление

// Раскрасим форму/список 
Процедура УстановитьУсловноеОформление(Форма, НаименованиеРеквизитаСписок, ГруппаНастроек, ПараметрыКритерияОтбора, ГруппаПараметровКритерияОтбора, КолонкиДобавлены) Экспорт 

КонецПроцедуры

#КонецОбласти 


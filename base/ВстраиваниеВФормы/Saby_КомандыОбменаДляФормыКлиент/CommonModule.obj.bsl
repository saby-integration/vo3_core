#Область include_core_base_locale_ЛокализацияНазваниеПродукта
#КонецОбласти

&НаКлиенте
Функция ПолучитьСписокСсылокНаОбъектыКоманды( ПараметрКоманды ) Экспорт
	
	Результат = Новый Структура("Источник", Новый Массив());
	Если ТипЗнч(ПараметрКоманды) = Тип("Массив") Тогда
 		Результат.Источник = ПараметрКоманды;
		Возврат Результат;
	КонецЕсли; 
	
	Если Не ПараметрКоманды.Свойство("Источник") Тогда
		Возврат Результат;
	КонецЕсли; 
	
	Если ТипЗнч(ПараметрКоманды.Источник) = Тип("ТаблицаФормы") ТОгда
		//Форма исписка
		Результат.Источник = ПараметрКоманды.Источник.ВыделенныеСтроки;
	ИначеЕсли ТипЗнч(ПараметрКоманды.Источник) = Тип("Массив") ТОгда
		Результат.Источник = ПараметрКоманды.Источник;
	ИначеЕсли ТипЗнч(ПараметрКоманды.Источник) = Тип("ДанныеФормыСтруктура") ТОгда
		//Форма документа
		мДокументов = Новый Массив();
		мДокументов.Добавить(ПараметрКоманды.Источник.Ссылка);
		Результат.Источник = мДокументов;
	КонецЕсли;  
	
	Результат.Источник = Saby_Core.ПривестиДанныеКССылочномуВиду(Результат.Источник);
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ТребуетсяАутентификация(context_param, Команда, ПараметрКоманды)
	
	РезультатПроверки = (context_param = Неопределено);
	Если РезультатПроверки Тогда
		ВходяшиеПараметры	= Новый Структура("Команда, ПараметрКоманды",Команда,ПараметрКоманды);
		ПроверкаВведенныхДанныхАутентификации = Новый ОписаниеОповещения("_ПослеАутентификации", Saby_КомандыОбменаДляФормыКлиент, ВходяшиеПараметры);
		ОткрытьФорму("Обработка.SABY.Форма.Вход",,,,,, ПроверкаВведенныхДанныхАутентификации);
	КонецЕсли;   
	
	Возврат РезультатПроверки;
	
КонецФункции

&НаКлиенте
Процедура _ПослеАутентификации( Результат, Параметры ) Экспорт 
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКоманды = Параметры.ПараметрКоманды.ОписаниеКоманды.Представление;
	Если ИмяКоманды = "Загрузить в SABY" Тогда
		ЗагрузитьВСБИС( Параметры.Команда, Параметры.ПараметрКоманды )
	ИначеЕсли ИмяКоманды = "Открыть в SABY" Тогда
		ПриНажатииОткрытьВСБИСПолучитьUID( Параметры.Команда, Параметры.ПараметрКоманды )
	ИначеЕсли ИмяКоманды = "Выгрузить вложения из SABY" Тогда
		ПриНажатииВыгрузитьВложенияИзСБИС( Параметры.Команда, Параметры.ПараметрКоманды )
	//ИначеЕсли ИмяКоманды = "Подписать документ" Тогда
	//	ОтправитьНаПодпись( Параметры.Команда, Параметры.ПараметрКоманды )
	ИначеЕсли ИмяКоманды = "Обновить статусы" Тогда
		ПриНажатииОбновитьСтатусы( Параметры.Команда, Параметры.ПараметрКоманды )
	//Запуск через другую функцию, в которой тоже есть проверка
	//ИначеЕсли ИмяКоманды = "Задачи" Тогда
		//Задачи( Параметры.Команда, Параметры.ПараметрКоманды )
	//ИначеЕсли ИмяКоманды = "Кадровые документы" Тогда
		//КадровыеДокументы( Параметры.Команда, Параметры.ПараметрКоманды )
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьОповещениеОбновлнияТаблицыФормы( Команда, ПараметрКоманды ) Экспорт 
	
	ДопПараметры = Новый Структура("ПараметрКоманды", ПараметрКоманды);
    ОповешениеОЗакрытии = Новый ОписаниеОповещения("ОбновитьТабличнуюЧастьФормы", Saby_КомандыОбменаДляФормыКлиент, ДопПараметры);
    Возврат ОповешениеОЗакрытии; 
	
КонецФункции

&НаКлиенте
Процедура ОбновитьТабличнуюЧастьФормы( Действие, ДополнительныеПараметры ) Экспорт 
	
	ПараметрКоманды    = ДополнительныеПараметры.ПараметрКоманды;
    Если ТипЗнч(ПараметрКоманды.Источник) = Тип("ТаблицаФормы") Тогда
        ТблСписок = ПараметрКоманды.Форма.Элементы.Найти(ПараметрКоманды.Источник.Имя);
        ТблСписок.Обновить();    
	КонецЕсли;
	
КонецПроцедуры

#Область include_core_base_ВстраиваниеВФормы_КомандаВыгрузитьВложенияИзСБИС
#КонецОбласти
 
 
Функция ПроверитьНаличиеПараметровПодключенияНаСервере() Экспорт
	Возврат Saby_Core.ПроверитьНаличиеПараметровПодключения();
КонецФункции

Функция ПроисходилЛиОбменДокументовСоСБИС(Источник, ДопПараметры=Неопределено) Экспорт
	Возврат Saby_ВстраиваниеВСтандартныеФормы.ПроисходилЛиОбменДокументовСоСБИС(Источник, );
КонецФункции

Функция ПолучитьСсылкиНаДокументыВСБИС(Источник, ПолучитьТикет = Ложь) Экспорт
	Возврат Saby_ВстраиваниеВСтандартныеФормы.ПолучитьСсылкиНаДокументыВСБИС(Источник, ПолучитьТикет);
КонецФункции

Функция ПолучитьДействияДляОбъекта(СсылкаНаОбъект, context_params) Экспорт
	Возврат Saby_ВстраиваниеВСтандартныеФормы.ПолучитьДействияДляОбъекта(СсылкаНаОбъект, context_params);
КонецФункции

Процедура ЗапуститьINIФоновымЗаданием(ini_name, ПараметрыВызоваИни, context_params = Неопределено, ФормаВладелец = Неопределено, ЗаголовокФормы="") Экспорт
	Saby_ФоновыеЗаданияКлиент.ЗапуститьINIФоновымЗаданием(
			ini_name, 
			ПараметрыВызоваИни, 
			context_params, 
			ФормаВладелец, 
			ЗаголовокФормы);
КонецПроцедуры

Функция ExtExceptionAnalyse(parent)
	Возврат Saby_Core.ExtExceptionAnalyse(parent);
КонецФункции


#Область include_core_base_ВстраиваниеВФормы_КомандаОткрытьСБИС
#КонецОбласти

&НаКлиенте
Процедура ПослеОтправитьВСБИС( Действие, ДополнительныеПараметры ) Экспорт 
	
	ПараметрКоманды	= ДополнительныеПараметры.ПараметрКоманды;
	Если ТипЗнч(ПараметрКоманды.Источник) = Тип("ТаблицаФормы") Тогда
		ТблСписок = ПараметрКоманды.Форма.Элементы.Найти(ПараметрКоманды.Источник.Имя);
		ТблСписок.Обновить();
	КонецЕсли;  
	
КонецПроцедуры

#Область include_core_base_Авторизация_Form_Вход_НеобходимоВвестиКодПодтверждения
#КонецОбласти

#Область include_core_base_Helpers_РаботаСоСвойствамиСтруктуры
#КонецОбласти

#Область include_core_base_ВстраиваниеВФормы_КомандаЗагрузитьВСБИС
#КонецОбласти


&НаКлиенте
Процедура ПереоткрытиеФормыОтправки( Результат, Параметры ) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	мСсылок = ПолучитьСписокСсылокНаОбъектыКоманды( Параметры.ОбъектыОтправки );
	ПроверкаОбмена = Saby_ВстраиваниеВСтандартныеФормы.ПроисходилЛиОбменДокументовСоСБИС(мСсылок.Источник);
	Для Каждого СтрокаДанных Из ПроверкаОбмена.ОбменаНебыло Цикл
		ПроверкаОбмена.БылОбмен.Добавить(СтрокаДанных);
	КонецЦикла;
	Параметры.Вставить("ПараметрКоманды", Новый Структура("Источник", ПроверкаОбмена.БылОбмен));
	ОповешениеОЗакрытии = Новый ОписаниеОповещения("ПослеОтправитьВСБИС", Saby_КомандыОбменаДляФормыКлиент, Параметры);
	ПараметрыВФорму = Новый Структура("Источник", ПроверкаОбмена.БылОбмен);
	ОткрытьФорму("Обработка.SABY.Форма.ЗагрузкаДокументов",ПараметрыВФорму,Параметры.ВладелецФормы, Новый УникальныйИдентификатор(),,,ОповешениеОЗакрытии,);
КонецПроцедуры

#Область include_core_base_ВстраиваниеВФормы_КомандаОбновитьСтатусы
#КонецОбласти

&НаКлиенте
Процедура ПриНажатииЗадачи( Команда, ПараметрКоманды ) Экспорт
	ЗапуститьОповещениеПриНаличииСессии(Saby_КомандыОбменаДляФормыКлиент, "ОткрытьЗадачи", Новый Структура());
КонецПроцедуры

&НаКлиенте
Процедура ПриНажатииКадровыеДокументы( Команда, ПараметрКоманды ) Экспорт 
	ЗапуститьОповещениеПриНаличииСессии(Saby_КомандыОбменаДляФормыКлиент, "ОткрытьКадровыеДокументы", Новый Структура());
КонецПроцедуры

&НаКлиенте
Процедура ПриНажатииОтпуска( Команда, ПараметрКоманды ) Экспорт 
	ЗапуститьОповещениеПриНаличииСессии(Saby_КомандыОбменаДляФормыКлиент, "ОткрытьОтпуска", Новый Структура());
КонецПроцедуры

&НаКлиенте
Процедура ПриНажатииБольничные( Команда, ПараметрКоманды ) Экспорт 
	ЗапуститьОповещениеПриНаличииСессии(Saby_КомандыОбменаДляФормыКлиент, "ОткрытьБольничные", Новый Структура());
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетОЗагрузке(context_param, ПараметрыФормы) Экспорт
	АдресСтраницы = context_param.api_url+"/integration_config/ext-sync-doc-list/page/?extSyncDocId="+ПараметрыФормы.extSyncDocId;
	ПараметрыФормы.Вставить("Заголовок", "Отчет об отправке");
	ПараметрыФормы.Вставить("АдресСтраницы", АдресСтраницы);
	ПараметрыФормы.Вставить("context_param", context_param);
	ОткрытьФорму("Обработка.SABY.Форма.Browser", ПараметрыФормы,,"Отчет об отправке");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИсториюОбмена(context_param, ПараметрыФормы) Экспорт
	АдресСтраницы = context_param.api_url+"/integration_config/ext-sync-doc-list/page/?connectionId="+context_param.ConnectionId;
	ПараметрыФормы.Вставить("Заголовок", "История обмена");
	ПараметрыФормы.Вставить("АдресСтраницы", АдресСтраницы);
	ПараметрыФормы.Вставить("context_param", context_param);
	ОткрытьФорму("Обработка.SABY.Форма.Browser", ПараметрыФормы,,"История обмена");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтпуска(context_param, ПараметрыФормы) Экспорт
	АдресСтраницы = context_param.api_url+"/page/holidays?";
	ПараметрыФормы.Вставить("Заголовок", "Отпуска");
	ПараметрыФормы.Вставить("АдресСтраницы", АдресСтраницы);
	ПараметрыФормы.Вставить("context_param", context_param);
	ОткрытьФорму("Обработка.SABY.Форма.Browser", ПараметрыФормы,,"Отпуска");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьБольничные(context_param, ПараметрыФормы) Экспорт
	АдресСтраницы = context_param.api_url+"/page/allowance?";
	ПараметрыФормы.Вставить("Заголовок", "Больничные");
	ПараметрыФормы.Вставить("АдресСтраницы", АдресСтраницы);
	ПараметрыФормы.Вставить("context_param", context_param);
	ОткрытьФорму("Обработка.SABY.Форма.Browser", ПараметрыФормы,,"Больничные");
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьОповещениеПриНаличииСессии_ПослеАутентификации(Результат, Параметры) Экспорт
	Если Результат <> Неопределено Тогда
		ЗапуститьОповещениеПриНаличииСессии(Параметры.ОбъектОповещения, Параметры.ИмяОповещения, Параметры.ПараметрыОповещения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ЗапуститьОповещениеПриНаличииСессии(ОбъектОповещения, ИмяОповещения, Параметры) Экспорт
	
	context_param = Saby_Core.ПроверитьНаличиеПараметровПодключения();
	Если context_param = Неопределено Тогда
		
		ПараметрыОбратногоВызова	= Новый Структура("ОбъектОповещения, ИмяОповещения, ПараметрыОповещения", ОбъектОповещения, ИмяОповещения, Параметры);
		Оповещение = Новый ОписаниеОповещения(
			"ЗапуститьОповещениеПриНаличииСессии_ПослеАутентификации", 
			Saby_КомандыОбменаДляФормыКлиент, 
			ПараметрыОбратногоВызова);
			
		ОткрытьФорму("Обработка.SABY.Форма.Вход",,,,,, Оповещение);
		Возврат Неопределено; 
		
	КонецЕсли;
		
	Оповещение = Новый ОписаниеОповещения(ИмяОповещения, ОбъектОповещения, Параметры);
	ВыполнитьОбработкуОповещения(Оповещение, context_param);
	
КонецФункции

&НаКлиенте
Процедура ОткрытьЗадачи(Параметр, ДопПараметры) Экспорт
	context_param	= Saby_Core.НастройкиПодключенияПрочитать();
	Если get_prop(context_param, "session") <> Неопределено Тогда
		АдресСтраницы = context_param.api_url+"/page/tasks-in-work"; //integration-tasks?connector=1C
	ИначеЕсли get_prop(context_param, "api_url") <> Неопределено Тогда
		АдресСтраницы = context_param.api_url+"/auth/";
	Иначе
		АдресСтраницы = "https://ie-1c.saby.ru/auth/";	
	КонецЕсли;	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Заголовок", "Задачи");
	ПараметрыФормы.Вставить("АдресСтраницы", АдресСтраницы);
	ПараметрыФормы.Вставить("context_param", context_param);
	ОткрытьФормуОбработки("Browser", ПараметрыФормы,,"Задачи");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКадровыеДокументы(Параметр, ДопПараметры) Экспорт
	context_param	= Saby_Core.НастройкиПодключенияПрочитать();
	Если get_prop(context_param, "session") <> Неопределено Тогда
		АдресСтраницы = context_param.api_url+"/page/tasks-in-work"; //integration-tasks?connector=1C
	ИначеЕсли get_prop(context_param, "api_url") <> Неопределено Тогда
		АдресСтраницы = context_param.api_url+"/auth/";
	Иначе
		АдресСтраницы = "https://ie-1c.saby.ru/auth/";	
	КонецЕсли;	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Заголовок", "Задачи");
	ПараметрыФормы.Вставить("АдресСтраницы", АдресСтраницы);
	ПараметрыФормы.Вставить("context_param", context_param);
	ОткрытьФормуОбработки("Browser", ПараметрыФормы,,"Кадровые документы");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуБраузера(Заголовок, АдресСтраницы, Уникальность=Неопределено) Экспорт
	ПараметрыФормы = Новый Структура( "Заголовок, АдресСтраницы",Заголовок, АдресСтраницы);
	ОткрытьФорму("Обработка.SABY.Форма.Browser", ПараметрыФормы,,Уникальность );
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОтчетаОЗагрузке(ПараметрыЗагрузки) Экспорт
	АдресСтраницы = ПараметрыЗагрузки["params"]["api_url"]+
	"/ext-sync-doc/page/?extSyncDocId="+
	ПараметрыЗагрузки["operation_uuid"];
	ОткрытьФормуБраузера("Отчет об отправке", АдресСтраницы, АдресСтраницы);
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьРасчетныйЛистокВСБИС(ПараметрыВызова, context_params) Экспорт	
	Saby_ФоновыеЗаданияКлиент.ЗапуститьINIФоновымЗаданием("РасчетныйЛисток_send", ПараметрыВызова, context_params, Неопределено, "Отправка в SABY");	
КонецПроцедуры 

&НаКлиенте
Процедура ВыполнитьПроизвольныйИНИ(ИмяИНИФайла, ПараметрыВызова) Экспорт	
	Saby_ФоновыеЗаданияКлиент.ЗапуститьINIФоновымЗаданием(ИмяИНИФайла, ПараметрыВызова, Неопределено, Неопределено, "Отправка в SABY");	
КонецПроцедуры 

&НаКлиенте
Функция ПроверитьПолнотуДанныхОтбораДляВызоваИНИ(ПараметрыВызова)
	Если ПараметрыВызова.Количество() = 0 Тогда
		ПоказатьОповещениеПользователя(
		"Нет данных для отбора по расчётным листкам.",,
		"Ошибка подготовки данных"
		,БиблиотекаКартинок["Ошибка32"]
		,СтатусОповещенияПользователя.Важное,);
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура ОтправитьСокращенныйРасчетныйЛистокВСБИС(ПараметрыВызова, context_params) Экспорт
	ПараметрыВызова = Saby_ВстраиваниеВСтандартныеФормы.ПодготовитьДанныеПрочийКадровыйРасчетныйЛисток(ПараметрыВызова);
	Если  НЕ ПроверитьПолнотуДанныхОтбораДляВызоваИНИ(ПараметрыВызова) Тогда
		Возврат;
	КонецЕсли;
	Saby_ФоновыеЗаданияКлиент.ЗапуститьINIФоновымЗаданием("СокращенныйРасчетныйЛисток_send", ПараметрыВызова, context_params, Неопределено, "Отправка в SABY");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПрочийКадровыйРасчетныйЛистокВСБИС(ПараметрыВызова) Экспорт
	ПараметрыВызова = Saby_ВстраиваниеВСтандартныеФормы.ПодготовитьДанныеПрочийКадровыйРасчетныйЛисток(ПараметрыВызова);
	Если  НЕ ПроверитьПолнотуДанныхОтбораДляВызоваИНИ(ПараметрыВызова) Тогда
		Возврат;
	КонецЕсли;
	Saby_ФоновыеЗаданияКлиент.ЗапуститьINIФоновымЗаданием("ПрочийКадровыйРасчетныйЛисток_send", ПараметрыВызова, Неопределено, Неопределено, "Отправка в SABY");
КонецПроцедуры

Процедура УстановитьПризнакУчаствуетВКЭДО(Команда, ПараметрКоманды ) Экспорт
	мСсылок = ПолучитьСписокСсылокНаОбъектыКоманды( ПараметрКоманды );
	Для Каждого СсылкаСотрудник Из мСсылок.Источник Цикл
		ПредЗначение = Saby_Core.ПолучитьЗначениеСвойства(СсылкаСотрудник, "КЭДО", Ложь);
		Saby_Core.УстановитьЗначениеСвойства(СсылкаСотрудник, "КЭДО", НЕ ПредЗначение);
	КонецЦикла;

	Если ТипЗнч(ПараметрКоманды.Источник) = Тип("ТаблицаФормы") Тогда
		ТблСписок = ПараметрКоманды.Форма.Элементы.Найти(ПараметрКоманды.Источник.Имя);
		ТблСписок.Обновить();
	КонецЕсли;  
КонецПроцедуры

&НаКлиенте
Функция ПутьКФормамОбработки()
 	ПутьКФормам = "Обработка.SABY.Форма.";
	Возврат ПутьКФормам;
КонецФункции     

&НаКлиенте
Процедура ОткрытьФормуОбработки(ИмяФормы, ПараметрыФормы = Неопределено, ВладелецФормы = Неопределено, Уникальность=Неопределено, ОписаниеОповещения = Неопределено, РежимОткрытияОкна= Неопределено)
	ОткрытьФорму(ПутьКФормамОбработки() + ИмяФормы, ПараметрыФормы, ВладелецФормы,Уникальность,,,ОписаниеОповещения,РежимОткрытияОкна);
КонецПроцедуры

&НаКлиенте
Функция ЭтотМодуль()
	Возврат Saby_КомандыОбменаДляФормыКлиент;
КонецФункции

#Область include_core_base_Helpers_КартинкиУспешноОшибка
#КонецОбласти


&НаКлиенте
Функция ПолучитьСписокСсылокНаОбъектыКоманды( ПараметрКоманды ) Экспорт
	
	Результат = Новый Структура("Источник", Новый Массив());
	Если ТипЗнч(ПараметрКоманды) = Тип("Массив") Тогда
 		Результат.Источник = ПараметрКоманды;
		Возврат Результат;
	КонецЕсли; 
	
	Если Не ПараметрКоманды.Свойство("Источник") Тогда
		Возврат Результат;
	КонецЕсли; 
	
	Если ТипЗнч(ПараметрКоманды.Источник) = Тип("ТаблицаФормы") ТОгда
		//Форма исписка
		Результат.Источник = ПараметрКоманды.Источник.ВыделенныеСтроки;
	ИначеЕсли ТипЗнч(ПараметрКоманды.Источник) = Тип("Массив") ТОгда
		Результат.Источник = ПараметрКоманды.Источник;
	ИначеЕсли ТипЗнч(ПараметрКоманды.Источник) = Тип("ДанныеФормыСтруктура") ТОгда
		//Форма документа
		мДокументов = Новый Массив();
		мДокументов.Добавить(ПараметрКоманды.Источник.Ссылка);
		Результат.Источник = мДокументов;
	КонецЕсли;  
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ТребуетсяАутентификация(context_param, Команда, ПараметрКоманды)
	
	РезультатПроверки = (context_param = Неопределено);
	Если РезультатПроверки Тогда
		ВходяшиеПараметры	= Новый Структура("Команда, ПараметрКоманды",Команда,ПараметрКоманды);
		ПроверкаВведенныхДанныхАутентификации = Новый ОписаниеОповещения("_ПослеАутентификации", Saby_КомандыОбменаДляФормыКлиент, ВходяшиеПараметры);
		ОткрытьФорму("Обработка.SABY.Форма.Вход",,,,,, ПроверкаВведенныхДанныхАутентификации);
	КонецЕсли;   
	
	Возврат РезультатПроверки;
	
КонецФункции

&НаКлиенте
Процедура _ПослеАутентификации( Результат, Параметры ) Экспорт 
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКоманды = Параметры.ПараметрКоманды.ОписаниеКоманды.Представление;
	Если ИмяКоманды = "Загрузить в SABY" Тогда
		ЗагрузитьВСБИС( Параметры.Команда, Параметры.ПараметрКоманды )
	ИначеЕсли ИмяКоманды = "Открыть в SABY" Тогда
		ПриНажатииОткрытьВСБИСПолучитьUID( Параметры.Команда, Параметры.ПараметрКоманды )
	ИначеЕсли ИмяКоманды = "Выгрузить вложения из SABY" Тогда
		ПриНажатииВыгрузитьВложенияИзСБИС( Параметры.Команда, Параметры.ПараметрКоманды )
	//ИначеЕсли ИмяКоманды = "Подписать документ" Тогда
	//	ОтправитьНаПодпись( Параметры.Команда, Параметры.ПараметрКоманды )
	ИначеЕсли ИмяКоманды = "Обновить статусы" Тогда
		ПриНажатииОбновитьСтатусы( Параметры.Команда, Параметры.ПараметрКоманды )
	//Запуск через другую функцию, в которой тоже есть проверка
	//ИначеЕсли ИмяКоманды = "Задачи" Тогда
		//Задачи( Параметры.Команда, Параметры.ПараметрКоманды )
	//ИначеЕсли ИмяКоманды = "Кадровые документы" Тогда
		//КадровыеДокументы( Параметры.Команда, Параметры.ПараметрКоманды )
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьОповещениеОбновлнияТаблицыФормы( Команда, ПараметрКоманды ) Экспорт 
	
	ДопПараметры = Новый Структура("ПараметрКоманды", ПараметрКоманды);
    ОповешениеОЗакрытии = Новый ОписаниеОповещения("ОбновитьТабличнуюЧастьФормы", Saby_КомандыОбменаДляФормыКлиент, ДопПараметры);
    Возврат ОповешениеОЗакрытии; 
	
КонецФункции

&НаКлиенте
Процедура ОбновитьТабличнуюЧастьФормы( Действие, ДополнительныеПараметры ) Экспорт 
	
	ПараметрКоманды    = ДополнительныеПараметры.ПараметрКоманды;
    Если ТипЗнч(ПараметрКоманды.Источник) = Тип("ТаблицаФормы") Тогда
        ТблСписок = ПараметрКоманды.Форма.Элементы.Найти(ПараметрКоманды.Источник.Имя);
        ТблСписок.Обновить();    
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриНажатииВыгрузитьВложенияИзСБИС( Команда, ПараметрКоманды ) Экспорт 
	
	context_params	= Saby_Core.ПроверитьНаличиеПараметровПодключения();
	Если ТребуетсяАутентификация(context_params, Команда, ПараметрКоманды) Тогда
		Возврат;
	КонецЕсли;

    Если Не ПараметрКоманды.ЭтоФормаОбъекта Тогда
        ОповещениеОЗакрытииФормыФоновогоЗадания = ПолучитьОповещениеОбновлнияТаблицыФормы(Команда, ПараметрКоманды);
        context_params.Вставить("ОповещениеОЗакрытииФормыФоновогоЗадания", ОповещениеОЗакрытииФормыФоновогоЗадания);
	КонецЕсли;
	
	мСсылок = ПолучитьСписокСсылокНаОбъектыКоманды(ПараметрКоманды );
	ПроверкаОбмена = Saby_ВстраиваниеВСтандартныеФормы.ПроисходилЛиОбменДокументовСоСБИС(мСсылок.Источник);
	
	Если ПроверкаОбмена.ОбменаНебыло.Количество()  = 0 И ПроверкаОбмена.БылОбмен.Количество() > 0 Тогда
		ВыгрузитьВложенияИзСБИС(ПроверкаОбмена.БылОбмен, ПараметрКоманды);
	ИначеЕсли ПроверкаОбмена.ОбменаНебыло.Количество()  > 0 Тогда
		ДопПараметры	= Новый Структура("Данные, Форма", ПроверкаОбмена, ПараметрКоманды.Форма );
		ДействиеВопроса = Новый ОписаниеОповещения("ОтветНаВопросОтправитьВложенияВСБИС", Saby_КомандыОбменаДляФормыКлиент, ДопПараметры);
		ПоказатьВопрос(ДействиеВопроса, 
			"Среди выбранных для выгрузки вложений документов есть "+
			Формат(ПроверкаОбмена.ОбменаНебыло.Количество(), "ЧГ=0")+
			" которые в СБИС не загружались. Загрузить их?",
			РежимДиалогаВопрос.ДаНетОтмена,0,КодВозвратаДиалога.Да,"Документ не найден в SABY");
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьВложенияИзСБИС(Источник, ПараметрКоманды) Экспорт
	
	context_params	= Saby_Core.ПроверитьНаличиеПараметровПодключения();

	ОбрабатываемыеОбъекты = Новый Массив();
	Для Каждого ВыгружаемыйДокумент Из Источник Цикл
		_ref = Новый Структура;
		_ref.Вставить("Объект", ВыгружаемыйДокумент.Ссылка);
		_ref.Вставить("UID", ВыгружаемыйДокумент.UID);
		ОбрабатываемыеОбъекты.Добавить(_ref);
	КонецЦикла;    
	
	Если ОбрабатываемыеОбъекты.Количество() > 0 Тогда
		Saby_ФоновыеЗаданияКлиент.ЗапуститьINIФоновымЗаданием(
			"ЗагрузитьВложения_1", 
			ОбрабатываемыеОбъекты, 
			context_params, 
			ПараметрКоманды.Форма, 
			"Загрузить вложения из SABY");
	КонецЕСли;
	
КонецПроцедуры

#Область include_base_Кнопки_ОткрытьВСБИС
#КонецОбласти

&НаКлиенте
Процедура ПослеОтправитьВСБИС( Действие, ДополнительныеПараметры ) Экспорт 
	
	ПараметрКоманды	= ДополнительныеПараметры.ПараметрКоманды;
	Если ТипЗнч(ПараметрКоманды.Источник) = Тип("ТаблицаФормы") Тогда
		ТблСписок = ПараметрКоманды.Форма.Элементы.Найти(ПараметрКоманды.Источник.Имя);
		ТблСписок.Обновить();
	КонецЕсли;  
	
КонецПроцедуры

#Область include_core_base_Авторизация_Form_Вход_НеобходимоВвестиКодПодтверждения
#КонецОбласти

#Область include_core_base_Helpers_РаботаСоСвойствамиСтруктуры
#КонецОбласти

&НаКлиенте
Процедура ЗагрузитьВСБИС( Команда, ПараметрКоманды ) Экспорт 

	context_params	= Saby_Core.ПроверитьНаличиеПараметровПодключения();
	Если ТребуетсяАутентификация(context_params, Команда, ПараметрКоманды) Тогда
		Возврат;
	КонецЕсли;	
	
	мСсылок = ПолучитьСписокСсылокНаОбъектыКоманды( ПараметрКоманды );
	ПроверкаОбмена = Saby_ВстраиваниеВСтандартныеФормы.ПроисходилЛиОбменДокументовСоСБИС(мСсылок.Источник, Новый Структура("ИмяИни", ПараметрКоманды.ОписаниеКоманды.ПараметрыФормы.ИмяИни));
	ДопПараметры = Новый Структура("ПараметрКоманды", ПараметрКоманды);
	ОповешениеОЗакрытии = Новый ОписаниеОповещения("ПослеОтправитьВСБИС", Saby_КомандыОбменаДляФормыКлиент, ДопПараметры);
	
	//Переданные документы
	Если ПроверкаОбмена.БылОбмен.Количество() Тогда
		//Проверим возможность получения действий для первого элемента массива
		//Проверка для большого массива займёт уйму времени, поэтому только 0й элемент
		Попытка
			ДействияОбъекта = Saby_ВстраиваниеВСтандартныеФормы.ПолучитьДейсвияДляОбъекта(ПроверкаОбмена.БылОбмен[0].Ссылка, context_params);
		Исключение
			ИнфоОбОшибке = ИнформацияОбОшибке();
			СтруктураОшибки = Saby_Core.ExtExceptionAnalyse(ИнфоОбОшибке);
			НеобходимаНеобходимоВвестиКод = НеобходимоВвестиКодПодтверждения(СтруктураОшибки);
			Если СтруктураОшибки.type = "Unauthorized" или НеобходимаНеобходимоВвестиКод Тогда
				ВходяшиеПараметры	= Новый Структура("Команда, ПараметрКоманды",Команда,ПараметрКоманды);
				ПроверкаВведенныхДанныхАутентификации = Новый ОписаниеОповещения("_ПослеАутентификации", Saby_КомандыОбменаДляФормыКлиент, ВходяшиеПараметры);
				ОткрытьФорму("Обработка.SABY.Форма.Вход",,,,,, ПроверкаВведенныхДанныхАутентификации);
				Возврат;
			КонецЕсли;
		КонецПопытки;
		Если ДействияОбъекта = Неопределено Или ТипЗнч(ДействияОбъекта)	<> Тип("Массив") Тогда
			//Действий для объекта нет, либо объект/документ удален на стороне сервера, и требуется переотправка
			Для Каждого ДанныеПоДокументу Из ПроверкаОбмена.БылОбмен Цикл
				//Перенесем объекты в список не обработаных
				ПроверкаОбмена.ОбменаНебыло.Добавить(ДанныеПоДокументу);
			КонецЦикла;
		Иначе
			СписокДокументовСБИС = Новый Массив();
			СписокДокументов1С = Новый Массив();
			Для Каждого СтрокаСпискаЗадач Из ПроверкаОбмена.БылОбмен Цикл 
				ДокументСБИС = Новый Структура("Идентификатор, ПервичныйКлюч, Документ1С", 
					СтрокаСпискаЗадач.UID,
					"",
					СтрокаСпискаЗадач.Ссылка);	
				СписокДокументовСБИС.Добавить(ДокументСБИС);

				СписокДокументов1С.Добавить(СтрокаСпискаЗадач.Ссылка);
			КонецЦикла;

			ПараметрыВФорму = Новый Структура("СписокДокументовСБИС, СписокДокументов1С, МожноПереотправитьВСБИС, МожноОбновитьВСБИС", 
			СписокДокументовСБИС, СписокДокументов1С, СписокДокументов1С.Количество() > 0, Истина);
			ОткрытьФорму("Обработка.SABY.Форма.ВыполнитьДействие", ПараметрыВФорму, ПараметрКоманды.Форма, Новый УникальныйИдентификатор(), , , ОповешениеОЗакрытии);
		КонецЕсли;
	КонецЕсли;
	
	//Еще не обработанные
	Если ПроверкаОбмена.ОбменаНебыло.Количество() Тогда
		ПараметрыВФорму = Новый Структура("Источник", ПроверкаОбмена.ОбменаНебыло);
		ОткрытьФорму("Обработка.SABY.Форма.ЗагрузкаДокументов",ПараметрыВФорму,ПараметрКоманды.Форма,Новый УникальныйИдентификатор(),,,ОповешениеОЗакрытии,);
	КонецЕсли;  
	
	Если ПроверкаОбмена.БылОбмен.Количество() = 0 и ПроверкаОбмена.ОбменаНебыло.Количество() = 0 Тогда
		ПоказатьОповещениеПользователя(
				"Отправка отменена",
				, 
				"Среди выбранных для отправки документов нет поддерживаемых расширением",
				БиблиотекаКартинок["Ошибка32"],
				СтатусОповещенияПользователя.Важное, Новый УникальныйИдентификатор); 
	КонецЕсли;
	//Обновим табличную часть. т.к. могли быть удалены записи из регистра
	ДопПараметры = Новый Структура("ПараметрКоманды", ПараметрКоманды);
	ОбновитьТабличнуюЧастьФормы( Неопределено, ДопПараметры );
КонецПроцедуры

&НаКлиенте
Процедура ПереоткрытиеФормыОтправки( Результат, Параметры ) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	мСсылок = ПолучитьСписокСсылокНаОбъектыКоманды( Параметры.ОбъектыОтправки );
	ПроверкаОбмена = Saby_ВстраиваниеВСтандартныеФормы.ПроисходилЛиОбменДокументовСоСБИС(мСсылок.Источник);
	Для Каждого СтрокаДанных Из ПроверкаОбмена.ОбменаНебыло Цикл
		ПроверкаОбмена.БылОбмен.Добавить(СтрокаДанных);
	КонецЦикла;
	Параметры.Вставить("ПараметрКоманды", Новый Структура("Источник", ПроверкаОбмена.БылОбмен));
	ОповешениеОЗакрытии = Новый ОписаниеОповещения("ПослеОтправитьВСБИС", Saby_КомандыОбменаДляФормыКлиент, Параметры);
	ПараметрыВФорму = Новый Структура("Источник", ПроверкаОбмена.БылОбмен);
	ОткрытьФорму("Обработка.SABY.Форма.ЗагрузкаДокументов",ПараметрыВФорму,Параметры.ВладелецФормы, Новый УникальныйИдентификатор(),,,ОповешениеОЗакрытии,);
КонецПроцедуры

&НаКлиенте
Процедура ПриНажатииОбновитьСтатусы( Команда, ПараметрКоманды ) Экспорт 
	
	context_params	= Saby_Core.ПроверитьНаличиеПараметровПодключения();
	Если ТребуетсяАутентификация(context_params, Команда, ПараметрКоманды) Тогда
		Возврат;
	КонецЕсли;	
	
    ОповещениеОЗакрытииФормыФоновогоЗадания = Неопределено;
    Если Не ПараметрКоманды.ЭтоФормаОбъекта Тогда
        ОповещениеОЗакрытииФормыФоновогоЗадания = ПолучитьОповещениеОбновлнияТаблицыФормы(Команда, ПараметрКоманды);
        context_params.Вставить("ОповещениеОЗакрытииФормыФоновогоЗадания", ОповещениеОЗакрытииФормыФоновогоЗадания);
	КонецЕсли;
	
	Saby_ФоновыеЗаданияКлиент.ЗапуститьINIФоновымЗаданием(
		"ОбновитьСтатусы_send",
		,
		context_params,
		ПараметрКоманды.Форма, 
		"Обновление статусов"); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПриНажатииЗадачи( Команда, ПараметрКоманды ) Экспорт
	ЗапуститьОповещениеПриНаличииСессии(Saby_КомандыОбменаДляФормыКлиент, "ОткрытьЗадачи", Новый Структура());
КонецПроцедуры

&НаКлиенте
Процедура ПриНажатииКадровыеДокументы( Команда, ПараметрКоманды ) Экспорт 
	ЗапуститьОповещениеПриНаличииСессии(Saby_КомандыОбменаДляФормыКлиент, "ОткрытьКадровыеДокументы", Новый Структура());
КонецПроцедуры

&НаКлиенте
Процедура ПриНажатииОтпуска( Команда, ПараметрКоманды ) Экспорт 
	ЗапуститьОповещениеПриНаличииСессии(Saby_КомандыОбменаДляФормыКлиент, "ОткрытьОтпуска", Новый Структура());
КонецПроцедуры

&НаКлиенте
Процедура ПриНажатииБольничные( Команда, ПараметрКоманды ) Экспорт 
	ЗапуститьОповещениеПриНаличииСессии(Saby_КомандыОбменаДляФормыКлиент, "ОткрытьБольничные", Новый Структура());
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетОЗагрузке(context_param, ПараметрыФормы) Экспорт
	АдресСтраницы = context_param.api_url+"/integration_config/ext-sync-doc-list/page/?extSyncDocId="+ПараметрыФормы.extSyncDocId;
	ПараметрыФормы.Вставить("Заголовок", "Отчет об отправке");
	ПараметрыФормы.Вставить("АдресСтраницы", АдресСтраницы);
	ПараметрыФормы.Вставить("context_param", context_param);
	ОткрытьФорму("Обработка.SABY.Форма.Browser", ПараметрыФормы,,"Отчет об отправке");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИсториюОбмена(context_param, ПараметрыФормы) Экспорт
	АдресСтраницы = context_param.api_url+"/integration_config/ext-sync-doc-list/page/?connectionId="+context_param.ConnectionId;
	ПараметрыФормы.Вставить("Заголовок", "История обмена");
	ПараметрыФормы.Вставить("АдресСтраницы", АдресСтраницы);
	ПараметрыФормы.Вставить("context_param", context_param);
	ОткрытьФорму("Обработка.SABY.Форма.Browser", ПараметрыФормы,,"История обмена");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтпуска(context_param, ПараметрыФормы) Экспорт
	АдресСтраницы = context_param.api_url+"/page/holidays?";
	ПараметрыФормы.Вставить("Заголовок", "Отпуска");
	ПараметрыФормы.Вставить("АдресСтраницы", АдресСтраницы);
	ПараметрыФормы.Вставить("context_param", context_param);
	ОткрытьФорму("Обработка.SABY.Форма.Browser", ПараметрыФормы,,"Отпуска");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьБольничные(context_param, ПараметрыФормы) Экспорт
	АдресСтраницы = context_param.api_url+"/page/allowance?";
	ПараметрыФормы.Вставить("Заголовок", "Больничные");
	ПараметрыФормы.Вставить("АдресСтраницы", АдресСтраницы);
	ПараметрыФормы.Вставить("context_param", context_param);
	ОткрытьФорму("Обработка.SABY.Форма.Browser", ПараметрыФормы,,"Больничные");
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьОповещениеПриНаличииСессии_ПослеАутентификации(Результат, Параметры) Экспорт
	Если Результат <> Неопределено Тогда
		ЗапуститьОповещениеПриНаличииСессии(Параметры.ОбъектОповещения, Параметры.ИмяОповещения, Параметры.ПараметрыОповещения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ЗапуститьОповещениеПриНаличииСессии(ОбъектОповещения, ИмяОповещения, Параметры) Экспорт
	
	context_param = Saby_Core.ПроверитьНаличиеПараметровПодключения();
	Если context_param = Неопределено Тогда
		
		ПараметрыОбратногоВызова	= Новый Структура("ОбъектОповещения, ИмяОповещения, ПараметрыОповещения", ОбъектОповещения, ИмяОповещения, Параметры);
		Оповещение = Новый ОписаниеОповещения(
			"ЗапуститьОповещениеПриНаличииСессии_ПослеАутентификации", 
			Saby_КомандыОбменаДляФормыКлиент, 
			ПараметрыОбратногоВызова);
			
		ОткрытьФорму("Обработка.SABY.Форма.Вход",,,,,, Оповещение);
		Возврат Неопределено; 
		
	КонецЕсли;
		
	Оповещение = Новый ОписаниеОповещения(ИмяОповещения, ОбъектОповещения, Параметры);
	ВыполнитьОбработкуОповещения(Оповещение, context_param);
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуБраузера(Заголовок, АдресСтраницы, Уникальность=Неопределено) Экспорт
	ПараметрыФормы = Новый Структура( "Заголовок, АдресСтраницы",Заголовок, АдресСтраницы);
	ОткрытьФорму("Обработка.SABY.Форма.Browser", ПараметрыФормы,,Уникальность );
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОтчетаОЗагрузке(ПараметрыЗагрузки) Экспорт
	АдресСтраницы = ПараметрыЗагрузки["params"]["api_url"]+
	"/ext-sync-doc/page/?extSyncDocId="+
	ПараметрыЗагрузки["operation_uuid"];
	ОткрытьФормуБраузера("Отчет об отправке", АдресСтраницы, АдресСтраницы);
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьРасчетныйЛистокВСБИС(ПараметрыВызова) Экспорт	
	Saby_ФоновыеЗаданияКлиент.ЗапуститьINIФоновымЗаданием("РасчетныйЛисток_send", ПараметрыВызова, Неопределено, Неопределено, "Отправка в SABY");	
КонецПроцедуры 

&НаКлиенте
Функция ПроверитьПолнотуДанныхОтбораДляВызоваИНИ(ПараметрыВызова)
	Если ПараметрыВызова.Количество() = 0 Тогда
		ПоказатьОповещениеПользователя(
		"Нет данных для отбора по расчётным листкам.",,
		"Ошибка подготовки данных"
		,БиблиотекаКартинок["Ошибка32"]
		,СтатусОповещенияПользователя.Важное,);
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура ОтправитьСокращенныйРасчетныйЛистокВСБИС(ПараметрыВызова) Экспорт
	ПараметрыВызова = Saby_ВстраиваниеВСтандартныеФормы.ПодготовитьДанныеПрочийКадровыйРасчетныйЛисток(ПараметрыВызова);
	Если  НЕ ПроверитьПолнотуДанныхОтбораДляВызоваИНИ(ПараметрыВызова) Тогда
		Возврат;
	КонецЕсли;
	Saby_ФоновыеЗаданияКлиент.ЗапуститьINIФоновымЗаданием("СокращенныйРасчетныйЛисток_send", ПараметрыВызова, Неопределено, Неопределено, "Отправка в SABY");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПрочийКадровыйРасчетныйЛистокВСБИС(ПараметрыВызова) Экспорт
	ПараметрыВызова = Saby_ВстраиваниеВСтандартныеФормы.ПодготовитьДанныеПрочийКадровыйРасчетныйЛисток(ПараметрыВызова);
	Если  НЕ ПроверитьПолнотуДанныхОтбораДляВызоваИНИ(ПараметрыВызова) Тогда
		Возврат;
	КонецЕсли;
	Saby_ФоновыеЗаданияКлиент.ЗапуститьINIФоновымЗаданием("ПрочийКадровыйРасчетныйЛисток_send", ПараметрыВызова, Неопределено, Неопределено, "Отправка в SABY");
КонецПроцедуры

Процедура УстановитьПризнакУчаствуетВКЭДО(Команда, ПараметрКоманды ) Экспорт
	мСсылок = ПолучитьСписокСсылокНаОбъектыКоманды( ПараметрКоманды );
	Для Каждого СсылкаСотрудник Из мСсылок.Источник Цикл
		ПредЗначение = Saby_Core.ПолучитьЗначениеСвойства(СсылкаСотрудник, "КЭДО", Ложь);
		Saby_Core.УстановитьЗначениеСвойства(СсылкаСотрудник, "КЭДО", НЕ ПредЗначение);
	КонецЦикла;

	Если ТипЗнч(ПараметрКоманды.Источник) = Тип("ТаблицаФормы") Тогда
		ТблСписок = ПараметрКоманды.Форма.Элементы.Найти(ПараметрКоманды.Источник.Имя);
		ТблСписок.Обновить();
	КонецЕсли;  
КонецПроцедуры
